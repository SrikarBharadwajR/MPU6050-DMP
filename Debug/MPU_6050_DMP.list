
MPU_6050_DMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091e0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001198  080093b0  080093b0  0000a3b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a548  0800a548  0000c1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a548  0800a548  0000b548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a550  0800a550  0000c1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a550  0800a550  0000b550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a554  0800a554  0000b554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800a558  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  200001e8  0800a740  0000c1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  0800a740  0000c488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f63a  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000234e  00000000  00000000  0001b852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  0001dba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00023954  00000000  00000000  0001eff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00011aec  00000000  00000000  0004294c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d155d  00000000  00000000  00054438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00125995  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000f8a  00000000  00000000  001259d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069c8  00000000  00000000  00126964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0012d32c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009398 	.word	0x08009398

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08009398 	.word	0x08009398

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <I2Cdev_init>:

/** Sets device handle to use for communications
 * You can call this function and set any other device at any moment
 */
void I2Cdev_init(I2C_HandleTypeDef *hi2c)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	I2Cdev_hi2c = hi2c;
 8000f80:	4a04      	ldr	r2, [pc, #16]	@ (8000f94 <I2Cdev_init+0x1c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000204 	.word	0x20000204

08000f98 <readBits>:
 * readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart,
		uint8_t length, uint8_t *data, uint16_t timeout, void *wireObj)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	71fb      	strb	r3, [r7, #7]
 8000faa:	4603      	mov	r3, r0
 8000fac:	71bb      	strb	r3, [r7, #6]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	717b      	strb	r3, [r7, #5]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	713b      	strb	r3, [r7, #4]
	// 76543210 bit numbers
	//    xxx   args: bitStart=4, length=3
	//    010   masked
	//   -> 010 shifted
	uint8_t count, b;
	if ((count = readByte(devAddr, regAddr, &b, timeout, wireObj)) != 0)
 8000fb6:	8cbc      	ldrh	r4, [r7, #36]	@ 0x24
 8000fb8:	f107 020d 	add.w	r2, r7, #13
 8000fbc:	79b9      	ldrb	r1, [r7, #6]
 8000fbe:	79f8      	ldrb	r0, [r7, #7]
 8000fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	4623      	mov	r3, r4
 8000fc6:	f000 f829 	bl	800101c <readByte>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	73fb      	strb	r3, [r7, #15]
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d01d      	beq.n	8001010 <readBits+0x78>
	{
		uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8000fd4:	793b      	ldrb	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	1e5a      	subs	r2, r3, #1
 8000fde:	7979      	ldrb	r1, [r7, #5]
 8000fe0:	793b      	ldrb	r3, [r7, #4]
 8000fe2:	1acb      	subs	r3, r1, r3
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	73bb      	strb	r3, [r7, #14]
		b &= mask;
 8000fec:	7b7a      	ldrb	r2, [r7, #13]
 8000fee:	7bbb      	ldrb	r3, [r7, #14]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	737b      	strb	r3, [r7, #13]
		b >>= (bitStart - length + 1);
 8000ff6:	7b7b      	ldrb	r3, [r7, #13]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	797a      	ldrb	r2, [r7, #5]
 8000ffc:	793b      	ldrb	r3, [r7, #4]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	3301      	adds	r3, #1
 8001002:	fa41 f303 	asr.w	r3, r1, r3
 8001006:	b2db      	uxtb	r3, r3
 8001008:	737b      	strb	r3, [r7, #13]
		*data = b;
 800100a:	7b7a      	ldrb	r2, [r7, #13]
 800100c:	6a3b      	ldr	r3, [r7, #32]
 800100e:	701a      	strb	r2, [r3, #0]
	}
	return count;
 8001010:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	bd90      	pop	{r4, r7, pc}

0800101c <readByte>:
 * readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data,
		uint16_t timeout, void *wireObj)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af02      	add	r7, sp, #8
 8001022:	603a      	str	r2, [r7, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
 800102a:	460b      	mov	r3, r1
 800102c:	71bb      	strb	r3, [r7, #6]
 800102e:	4613      	mov	r3, r2
 8001030:	80bb      	strh	r3, [r7, #4]
	return readBytes(devAddr, regAddr, 1, data, timeout, wireObj);
 8001032:	79b9      	ldrb	r1, [r7, #6]
 8001034:	79f8      	ldrb	r0, [r7, #7]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	88bb      	ldrh	r3, [r7, #4]
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	2201      	movs	r2, #1
 8001042:	f000 f805 	bl	8001050 <readBytes>
 8001046:	4603      	mov	r3, r0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <readBytes>:
 * readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length,
		uint8_t *data, uint16_t timeout, void *wireObj)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af02      	add	r7, sp, #8
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	4603      	mov	r3, r0
 800105a:	71fb      	strb	r3, [r7, #7]
 800105c:	460b      	mov	r3, r1
 800105e:	71bb      	strb	r3, [r7, #6]
 8001060:	4613      	mov	r3, r2
 8001062:	717b      	strb	r3, [r7, #5]
	uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 8001064:	8b3b      	ldrh	r3, [r7, #24]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <readBytes+0x1e>
 800106a:	8b3b      	ldrh	r3, [r7, #24]
 800106c:	e000      	b.n	8001070 <readBytes+0x20>
 800106e:	2364      	movs	r3, #100	@ 0x64
 8001070:	81fb      	strh	r3, [r7, #14]

	HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, &regAddr, 1, tout);
 8001072:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <readBytes+0x70>)
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	b29b      	uxth	r3, r3
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	b299      	uxth	r1, r3
 800107e:	89fb      	ldrh	r3, [r7, #14]
 8001080:	1dba      	adds	r2, r7, #6
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2301      	movs	r3, #1
 8001086:	f002 fdc9 	bl	8003c1c <HAL_I2C_Master_Transmit>
	if (HAL_I2C_Master_Receive(I2Cdev_hi2c, devAddr << 1, data, length, tout)
 800108a:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <readBytes+0x70>)
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	b29b      	uxth	r3, r3
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	b299      	uxth	r1, r3
 8001096:	797b      	ldrb	r3, [r7, #5]
 8001098:	b29a      	uxth	r2, r3
 800109a:	89fb      	ldrh	r3, [r7, #14]
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	4613      	mov	r3, r2
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	f002 feb9 	bl	8003e18 <HAL_I2C_Master_Receive>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <readBytes+0x62>
			== HAL_OK)
		return length;
 80010ac:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80010b0:	e001      	b.n	80010b6 <readBytes+0x66>
	return -1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000204 	.word	0x20000204

080010c4 <readWords>:
 * readTimeout)
 * @return Number of words read (-1 indicates failure)
 */
int8_t readWords(uint8_t devAddr, uint8_t regAddr, uint8_t length,
		uint16_t *data, uint16_t timeout, void *wireObj)
{
 80010c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010c8:	b089      	sub	sp, #36	@ 0x24
 80010ca:	af02      	add	r7, sp, #8
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
 80010d2:	460b      	mov	r3, r1
 80010d4:	71bb      	strb	r3, [r7, #6]
 80010d6:	4613      	mov	r3, r2
 80010d8:	717b      	strb	r3, [r7, #5]
 80010da:	466b      	mov	r3, sp
 80010dc:	461e      	mov	r6, r3
	uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 80010de:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <readWords+0x24>
 80010e4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80010e6:	e000      	b.n	80010ea <readWords+0x26>
 80010e8:	2364      	movs	r3, #100	@ 0x64
 80010ea:	82bb      	strh	r3, [r7, #20]
	uint8_t buffer[length * 2];  // Temporary buffer to hold raw bytes
 80010ec:	797b      	ldrb	r3, [r7, #5]
 80010ee:	0059      	lsls	r1, r3, #1
 80010f0:	1e4b      	subs	r3, r1, #1
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	460a      	mov	r2, r1
 80010f6:	2300      	movs	r3, #0
 80010f8:	4690      	mov	r8, r2
 80010fa:	4699      	mov	r9, r3
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001108:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800110c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001110:	460a      	mov	r2, r1
 8001112:	2300      	movs	r3, #0
 8001114:	4614      	mov	r4, r2
 8001116:	461d      	mov	r5, r3
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	f04f 0300 	mov.w	r3, #0
 8001120:	00eb      	lsls	r3, r5, #3
 8001122:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001126:	00e2      	lsls	r2, r4, #3
 8001128:	460b      	mov	r3, r1
 800112a:	3307      	adds	r3, #7
 800112c:	08db      	lsrs	r3, r3, #3
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	ebad 0d03 	sub.w	sp, sp, r3
 8001134:	ab02      	add	r3, sp, #8
 8001136:	3300      	adds	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]

	// Send register address
	if (HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, &regAddr, 1, tout)
 800113a:	4b27      	ldr	r3, [pc, #156]	@ (80011d8 <readWords+0x114>)
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	b29b      	uxth	r3, r3
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	b299      	uxth	r1, r3
 8001146:	8abb      	ldrh	r3, [r7, #20]
 8001148:	1dba      	adds	r2, r7, #6
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2301      	movs	r3, #1
 800114e:	f002 fd65 	bl	8003c1c <HAL_I2C_Master_Transmit>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <readWords+0x9a>
			!= HAL_OK)
	{
		return -1;  // Transmission failed
 8001158:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800115c:	e035      	b.n	80011ca <readWords+0x106>
	}

	// Read raw data into buffer
	if (HAL_I2C_Master_Receive(I2Cdev_hi2c, devAddr << 1, buffer, length * 2,
 800115e:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <readWords+0x114>)
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	b29b      	uxth	r3, r3
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	b299      	uxth	r1, r3
 800116a:	797b      	ldrb	r3, [r7, #5]
 800116c:	b29b      	uxth	r3, r3
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	b29a      	uxth	r2, r3
 8001172:	8abb      	ldrh	r3, [r7, #20]
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	4613      	mov	r3, r2
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	f002 fe4d 	bl	8003e18 <HAL_I2C_Master_Receive>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <readWords+0xc6>
			tout) != HAL_OK)
	{
		return -1;  // Reception failed
 8001184:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001188:	e01f      	b.n	80011ca <readWords+0x106>
	}

	// Convert to big-endian: combine high byte and low byte into 16-bit words
	for (uint8_t i = 0; i < length; i++)
 800118a:	2300      	movs	r3, #0
 800118c:	75fb      	strb	r3, [r7, #23]
 800118e:	e016      	b.n	80011be <readWords+0xfa>
	{
		data[i] = ((uint16_t) buffer[2 * i] << 8) | buffer[2 * i + 1]; // High byte first
 8001190:	7dfb      	ldrb	r3, [r7, #23]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	5cd3      	ldrb	r3, [r2, r3]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	b21a      	sxth	r2, r3
 800119c:	7dfb      	ldrb	r3, [r7, #23]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	3301      	adds	r3, #1
 80011a2:	68f9      	ldr	r1, [r7, #12]
 80011a4:	5ccb      	ldrb	r3, [r1, r3]
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b219      	sxth	r1, r3
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	b28a      	uxth	r2, r1
 80011b6:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < length; i++)
 80011b8:	7dfb      	ldrb	r3, [r7, #23]
 80011ba:	3301      	adds	r3, #1
 80011bc:	75fb      	strb	r3, [r7, #23]
 80011be:	7dfa      	ldrb	r2, [r7, #23]
 80011c0:	797b      	ldrb	r3, [r7, #5]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d3e4      	bcc.n	8001190 <readWords+0xcc>
	}

	return length;
 80011c6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011ca:	46b5      	mov	sp, r6
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	371c      	adds	r7, #28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011d6:	bf00      	nop
 80011d8:	20000204 	.word	0x20000204

080011dc <writeBit>:
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data,
		void *wireObj)
{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b087      	sub	sp, #28
 80011e0:	af02      	add	r7, sp, #8
 80011e2:	4604      	mov	r4, r0
 80011e4:	4608      	mov	r0, r1
 80011e6:	4611      	mov	r1, r2
 80011e8:	461a      	mov	r2, r3
 80011ea:	4623      	mov	r3, r4
 80011ec:	71fb      	strb	r3, [r7, #7]
 80011ee:	4603      	mov	r3, r0
 80011f0:	71bb      	strb	r3, [r7, #6]
 80011f2:	460b      	mov	r3, r1
 80011f4:	717b      	strb	r3, [r7, #5]
 80011f6:	4613      	mov	r3, r2
 80011f8:	713b      	strb	r3, [r7, #4]
	uint8_t b;
	readByte(devAddr, regAddr, &b, readTimeout, wireObj);
 80011fa:	2464      	movs	r4, #100	@ 0x64
 80011fc:	f107 020f 	add.w	r2, r7, #15
 8001200:	79b9      	ldrb	r1, [r7, #6]
 8001202:	79f8      	ldrb	r0, [r7, #7]
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	4623      	mov	r3, r4
 800120a:	f7ff ff07 	bl	800101c <readByte>
	b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 800120e:	793b      	ldrb	r3, [r7, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00a      	beq.n	800122a <writeBit+0x4e>
 8001214:	797b      	ldrb	r3, [r7, #5]
 8001216:	2201      	movs	r2, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	b25a      	sxtb	r2, r3
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	b25b      	sxtb	r3, r3
 8001222:	4313      	orrs	r3, r2
 8001224:	b25b      	sxtb	r3, r3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	e00b      	b.n	8001242 <writeBit+0x66>
 800122a:	797b      	ldrb	r3, [r7, #5]
 800122c:	2201      	movs	r2, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	b25b      	sxtb	r3, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	b25a      	sxtb	r2, r3
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	b25b      	sxtb	r3, r3
 800123c:	4013      	ands	r3, r2
 800123e:	b25b      	sxtb	r3, r3
 8001240:	b2db      	uxtb	r3, r3
 8001242:	73fb      	strb	r3, [r7, #15]
	return writeByte(devAddr, regAddr, b, wireObj);
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	79b9      	ldrb	r1, [r7, #6]
 8001248:	79f8      	ldrb	r0, [r7, #7]
 800124a:	6a3b      	ldr	r3, [r7, #32]
 800124c:	f000 f85a 	bl	8001304 <writeByte>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	bd90      	pop	{r4, r7, pc}

0800125a <writeBits>:
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart,
		uint8_t length, uint8_t data, void *wireObj)
{
 800125a:	b590      	push	{r4, r7, lr}
 800125c:	b087      	sub	sp, #28
 800125e:	af02      	add	r7, sp, #8
 8001260:	4604      	mov	r4, r0
 8001262:	4608      	mov	r0, r1
 8001264:	4611      	mov	r1, r2
 8001266:	461a      	mov	r2, r3
 8001268:	4623      	mov	r3, r4
 800126a:	71fb      	strb	r3, [r7, #7]
 800126c:	4603      	mov	r3, r0
 800126e:	71bb      	strb	r3, [r7, #6]
 8001270:	460b      	mov	r3, r1
 8001272:	717b      	strb	r3, [r7, #5]
 8001274:	4613      	mov	r3, r2
 8001276:	713b      	strb	r3, [r7, #4]
	// 00011100 mask byte
	// 10101111 original value (sample)
	// 10100011 original & ~mask
	// 10101011 masked | value
	uint8_t b;
	if (readByte(devAddr, regAddr, &b, readTimeout, wireObj) != 0)
 8001278:	2464      	movs	r4, #100	@ 0x64
 800127a:	f107 020e 	add.w	r2, r7, #14
 800127e:	79b9      	ldrb	r1, [r7, #6]
 8001280:	79f8      	ldrb	r0, [r7, #7]
 8001282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	4623      	mov	r3, r4
 8001288:	f7ff fec8 	bl	800101c <readByte>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d033      	beq.n	80012fa <writeBits+0xa0>
	{
		uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8001292:	793b      	ldrb	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	1e5a      	subs	r2, r3, #1
 800129c:	7979      	ldrb	r1, [r7, #5]
 800129e:	793b      	ldrb	r3, [r7, #4]
 80012a0:	1acb      	subs	r3, r1, r3
 80012a2:	3301      	adds	r3, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	73fb      	strb	r3, [r7, #15]
		data <<= (bitStart - length + 1); // shift data into correct position
 80012aa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80012ae:	7979      	ldrb	r1, [r7, #5]
 80012b0:	793b      	ldrb	r3, [r7, #4]
 80012b2:	1acb      	subs	r3, r1, r3
 80012b4:	3301      	adds	r3, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	f887 3020 	strb.w	r3, [r7, #32]
		data &= mask;					  // zero all non-important bits in data
 80012be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	4013      	ands	r3, r2
 80012c6:	f887 3020 	strb.w	r3, [r7, #32]
		b &= ~(mask);				// zero all important bits in existing byte
 80012ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	b25a      	sxtb	r2, r3
 80012d2:	7bbb      	ldrb	r3, [r7, #14]
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	4013      	ands	r3, r2
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	73bb      	strb	r3, [r7, #14]
		b |= data;						  // combine data with existing byte
 80012de:	7bba      	ldrb	r2, [r7, #14]
 80012e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	73bb      	strb	r3, [r7, #14]
		return writeByte(devAddr, regAddr, b, wireObj);
 80012ea:	7bba      	ldrb	r2, [r7, #14]
 80012ec:	79b9      	ldrb	r1, [r7, #6]
 80012ee:	79f8      	ldrb	r0, [r7, #7]
 80012f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f2:	f000 f807 	bl	8001304 <writeByte>
 80012f6:	4603      	mov	r3, r0
 80012f8:	e000      	b.n	80012fc <writeBits+0xa2>
	}
	else
	{
		return false;
 80012fa:	2300      	movs	r3, #0
	}
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	bd90      	pop	{r4, r7, pc}

08001304 <writeByte>:
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data, void *wireObj)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af02      	add	r7, sp, #8
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	4603      	mov	r3, r0
 800130e:	71fb      	strb	r3, [r7, #7]
 8001310:	460b      	mov	r3, r1
 8001312:	71bb      	strb	r3, [r7, #6]
 8001314:	4613      	mov	r3, r2
 8001316:	717b      	strb	r3, [r7, #5]
	return writeBytes(devAddr, regAddr, 1, &data, wireObj);
 8001318:	1d7a      	adds	r2, r7, #5
 800131a:	79b9      	ldrb	r1, [r7, #6]
 800131c:	79f8      	ldrb	r0, [r7, #7]
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	4613      	mov	r3, r2
 8001324:	2201      	movs	r2, #1
 8001326:	f000 f81d 	bl	8001364 <writeBytes>
 800132a:	4603      	mov	r3, r0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <writeWord>:
 * @param regAddr Register address to write to
 * @param data New word value to write
 * @return Status of operation (true = success)
 */
bool writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data, void *wireObj)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af02      	add	r7, sp, #8
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	4603      	mov	r3, r0
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	460b      	mov	r3, r1
 8001342:	71bb      	strb	r3, [r7, #6]
 8001344:	4613      	mov	r3, r2
 8001346:	80bb      	strh	r3, [r7, #4]
	return writeWords(devAddr, regAddr, 1, &data, wireObj);
 8001348:	1d3a      	adds	r2, r7, #4
 800134a:	79b9      	ldrb	r1, [r7, #6]
 800134c:	79f8      	ldrb	r0, [r7, #7]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	4613      	mov	r3, r2
 8001354:	2201      	movs	r2, #1
 8001356:	f000 f831 	bl	80013bc <writeWords>
 800135a:	4603      	mov	r3, r0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <writeBytes>:
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data,
		void *wireObj)
{
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b089      	sub	sp, #36	@ 0x24
 8001368:	af04      	add	r7, sp, #16
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	4603      	mov	r3, r0
 800136e:	71fb      	strb	r3, [r7, #7]
 8001370:	460b      	mov	r3, r1
 8001372:	71bb      	strb	r3, [r7, #6]
 8001374:	4613      	mov	r3, r2
 8001376:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(I2Cdev_hi2c, devAddr << 1,
 8001378:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <writeBytes+0x54>)
 800137a:	6818      	ldr	r0, [r3, #0]
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	b29b      	uxth	r3, r3
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	b299      	uxth	r1, r3
 8001384:	79bb      	ldrb	r3, [r7, #6]
 8001386:	b29a      	uxth	r2, r3
 8001388:	797b      	ldrb	r3, [r7, #5]
 800138a:	b29b      	uxth	r3, r3
 800138c:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8001390:	9402      	str	r4, [sp, #8]
 8001392:	9301      	str	r3, [sp, #4]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	2301      	movs	r3, #1
 800139a:	f002 ff6f 	bl	800427c <HAL_I2C_Mem_Write>
 800139e:	4603      	mov	r3, r0
 80013a0:	73fb      	strb	r3, [r7, #15]
			regAddr, I2C_MEMADD_SIZE_8BIT, data, length, 1000);
	return status == HAL_OK;
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	bf0c      	ite	eq
 80013a8:	2301      	moveq	r3, #1
 80013aa:	2300      	movne	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd90      	pop	{r4, r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000204 	.word	0x20000204

080013bc <writeWords>:
//			sizeof(uint16_t) * length, 1000);
//	return status == HAL_OK;
//}
bool writeWords(uint8_t devAddr, uint8_t regAddr, uint8_t length,
		uint16_t *data, void *wireObj)
{
 80013bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013c0:	b08b      	sub	sp, #44	@ 0x2c
 80013c2:	af04      	add	r7, sp, #16
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
 80013ca:	460b      	mov	r3, r1
 80013cc:	71bb      	strb	r3, [r7, #6]
 80013ce:	4613      	mov	r3, r2
 80013d0:	717b      	strb	r3, [r7, #5]
 80013d2:	466b      	mov	r3, sp
 80013d4:	461e      	mov	r6, r3
	uint8_t tempData[length * 2];  // Temporary buffer for byte-swapped data
 80013d6:	797b      	ldrb	r3, [r7, #5]
 80013d8:	0059      	lsls	r1, r3, #1
 80013da:	1e4b      	subs	r3, r1, #1
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	460a      	mov	r2, r1
 80013e0:	2300      	movs	r3, #0
 80013e2:	4690      	mov	r8, r2
 80013e4:	4699      	mov	r9, r3
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	f04f 0300 	mov.w	r3, #0
 80013ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013fa:	460a      	mov	r2, r1
 80013fc:	2300      	movs	r3, #0
 80013fe:	4614      	mov	r4, r2
 8001400:	461d      	mov	r5, r3
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	f04f 0300 	mov.w	r3, #0
 800140a:	00eb      	lsls	r3, r5, #3
 800140c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001410:	00e2      	lsls	r2, r4, #3
 8001412:	460b      	mov	r3, r1
 8001414:	3307      	adds	r3, #7
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	ebad 0d03 	sub.w	sp, sp, r3
 800141e:	ab04      	add	r3, sp, #16
 8001420:	3300      	adds	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < length; i++)
 8001424:	2300      	movs	r3, #0
 8001426:	75fb      	strb	r3, [r7, #23]
 8001428:	e019      	b.n	800145e <writeWords+0xa2>
	{
		tempData[2 * i] = (data[i] >> 8) & 0xFF;    // High byte first
 800142a:	7dfb      	ldrb	r3, [r7, #23]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	4413      	add	r3, r2
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	b29a      	uxth	r2, r3
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	b2d1      	uxtb	r1, r2
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	54d1      	strb	r1, [r2, r3]
		tempData[2 * i + 1] = data[i] & 0xFF;       // Low byte second
 8001442:	7dfb      	ldrb	r3, [r7, #23]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	4413      	add	r3, r2
 800144a:	881a      	ldrh	r2, [r3, #0]
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	3301      	adds	r3, #1
 8001452:	b2d1      	uxtb	r1, r2
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < length; i++)
 8001458:	7dfb      	ldrb	r3, [r7, #23]
 800145a:	3301      	adds	r3, #1
 800145c:	75fb      	strb	r3, [r7, #23]
 800145e:	7dfa      	ldrb	r2, [r7, #23]
 8001460:	797b      	ldrb	r3, [r7, #5]
 8001462:	429a      	cmp	r2, r3
 8001464:	d3e1      	bcc.n	800142a <writeWords+0x6e>
	}

	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(I2Cdev_hi2c, devAddr << 1,
 8001466:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <writeWords+0xf0>)
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	b29b      	uxth	r3, r3
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	b299      	uxth	r1, r3
 8001472:	79bb      	ldrb	r3, [r7, #6]
 8001474:	b29a      	uxth	r2, r3
 8001476:	797b      	ldrb	r3, [r7, #5]
 8001478:	b29b      	uxth	r3, r3
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	b29b      	uxth	r3, r3
 800147e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8001482:	9402      	str	r4, [sp, #8]
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2301      	movs	r3, #1
 800148c:	f002 fef6 	bl	800427c <HAL_I2C_Mem_Write>
 8001490:	4603      	mov	r3, r0
 8001492:	72fb      	strb	r3, [r7, #11]
			regAddr, I2C_MEMADD_SIZE_8BIT, tempData, length * 2, 1000);
	return status == HAL_OK;
 8001494:	7afb      	ldrb	r3, [r7, #11]
 8001496:	2b00      	cmp	r3, #0
 8001498:	bf0c      	ite	eq
 800149a:	2301      	moveq	r3, #1
 800149c:	2300      	movne	r3, #0
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	46b5      	mov	sp, r6
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	371c      	adds	r7, #28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014ac:	20000204 	.word	0x20000204

080014b0 <micros>:
#include "MPU6050.h"

uint32_t micros(void)
{
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	return (HAL_GetTick() * 1000)
 80014b4:	f001 ffaa 	bl	800340c <HAL_GetTick>
 80014b8:	4603      	mov	r3, r0
 80014ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014be:	fb02 f403 	mul.w	r4, r2, r3
			+ (SysTick->LOAD - SysTick->VAL) / (HAL_RCC_GetHCLKFreq() / 1000000);
 80014c2:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <micros+0x34>)
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <micros+0x34>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	1ad5      	subs	r5, r2, r3
 80014cc:	f003 fcd2 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4a05      	ldr	r2, [pc, #20]	@ (80014e8 <micros+0x38>)
 80014d4:	fba2 2303 	umull	r2, r3, r2, r3
 80014d8:	0c9b      	lsrs	r3, r3, #18
 80014da:	fbb5 f3f3 	udiv	r3, r5, r3
 80014de:	4423      	add	r3, r4
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	bdb0      	pop	{r4, r5, r7, pc}
 80014e4:	e000e010 	.word	0xe000e010
 80014e8:	431bde83 	.word	0x431bde83

080014ec <map>:

// Function to map a number from one range to another
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	@ 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	603b      	str	r3, [r7, #0]
	const long run = in_max - in_min;
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	61fb      	str	r3, [r7, #28]
	if (run == 0)
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <map+0x22>
	{
		return -1;    // AVR returns -1, SAM returns 0
 8001508:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800150c:	e010      	b.n	8001530 <map+0x44>
	}
	const long rise = out_max - out_min;
 800150e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	61bb      	str	r3, [r7, #24]
	const long delta = x - in_min;
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	617b      	str	r3, [r7, #20]
	return (delta * rise) / run + out_min;
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	fb03 f202 	mul.w	r2, r3, r2
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	fb92 f2f3 	sdiv	r2, r2, r3
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	4413      	add	r3, r2
}
 8001530:	4618      	mov	r0, r3
 8001532:	3724      	adds	r7, #36	@ 0x24
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <initialize>:
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void initialize(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 8001540:	2001      	movs	r0, #1
 8001542:	f000 f88d 	bl	8001660 <setClockSource>
	setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 8001546:	2000      	movs	r0, #0
 8001548:	f000 f814 	bl	8001574 <setFullScaleGyroRange>
	setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 800154c:	2000      	movs	r0, #0
 800154e:	f000 f841 	bl	80015d4 <setFullScaleAccelRange>
	setSleepEnabled(false);  // thanks to Jack Elston for pointing this one out!
 8001552:	2000      	movs	r0, #0
 8001554:	f000 f870 	bl	8001638 <setSleepEnabled>
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}

0800155c <testConnection>:
/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool testConnection(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	return getDeviceID() == 0x34;
 8001560:	f000 f95e 	bl	8001820 <getDeviceID>
 8001564:	4603      	mov	r3, r0
 8001566:	2b34      	cmp	r3, #52	@ 0x34
 8001568:	bf0c      	ite	eq
 800156a:	2301      	moveq	r3, #1
 800156c:	2300      	movne	r3, #0
 800156e:	b2db      	uxtb	r3, r3
}
 8001570:	4618      	mov	r0, r3
 8001572:	bd80      	pop	{r7, pc}

08001574 <setFullScaleGyroRange>:
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void setFullScaleGyroRange(uint8_t range)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af02      	add	r7, sp, #8
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
	writeBits(mpu.devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT,
 800157e:	4b07      	ldr	r3, [pc, #28]	@ (800159c <setFullScaleGyroRange+0x28>)
 8001580:	7818      	ldrb	r0, [r3, #0]
 8001582:	2300      	movs	r3, #0
 8001584:	9301      	str	r3, [sp, #4]
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2302      	movs	r3, #2
 800158c:	2204      	movs	r2, #4
 800158e:	211b      	movs	r1, #27
 8001590:	f7ff fe63 	bl	800125a <writeBits>
	MPU6050_GCONFIG_FS_SEL_LENGTH, range, NULL);
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200002ac 	.word	0x200002ac

080015a0 <getFullScaleAccelRange>:
 * @see MPU6050_RA_ACCEL_CONFIG
 * @see MPU6050_ACONFIG_AFS_SEL_BIT
 * @see MPU6050_ACONFIG_AFS_SEL_LENGTH
 */
uint8_t getFullScaleAccelRange(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af04      	add	r7, sp, #16
	readBits(mpu.devAddr,
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <getFullScaleAccelRange+0x2c>)
 80015a8:	7818      	ldrb	r0, [r3, #0]
 80015aa:	2300      	movs	r3, #0
 80015ac:	9302      	str	r3, [sp, #8]
 80015ae:	2300      	movs	r3, #0
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	4b07      	ldr	r3, [pc, #28]	@ (80015d0 <getFullScaleAccelRange+0x30>)
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2302      	movs	r3, #2
 80015b8:	2204      	movs	r2, #4
 80015ba:	211c      	movs	r1, #28
 80015bc:	f7ff fcec 	bl	8000f98 <readBits>
	MPU6050_RA_ACCEL_CONFIG,
	MPU6050_ACONFIG_AFS_SEL_BIT,
	MPU6050_ACONFIG_AFS_SEL_LENGTH, mpu.buffer, 0,
	NULL);
	return mpu.buffer[0];
 80015c0:	4b02      	ldr	r3, [pc, #8]	@ (80015cc <getFullScaleAccelRange+0x2c>)
 80015c2:	7a1b      	ldrb	r3, [r3, #8]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200002ac 	.word	0x200002ac
 80015d0:	200002b4 	.word	0x200002b4

080015d4 <setFullScaleAccelRange>:
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange(void)
 */
void setFullScaleAccelRange(uint8_t range)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af02      	add	r7, sp, #8
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
	writeBits(mpu.devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT,
 80015de:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <setFullScaleAccelRange+0x28>)
 80015e0:	7818      	ldrb	r0, [r3, #0]
 80015e2:	2300      	movs	r3, #0
 80015e4:	9301      	str	r3, [sp, #4]
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2302      	movs	r3, #2
 80015ec:	2204      	movs	r2, #4
 80015ee:	211c      	movs	r1, #28
 80015f0:	f7ff fe33 	bl	800125a <writeBits>
	MPU6050_ACONFIG_AFS_SEL_LENGTH, range, NULL);
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200002ac 	.word	0x200002ac

08001600 <getFIFOTimeout>:
 * @return Current timeout to get a packet from FIFO buffer
 * @see MPU6050_FIFO_DEFAULT_TIMEOUT
 */

uint32_t getFIFOTimeout()
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
	return MPU6050_FIFO_DEFAULT_TIMEOUT;
 8001604:	f642 23f8 	movw	r3, #11000	@ 0x2af8
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <resetFIFO>:
 * bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void resetFIFO(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af02      	add	r7, sp, #8
	writeBit(mpu.devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT,
 800161a:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <resetFIFO+0x20>)
 800161c:	7818      	ldrb	r0, [r3, #0]
 800161e:	2300      	movs	r3, #0
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2301      	movs	r3, #1
 8001624:	2202      	movs	r2, #2
 8001626:	216a      	movs	r1, #106	@ 0x6a
 8001628:	f7ff fdd8 	bl	80011dc <writeBit>
	true, NULL);
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200002ac 	.word	0x200002ac

08001638 <setSleepEnabled>:
 * @see getSleepEnabled(void)
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void setSleepEnabled(bool enabled)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af02      	add	r7, sp, #8
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
	writeBit(mpu.devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT,
 8001642:	4b06      	ldr	r3, [pc, #24]	@ (800165c <setSleepEnabled+0x24>)
 8001644:	7818      	ldrb	r0, [r3, #0]
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	2200      	movs	r2, #0
 800164a:	9200      	str	r2, [sp, #0]
 800164c:	2206      	movs	r2, #6
 800164e:	216b      	movs	r1, #107	@ 0x6b
 8001650:	f7ff fdc4 	bl	80011dc <writeBit>
			enabled, NULL);
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200002ac 	.word	0x200002ac

08001660 <setClockSource>:
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void setClockSource(uint8_t source)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af02      	add	r7, sp, #8
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
	writeBits(mpu.devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT,
 800166a:	4b07      	ldr	r3, [pc, #28]	@ (8001688 <setClockSource+0x28>)
 800166c:	7818      	ldrb	r0, [r3, #0]
 800166e:	2300      	movs	r3, #0
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	2303      	movs	r3, #3
 8001678:	2202      	movs	r2, #2
 800167a:	216b      	movs	r1, #107	@ 0x6b
 800167c:	f7ff fded 	bl	800125a <writeBits>
	MPU6050_PWR1_CLKSEL_LENGTH, source, NULL);
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200002ac 	.word	0x200002ac

0800168c <getFIFOCount>:
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @return Current FIFO mpu.buffer size
 */
uint16_t getFIFOCount(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af02      	add	r7, sp, #8
	readBytes(mpu.devAddr, MPU6050_RA_FIFO_COUNTH, 2, mpu.buffer, 0, NULL);
 8001692:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <getFIFOCount+0x38>)
 8001694:	7818      	ldrb	r0, [r3, #0]
 8001696:	2300      	movs	r3, #0
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	2300      	movs	r3, #0
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <getFIFOCount+0x3c>)
 80016a0:	2202      	movs	r2, #2
 80016a2:	2172      	movs	r1, #114	@ 0x72
 80016a4:	f7ff fcd4 	bl	8001050 <readBytes>
	return (((uint16_t) mpu.buffer[0]) << 8) | mpu.buffer[1];
 80016a8:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <getFIFOCount+0x38>)
 80016aa:	7a1b      	ldrb	r3, [r3, #8]
 80016ac:	021b      	lsls	r3, r3, #8
 80016ae:	b21a      	sxth	r2, r3
 80016b0:	4b04      	ldr	r3, [pc, #16]	@ (80016c4 <getFIFOCount+0x38>)
 80016b2:	7a5b      	ldrb	r3, [r3, #9]
 80016b4:	b21b      	sxth	r3, r3
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	b29b      	uxth	r3, r3
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200002ac 	.word	0x200002ac
 80016c8:	200002b4 	.word	0x200002b4

080016cc <getFIFOBytes>:
{
	readByte(mpu.devAddr, MPU6050_RA_FIFO_R_W, mpu.buffer, 0, NULL);
	return mpu.buffer[0];
}
void getFIFOBytes(uint8_t *data, uint8_t length)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af02      	add	r7, sp, #8
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	70fb      	strb	r3, [r7, #3]
	if (length > 0)
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00b      	beq.n	80016f6 <getFIFOBytes+0x2a>
	{
		readBytes(mpu.devAddr, MPU6050_RA_FIFO_R_W, length, data, 0, NULL);
 80016de:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <getFIFOBytes+0x38>)
 80016e0:	7818      	ldrb	r0, [r3, #0]
 80016e2:	78fa      	ldrb	r2, [r7, #3]
 80016e4:	2300      	movs	r3, #0
 80016e6:	9301      	str	r3, [sp, #4]
 80016e8:	2300      	movs	r3, #0
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2174      	movs	r1, #116	@ 0x74
 80016f0:	f7ff fcae 	bl	8001050 <readBytes>
	}
	else
	{
		*data = 0;
	}
}
 80016f4:	e002      	b.n	80016fc <getFIFOBytes+0x30>
		*data = 0;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200002ac 	.word	0x200002ac

08001708 <GetCurrentFIFOPacket>:
 * Returns 1) when nothing special was done
 *         2) when recovering from overflow
 *         0) when no valid data is available
 * ================================================================ */
int8_t GetCurrentFIFOPacket(uint8_t *data, uint8_t length)
{    // overflow proof
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b08f      	sub	sp, #60	@ 0x3c
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	70fb      	strb	r3, [r7, #3]
	int16_t fifoC;
	// This section of code is for when we allowed more than 1 packet to be acquired
	uint32_t BreakTimer = micros();
 8001714:	f7ff fecc 	bl	80014b0 <micros>
 8001718:	6338      	str	r0, [r7, #48]	@ 0x30
	bool packetReceived = false;
 800171a:	2300      	movs	r3, #0
 800171c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	do
	{
		if ((fifoC = getFIFOCount()) > length)
 8001720:	f7ff ffb4 	bl	800168c <getFIFOCount>
 8001724:	4603      	mov	r3, r0
 8001726:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001728:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	429a      	cmp	r2, r3
 8001730:	dd43      	ble.n	80017ba <GetCurrentFIFOPacket+0xb2>
		{
			if (fifoC > 200)
 8001732:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001736:	2bc8      	cmp	r3, #200	@ 0xc8
 8001738:	dd36      	ble.n	80017a8 <GetCurrentFIFOPacket+0xa0>
			{ // if you waited to get the FIFO mpu.buffer to > 200 bytes it will take longer to get the
			  // last packet in the FIFO mpu.buffer than it will take to  reset the mpu.buffer and wait
			  // for the next to arrive
				resetFIFO();        // Fixes any overflow corruption
 800173a:	f7ff ff6b 	bl	8001614 <resetFIFO>
				fifoC = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	86fb      	strh	r3, [r7, #54]	@ 0x36
				while (!(fifoC = getFIFOCount())
 8001742:	bf00      	nop
 8001744:	f7ff ffa2 	bl	800168c <getFIFOCount>
 8001748:	4603      	mov	r3, r0
 800174a:	86fb      	strh	r3, [r7, #54]	@ 0x36
						&& ((micros() - BreakTimer) <= (getFIFOTimeout())))
 800174c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001750:	2b00      	cmp	r3, #0
 8001752:	d132      	bne.n	80017ba <GetCurrentFIFOPacket+0xb2>
 8001754:	f7ff feac 	bl	80014b0 <micros>
 8001758:	4602      	mov	r2, r0
 800175a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800175c:	1ad4      	subs	r4, r2, r3
 800175e:	f7ff ff4f 	bl	8001600 <getFIFOTimeout>
 8001762:	4603      	mov	r3, r0
 8001764:	429c      	cmp	r4, r3
 8001766:	d9ed      	bls.n	8001744 <GetCurrentFIFOPacket+0x3c>
 8001768:	e027      	b.n	80017ba <GetCurrentFIFOPacket+0xb2>
			else
			{ // We have more than 1 packet but less than 200 bytes of data in the FIFO mpu.buffer
				uint8_t Trash[I2CDEVLIB_WIRE_BUFFER_LENGTH];
				while ((fifoC = getFIFOCount()) > length)
				{ // Test each time just in case the MPU is writing to the FIFO mpu.buffer
					fifoC = fifoC - length;              // Save the last packet
 800176a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	b29b      	uxth	r3, r3
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	b29b      	uxth	r3, r3
 8001774:	86fb      	strh	r3, [r7, #54]	@ 0x36
					uint16_t RemoveBytes;
					while (fifoC)
 8001776:	e013      	b.n	80017a0 <GetCurrentFIFOPacket+0x98>
					{              // fifo count will reach zero so this is safe
						RemoveBytes =
								(fifoC < I2CDEVLIB_WIRE_BUFFER_LENGTH) ?
										fifoC : I2CDEVLIB_WIRE_BUFFER_LENGTH; // mpu.buffer Length is different than the packet length this
 8001778:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800177c:	2b20      	cmp	r3, #32
 800177e:	bfa8      	it	ge
 8001780:	2320      	movge	r3, #32
 8001782:	b21b      	sxth	r3, r3
						RemoveBytes =
 8001784:	85bb      	strh	r3, [r7, #44]	@ 0x2c
																			  // will efficiently clear the mpu.buffer
						getFIFOBytes(Trash, (uint8_t) RemoveBytes);
 8001786:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001788:	b2da      	uxtb	r2, r3
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff9b 	bl	80016cc <getFIFOBytes>
						fifoC -= RemoveBytes;
 8001796:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8001798:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	b29b      	uxth	r3, r3
 800179e:	86fb      	strh	r3, [r7, #54]	@ 0x36
					while (fifoC)
 80017a0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1e7      	bne.n	8001778 <GetCurrentFIFOPacket+0x70>
				while ((fifoC = getFIFOCount()) > length)
 80017a8:	f7ff ff70 	bl	800168c <getFIFOCount>
 80017ac:	4603      	mov	r3, r0
 80017ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80017b0:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	dcd7      	bgt.n	800176a <GetCurrentFIFOPacket+0x62>
					}
				}
			}
		}
		if (!fifoC)
 80017ba:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <GetCurrentFIFOPacket+0xbe>
			return 0; // Called too early no data or we timed out after FIFO Reset
 80017c2:	2300      	movs	r3, #0
 80017c4:	e028      	b.n	8001818 <GetCurrentFIFOPacket+0x110>
		// We have 1 packet
		packetReceived = fifoC == length;
 80017c6:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	bf0c      	ite	eq
 80017d0:	2301      	moveq	r3, #1
 80017d2:	2300      	movne	r3, #0
 80017d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (!packetReceived && (micros() - BreakTimer) > (getFIFOTimeout()))
 80017d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017dc:	f083 0301 	eor.w	r3, r3, #1
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <GetCurrentFIFOPacket+0xf6>
 80017e6:	f7ff fe63 	bl	80014b0 <micros>
 80017ea:	4602      	mov	r2, r0
 80017ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017ee:	1ad4      	subs	r4, r2, r3
 80017f0:	f7ff ff06 	bl	8001600 <getFIFOTimeout>
 80017f4:	4603      	mov	r3, r0
 80017f6:	429c      	cmp	r4, r3
 80017f8:	d901      	bls.n	80017fe <GetCurrentFIFOPacket+0xf6>
			return 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e00c      	b.n	8001818 <GetCurrentFIFOPacket+0x110>
	} while (!packetReceived);
 80017fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001802:	f083 0301 	eor.w	r3, r3, #1
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d189      	bne.n	8001720 <GetCurrentFIFOPacket+0x18>
	getFIFOBytes(data, length);    // Get 1 packet
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	4619      	mov	r1, r3
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff5b 	bl	80016cc <getFIFOBytes>
	return 1;
 8001816:	2301      	movs	r3, #1
}
 8001818:	4618      	mov	r0, r3
 800181a:	373c      	adds	r7, #60	@ 0x3c
 800181c:	46bd      	mov	sp, r7
 800181e:	bd90      	pop	{r4, r7, pc}

08001820 <getDeviceID>:
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t getDeviceID(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af04      	add	r7, sp, #16
	readBits(mpu.devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT,
 8001826:	4b09      	ldr	r3, [pc, #36]	@ (800184c <getDeviceID+0x2c>)
 8001828:	7818      	ldrb	r0, [r3, #0]
 800182a:	2300      	movs	r3, #0
 800182c:	9302      	str	r3, [sp, #8]
 800182e:	2300      	movs	r3, #0
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	4b07      	ldr	r3, [pc, #28]	@ (8001850 <getDeviceID+0x30>)
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2306      	movs	r3, #6
 8001838:	2206      	movs	r2, #6
 800183a:	2175      	movs	r1, #117	@ 0x75
 800183c:	f7ff fbac 	bl	8000f98 <readBits>
	MPU6050_WHO_AM_I_LENGTH, mpu.buffer, 0, NULL);
	return mpu.buffer[0];
 8001840:	4b02      	ldr	r3, [pc, #8]	@ (800184c <getDeviceID+0x2c>)
 8001842:	7a1b      	ldrb	r3, [r3, #8]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200002ac 	.word	0x200002ac
 8001850:	200002b4 	.word	0x200002b4

08001854 <setXAccelOffset>:
	uint8_t SaveAddress = ((getDeviceID() < 0x38) ? MPU6050_RA_XA_OFFS_H : 0x77); // MPU6050,MPU9150 Vs MPU6500,MPU9250
	readBytes(mpu.devAddr, SaveAddress, 2, mpu.buffer, 0, NULL);
	return (((int16_t) mpu.buffer[0]) << 8) | mpu.buffer[1];
}
void setXAccelOffset(int16_t offset)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
	uint8_t SaveAddress = ((getDeviceID() < 0x38) ? MPU6050_RA_XA_OFFS_H : 0x77); // MPU6050,MPU9150 Vs MPU6500,MPU9250
 800185e:	f7ff ffdf 	bl	8001820 <getDeviceID>
 8001862:	4603      	mov	r3, r0
 8001864:	2b37      	cmp	r3, #55	@ 0x37
 8001866:	d801      	bhi.n	800186c <setXAccelOffset+0x18>
 8001868:	2306      	movs	r3, #6
 800186a:	e000      	b.n	800186e <setXAccelOffset+0x1a>
 800186c:	2377      	movs	r3, #119	@ 0x77
 800186e:	73fb      	strb	r3, [r7, #15]
	writeWord(mpu.devAddr, SaveAddress, offset, NULL);
 8001870:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <setXAccelOffset+0x34>)
 8001872:	7818      	ldrb	r0, [r3, #0]
 8001874:	88fa      	ldrh	r2, [r7, #6]
 8001876:	7bf9      	ldrb	r1, [r7, #15]
 8001878:	2300      	movs	r3, #0
 800187a:	f7ff fd5b 	bl	8001334 <writeWord>
}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200002ac 	.word	0x200002ac

0800188c <setYAccelOffset>:
	uint8_t SaveAddress = ((getDeviceID() < 0x38) ? MPU6050_RA_YA_OFFS_H : 0x7A); // MPU6050,MPU9150 Vs MPU6500,MPU9250
	readBytes(mpu.devAddr, SaveAddress, 2, mpu.buffer, 0, NULL);
	return (((int16_t) mpu.buffer[0]) << 8) | mpu.buffer[1];
}
void setYAccelOffset(int16_t offset)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	80fb      	strh	r3, [r7, #6]
	uint8_t SaveAddress = ((getDeviceID() < 0x38) ? MPU6050_RA_YA_OFFS_H : 0x7A); // MPU6050,MPU9150 Vs MPU6500,MPU9250
 8001896:	f7ff ffc3 	bl	8001820 <getDeviceID>
 800189a:	4603      	mov	r3, r0
 800189c:	2b37      	cmp	r3, #55	@ 0x37
 800189e:	d801      	bhi.n	80018a4 <setYAccelOffset+0x18>
 80018a0:	2308      	movs	r3, #8
 80018a2:	e000      	b.n	80018a6 <setYAccelOffset+0x1a>
 80018a4:	237a      	movs	r3, #122	@ 0x7a
 80018a6:	73fb      	strb	r3, [r7, #15]
	writeWord(mpu.devAddr, SaveAddress, offset, NULL);
 80018a8:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <setYAccelOffset+0x34>)
 80018aa:	7818      	ldrb	r0, [r3, #0]
 80018ac:	88fa      	ldrh	r2, [r7, #6]
 80018ae:	7bf9      	ldrb	r1, [r7, #15]
 80018b0:	2300      	movs	r3, #0
 80018b2:	f7ff fd3f 	bl	8001334 <writeWord>
}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200002ac 	.word	0x200002ac

080018c4 <setZAccelOffset>:
	uint8_t SaveAddress = ((getDeviceID() < 0x38) ? MPU6050_RA_ZA_OFFS_H : 0x7D); // MPU6050,MPU9150 Vs MPU6500,MPU9250
	readBytes(mpu.devAddr, SaveAddress, 2, mpu.buffer, 0, NULL);
	return (((int16_t) mpu.buffer[0]) << 8) | mpu.buffer[1];
}
void setZAccelOffset(int16_t offset)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	80fb      	strh	r3, [r7, #6]
	uint8_t SaveAddress = ((getDeviceID() < 0x38) ? MPU6050_RA_ZA_OFFS_H : 0x7D); // MPU6050,MPU9150 Vs MPU6500,MPU9250
 80018ce:	f7ff ffa7 	bl	8001820 <getDeviceID>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b37      	cmp	r3, #55	@ 0x37
 80018d6:	d801      	bhi.n	80018dc <setZAccelOffset+0x18>
 80018d8:	230a      	movs	r3, #10
 80018da:	e000      	b.n	80018de <setZAccelOffset+0x1a>
 80018dc:	237d      	movs	r3, #125	@ 0x7d
 80018de:	73fb      	strb	r3, [r7, #15]
	writeWord(mpu.devAddr, SaveAddress, offset, NULL);
 80018e0:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <setZAccelOffset+0x34>)
 80018e2:	7818      	ldrb	r0, [r3, #0]
 80018e4:	88fa      	ldrh	r2, [r7, #6]
 80018e6:	7bf9      	ldrb	r1, [r7, #15]
 80018e8:	2300      	movs	r3, #0
 80018ea:	f7ff fd23 	bl	8001334 <writeWord>
}
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200002ac 	.word	0x200002ac

080018fc <setXGyroOffset>:
{
	readBytes(mpu.devAddr, MPU6050_RA_XG_OFFS_USRH, 2, mpu.buffer, 0, NULL);
	return (((int16_t) mpu.buffer[0]) << 8) | mpu.buffer[1];
}
void setXGyroOffset(int16_t offset)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	80fb      	strh	r3, [r7, #6]
	writeWord(mpu.devAddr, MPU6050_RA_XG_OFFS_USRH, offset, NULL);
 8001906:	4b05      	ldr	r3, [pc, #20]	@ (800191c <setXGyroOffset+0x20>)
 8001908:	7818      	ldrb	r0, [r3, #0]
 800190a:	88fa      	ldrh	r2, [r7, #6]
 800190c:	2300      	movs	r3, #0
 800190e:	2113      	movs	r1, #19
 8001910:	f7ff fd10 	bl	8001334 <writeWord>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200002ac 	.word	0x200002ac

08001920 <setYGyroOffset>:
{
	readBytes(mpu.devAddr, MPU6050_RA_YG_OFFS_USRH, 2, mpu.buffer, 0, NULL);
	return (((int16_t) mpu.buffer[0]) << 8) | mpu.buffer[1];
}
void setYGyroOffset(int16_t offset)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	80fb      	strh	r3, [r7, #6]
	writeWord(mpu.devAddr, MPU6050_RA_YG_OFFS_USRH, offset, NULL);
 800192a:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <setYGyroOffset+0x20>)
 800192c:	7818      	ldrb	r0, [r3, #0]
 800192e:	88fa      	ldrh	r2, [r7, #6]
 8001930:	2300      	movs	r3, #0
 8001932:	2115      	movs	r1, #21
 8001934:	f7ff fcfe 	bl	8001334 <writeWord>
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200002ac 	.word	0x200002ac

08001944 <setZGyroOffset>:
{
	readBytes(mpu.devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, mpu.buffer, 0, NULL);
	return (((int16_t) mpu.buffer[0]) << 8) | mpu.buffer[1];
}
void setZGyroOffset(int16_t offset)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	80fb      	strh	r3, [r7, #6]
	writeWord(mpu.devAddr, MPU6050_RA_ZG_OFFS_USRH, offset, NULL);
 800194e:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <setZGyroOffset+0x20>)
 8001950:	7818      	ldrb	r0, [r3, #0]
 8001952:	88fa      	ldrh	r2, [r7, #6]
 8001954:	2300      	movs	r3, #0
 8001956:	2117      	movs	r1, #23
 8001958:	f7ff fcec 	bl	8001334 <writeWord>
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200002ac 	.word	0x200002ac

08001968 <setDMPEnabled>:
	readBit(mpu.devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT,
			mpu.buffer, 0, NULL);
	return mpu.buffer[0];
}
void setDMPEnabled(bool enabled)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af02      	add	r7, sp, #8
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
	writeBit(mpu.devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT,
 8001972:	4b06      	ldr	r3, [pc, #24]	@ (800198c <setDMPEnabled+0x24>)
 8001974:	7818      	ldrb	r0, [r3, #0]
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2200      	movs	r2, #0
 800197a:	9200      	str	r2, [sp, #0]
 800197c:	2207      	movs	r2, #7
 800197e:	216a      	movs	r1, #106	@ 0x6a
 8001980:	f7ff fc2c 	bl	80011dc <writeBit>
			enabled, NULL);
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	200002ac 	.word	0x200002ac

08001990 <resetDMP>:
void resetDMP(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af02      	add	r7, sp, #8
	writeBit(mpu.devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT,
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <resetDMP+0x20>)
 8001998:	7818      	ldrb	r0, [r3, #0]
 800199a:	2300      	movs	r3, #0
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2301      	movs	r3, #1
 80019a0:	2203      	movs	r2, #3
 80019a2:	216a      	movs	r1, #106	@ 0x6a
 80019a4:	f7ff fc1a 	bl	80011dc <writeBit>
	true, NULL);
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200002ac 	.word	0x200002ac

080019b4 <setMemoryBank>:

// BANK_SEL register

void setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
 80019be:	460b      	mov	r3, r1
 80019c0:	71bb      	strb	r3, [r7, #6]
 80019c2:	4613      	mov	r3, r2
 80019c4:	717b      	strb	r3, [r7, #5]
	bank &= 0x1F;
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	71fb      	strb	r3, [r7, #7]
	if (userBank)
 80019ce:	797b      	ldrb	r3, [r7, #5]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <setMemoryBank+0x28>
		bank |= 0x20;
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	f043 0320 	orr.w	r3, r3, #32
 80019da:	71fb      	strb	r3, [r7, #7]
	if (prefetchEnabled)
 80019dc:	79bb      	ldrb	r3, [r7, #6]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <setMemoryBank+0x36>
		bank |= 0x40;
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019e8:	71fb      	strb	r3, [r7, #7]
	writeByte(mpu.devAddr, MPU6050_RA_BANK_SEL, bank, NULL);
 80019ea:	4b05      	ldr	r3, [pc, #20]	@ (8001a00 <setMemoryBank+0x4c>)
 80019ec:	7818      	ldrb	r0, [r3, #0]
 80019ee:	79fa      	ldrb	r2, [r7, #7]
 80019f0:	2300      	movs	r3, #0
 80019f2:	216d      	movs	r1, #109	@ 0x6d
 80019f4:	f7ff fc86 	bl	8001304 <writeByte>
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	200002ac 	.word	0x200002ac

08001a04 <setMemoryStartAddress>:

// MEM_START_ADDR register

void setMemoryStartAddress(uint8_t address)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
	writeByte(mpu.devAddr, MPU6050_RA_MEM_START_ADDR, address, NULL);
 8001a0e:	4b05      	ldr	r3, [pc, #20]	@ (8001a24 <setMemoryStartAddress+0x20>)
 8001a10:	7818      	ldrb	r0, [r3, #0]
 8001a12:	79fa      	ldrb	r2, [r7, #7]
 8001a14:	2300      	movs	r3, #0
 8001a16:	216e      	movs	r1, #110	@ 0x6e
 8001a18:	f7ff fc74 	bl	8001304 <writeByte>
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	200002ac 	.word	0x200002ac

08001a28 <writeMemoryBlock>:
		}
	}
}
bool writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank,
		uint8_t address, bool verify, bool useProgMem)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af02      	add	r7, sp, #8
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	4608      	mov	r0, r1
 8001a32:	4611      	mov	r1, r2
 8001a34:	461a      	mov	r2, r3
 8001a36:	4603      	mov	r3, r0
 8001a38:	807b      	strh	r3, [r7, #2]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	707b      	strb	r3, [r7, #1]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	703b      	strb	r3, [r7, #0]
	setMemoryBank(bank, false, false);
 8001a42:	787b      	ldrb	r3, [r7, #1]
 8001a44:	2200      	movs	r2, #0
 8001a46:	2100      	movs	r1, #0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ffb3 	bl	80019b4 <setMemoryBank>
	setMemoryStartAddress(address);
 8001a4e:	783b      	ldrb	r3, [r7, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ffd7 	bl	8001a04 <setMemoryStartAddress>
	uint8_t chunkSize;
	uint8_t *verifybuffer = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
	uint8_t *progbuffer = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
	uint16_t i;
	uint8_t j;
	if (verify)
 8001a5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d004      	beq.n	8001a70 <writeMemoryBlock+0x48>
		verifybuffer = (uint8_t*) malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8001a66:	2010      	movs	r0, #16
 8001a68:	f004 f9ca 	bl	8005e00 <malloc>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < dataSize;)
 8001a70:	2300      	movs	r3, #0
 8001a72:	817b      	strh	r3, [r7, #10]
 8001a74:	e0af      	b.n	8001bd6 <writeMemoryBlock+0x1ae>
	{
		// determine correct chunk size according to bank position and data size
		chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8001a76:	2310      	movs	r3, #16
 8001a78:	75fb      	strb	r3, [r7, #23]

		// make sure we don't go past the data size
		if (i + chunkSize > dataSize)
 8001a7a:	897a      	ldrh	r2, [r7, #10]
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	441a      	add	r2, r3
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	dd05      	ble.n	8001a92 <writeMemoryBlock+0x6a>
			chunkSize = dataSize - i;
 8001a86:	887b      	ldrh	r3, [r7, #2]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	897b      	ldrh	r3, [r7, #10]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	75fb      	strb	r3, [r7, #23]

		// make sure this chunk doesn't go past the bank boundary (256 bytes)
		if (chunkSize > 256 - address)
 8001a92:	7dfa      	ldrb	r2, [r7, #23]
 8001a94:	783b      	ldrb	r3, [r7, #0]
 8001a96:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	dd02      	ble.n	8001aa4 <writeMemoryBlock+0x7c>
			chunkSize = 256 - address;
 8001a9e:	783b      	ldrb	r3, [r7, #0]
 8001aa0:	425b      	negs	r3, r3
 8001aa2:	75fb      	strb	r3, [r7, #23]

		// write the chunk of data as specified
		progbuffer = (uint8_t*) data + i;
 8001aa4:	897b      	ldrh	r3, [r7, #10]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]

		writeBytes(mpu.devAddr, MPU6050_RA_MEM_R_W, chunkSize, progbuffer,
 8001aac:	4b56      	ldr	r3, [pc, #344]	@ (8001c08 <writeMemoryBlock+0x1e0>)
 8001aae:	7818      	ldrb	r0, [r3, #0]
 8001ab0:	7dfa      	ldrb	r2, [r7, #23]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	216f      	movs	r1, #111	@ 0x6f
 8001aba:	f7ff fc53 	bl	8001364 <writeBytes>
		NULL);

		// verify data if needed
		if (verify && verifybuffer)
 8001abe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d06a      	beq.n	8001b9c <writeMemoryBlock+0x174>
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d067      	beq.n	8001b9c <writeMemoryBlock+0x174>
		{
			setMemoryBank(bank, false, false);
 8001acc:	787b      	ldrb	r3, [r7, #1]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ff6e 	bl	80019b4 <setMemoryBank>
			setMemoryStartAddress(address);
 8001ad8:	783b      	ldrb	r3, [r7, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ff92 	bl	8001a04 <setMemoryStartAddress>
			readBytes(mpu.devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifybuffer,
 8001ae0:	4b49      	ldr	r3, [pc, #292]	@ (8001c08 <writeMemoryBlock+0x1e0>)
 8001ae2:	7818      	ldrb	r0, [r3, #0]
 8001ae4:	7dfa      	ldrb	r2, [r7, #23]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	2300      	movs	r3, #0
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	216f      	movs	r1, #111	@ 0x6f
 8001af2:	f7ff faad 	bl	8001050 <readBytes>
					0, NULL);
			if (memcmp(progbuffer, verifybuffer, chunkSize) != 0)
 8001af6:	7dfb      	ldrb	r3, [r7, #23]
 8001af8:	461a      	mov	r2, r3
 8001afa:	6939      	ldr	r1, [r7, #16]
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f005 f8a7 	bl	8006c50 <memcmp>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d049      	beq.n	8001b9c <writeMemoryBlock+0x174>
			{
				printf(
 8001b08:	787b      	ldrb	r3, [r7, #1]
 8001b0a:	783a      	ldrb	r2, [r7, #0]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	483f      	ldr	r0, [pc, #252]	@ (8001c0c <writeMemoryBlock+0x1e4>)
 8001b10:	f004 ff4e 	bl	80069b0 <iprintf>
						"Block write verification error, bank: %u, address %u\n\r",
						bank, address);
				printf("!\nExpected:");
 8001b14:	483e      	ldr	r0, [pc, #248]	@ (8001c10 <writeMemoryBlock+0x1e8>)
 8001b16:	f004 ff4b 	bl	80069b0 <iprintf>
				for (j = 0; j < chunkSize; j++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	727b      	strb	r3, [r7, #9]
 8001b1e:	e00a      	b.n	8001b36 <writeMemoryBlock+0x10e>
				{
					printf("0x%X", progbuffer[j]);
 8001b20:	7a7b      	ldrb	r3, [r7, #9]
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	483a      	ldr	r0, [pc, #232]	@ (8001c14 <writeMemoryBlock+0x1ec>)
 8001b2c:	f004 ff40 	bl	80069b0 <iprintf>
				for (j = 0; j < chunkSize; j++)
 8001b30:	7a7b      	ldrb	r3, [r7, #9]
 8001b32:	3301      	adds	r3, #1
 8001b34:	727b      	strb	r3, [r7, #9]
 8001b36:	7a7a      	ldrb	r2, [r7, #9]
 8001b38:	7dfb      	ldrb	r3, [r7, #23]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d3f0      	bcc.n	8001b20 <writeMemoryBlock+0xf8>
				}
				printf("\nReceived:");
 8001b3e:	4836      	ldr	r0, [pc, #216]	@ (8001c18 <writeMemoryBlock+0x1f0>)
 8001b40:	f004 ff36 	bl	80069b0 <iprintf>
				for (uint8_t j = 0; j < chunkSize; j++)
 8001b44:	2300      	movs	r3, #0
 8001b46:	723b      	strb	r3, [r7, #8]
 8001b48:	e01c      	b.n	8001b84 <writeMemoryBlock+0x15c>
				{
					printf(" 0x");
 8001b4a:	4834      	ldr	r0, [pc, #208]	@ (8001c1c <writeMemoryBlock+0x1f4>)
 8001b4c:	f004 ff30 	bl	80069b0 <iprintf>
					if (verifybuffer[i + j] < 16)
 8001b50:	897a      	ldrh	r2, [r7, #10]
 8001b52:	7a3b      	ldrb	r3, [r7, #8]
 8001b54:	4413      	add	r3, r2
 8001b56:	461a      	mov	r2, r3
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b0f      	cmp	r3, #15
 8001b60:	d802      	bhi.n	8001b68 <writeMemoryBlock+0x140>
						printf("0");
 8001b62:	2030      	movs	r0, #48	@ 0x30
 8001b64:	f004 ff36 	bl	80069d4 <putchar>
					printf("%X", verifybuffer[i + j]);
 8001b68:	897a      	ldrh	r2, [r7, #10]
 8001b6a:	7a3b      	ldrb	r3, [r7, #8]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	461a      	mov	r2, r3
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4413      	add	r3, r2
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	4619      	mov	r1, r3
 8001b78:	4829      	ldr	r0, [pc, #164]	@ (8001c20 <writeMemoryBlock+0x1f8>)
 8001b7a:	f004 ff19 	bl	80069b0 <iprintf>
				for (uint8_t j = 0; j < chunkSize; j++)
 8001b7e:	7a3b      	ldrb	r3, [r7, #8]
 8001b80:	3301      	adds	r3, #1
 8001b82:	723b      	strb	r3, [r7, #8]
 8001b84:	7a3a      	ldrb	r2, [r7, #8]
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d3de      	bcc.n	8001b4a <writeMemoryBlock+0x122>
				}
				printf("\n");
 8001b8c:	200a      	movs	r0, #10
 8001b8e:	f004 ff21 	bl	80069d4 <putchar>
				free(verifybuffer);
 8001b92:	6938      	ldr	r0, [r7, #16]
 8001b94:	f004 f93c 	bl	8005e10 <free>
				return false;    // uh oh.
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e030      	b.n	8001bfe <writeMemoryBlock+0x1d6>
			}
		}

		// increase byte index by [chunkSize]
		i += chunkSize;
 8001b9c:	7dfb      	ldrb	r3, [r7, #23]
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	897b      	ldrh	r3, [r7, #10]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	817b      	strh	r3, [r7, #10]

		// uint8_t automatically wraps to 0 at 256
		address += chunkSize;
 8001ba6:	783a      	ldrb	r2, [r7, #0]
 8001ba8:	7dfb      	ldrb	r3, [r7, #23]
 8001baa:	4413      	add	r3, r2
 8001bac:	703b      	strb	r3, [r7, #0]

		// if we aren't done, update bank (if necessary) and address
		if (i < dataSize)
 8001bae:	897a      	ldrh	r2, [r7, #10]
 8001bb0:	887b      	ldrh	r3, [r7, #2]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d20f      	bcs.n	8001bd6 <writeMemoryBlock+0x1ae>
		{
			if (address == 0)
 8001bb6:	783b      	ldrb	r3, [r7, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d102      	bne.n	8001bc2 <writeMemoryBlock+0x19a>
				bank++;
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	707b      	strb	r3, [r7, #1]
			setMemoryBank(bank, false, false);
 8001bc2:	787b      	ldrb	r3, [r7, #1]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fef3 	bl	80019b4 <setMemoryBank>
			setMemoryStartAddress(address);
 8001bce:	783b      	ldrb	r3, [r7, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff17 	bl	8001a04 <setMemoryStartAddress>
	for (i = 0; i < dataSize;)
 8001bd6:	897a      	ldrh	r2, [r7, #10]
 8001bd8:	887b      	ldrh	r3, [r7, #2]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	f4ff af4b 	bcc.w	8001a76 <writeMemoryBlock+0x4e>
		}
	}
	if (verify)
 8001be0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <writeMemoryBlock+0x1c6>
		free(verifybuffer);
 8001be8:	6938      	ldr	r0, [r7, #16]
 8001bea:	f004 f911 	bl	8005e10 <free>
	if (useProgMem)
 8001bee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <writeMemoryBlock+0x1d4>
		free(progbuffer);
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f004 f90a 	bl	8005e10 <free>
	return true;
 8001bfc:	2301      	movs	r3, #1
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200002ac 	.word	0x200002ac
 8001c0c:	080093b0 	.word	0x080093b0
 8001c10:	080093e8 	.word	0x080093e8
 8001c14:	080093f4 	.word	0x080093f4
 8001c18:	080093fc 	.word	0x080093fc
 8001c1c:	08009408 	.word	0x08009408
 8001c20:	0800940c 	.word	0x0800940c

08001c24 <writeProgMemoryBlock>:
bool writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank,
		uint8_t address, bool verify)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af02      	add	r7, sp, #8
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	4608      	mov	r0, r1
 8001c2e:	4611      	mov	r1, r2
 8001c30:	461a      	mov	r2, r3
 8001c32:	4603      	mov	r3, r0
 8001c34:	807b      	strh	r3, [r7, #2]
 8001c36:	460b      	mov	r3, r1
 8001c38:	707b      	strb	r3, [r7, #1]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	703b      	strb	r3, [r7, #0]
	return writeMemoryBlock(data, dataSize, bank, address, verify, true);
 8001c3e:	7838      	ldrb	r0, [r7, #0]
 8001c40:	787a      	ldrb	r2, [r7, #1]
 8001c42:	8879      	ldrh	r1, [r7, #2]
 8001c44:	2301      	movs	r3, #1
 8001c46:	9301      	str	r3, [sp, #4]
 8001c48:	7c3b      	ldrb	r3, [r7, #16]
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff feea 	bl	8001a28 <writeMemoryBlock>
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <CalibrateGyro>:
//***************************************************************************************
/**
 @brief      Fully calibrate Gyro from ZERO in about 6-7 Loops 600-700 readings
 */
void CalibrateGyro(uint8_t Loops)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b08b      	sub	sp, #44	@ 0x2c
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
	double kP = 0.3;
 8001c6a:	a32e      	add	r3, pc, #184	@ (adr r3, 8001d24 <CalibrateGyro+0xc4>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double kI = 90;
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	4b29      	ldr	r3, [pc, #164]	@ (8001d20 <CalibrateGyro+0xc0>)
 8001c7a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	float x;
	x = (100 - map(Loops, 1, 5, 20, 0)) * .01;
 8001c7e:	79f8      	ldrb	r0, [r7, #7]
 8001c80:	2300      	movs	r3, #0
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2314      	movs	r3, #20
 8001c86:	2205      	movs	r2, #5
 8001c88:	2101      	movs	r1, #1
 8001c8a:	f7ff fc2f 	bl	80014ec <map>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc65 	bl	8000564 <__aeabi_i2d>
 8001c9a:	a31f      	add	r3, pc, #124	@ (adr r3, 8001d18 <CalibrateGyro+0xb8>)
 8001c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca0:	f7fe fcca 	bl	8000638 <__aeabi_dmul>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	f7fe ff9c 	bl	8000be8 <__aeabi_d2f>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60fb      	str	r3, [r7, #12]
	kP *= x;
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f7fe fc67 	bl	8000588 <__aeabi_f2d>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cc2:	f7fe fcb9 	bl	8000638 <__aeabi_dmul>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	e9c7 2306 	strd	r2, r3, [r7, #24]
	kI *= x;
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f7fe fc5a 	bl	8000588 <__aeabi_f2d>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cdc:	f7fe fcac 	bl	8000638 <__aeabi_dmul>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	PID(0x43, kP, kI, Loops);
 8001ce8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cec:	f7fe ff7c 	bl	8000be8 <__aeabi_d2f>
 8001cf0:	4604      	mov	r4, r0
 8001cf2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cf6:	f7fe ff77 	bl	8000be8 <__aeabi_d2f>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	ee00 2a90 	vmov	s1, r2
 8001d04:	ee00 4a10 	vmov	s0, r4
 8001d08:	2043      	movs	r0, #67	@ 0x43
 8001d0a:	f000 f861 	bl	8001dd0 <PID>
}
 8001d0e:	bf00      	nop
 8001d10:	3724      	adds	r7, #36	@ 0x24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd90      	pop	{r4, r7, pc}
 8001d16:	bf00      	nop
 8001d18:	47ae147b 	.word	0x47ae147b
 8001d1c:	3f847ae1 	.word	0x3f847ae1
 8001d20:	40568000 	.word	0x40568000
 8001d24:	33333333 	.word	0x33333333
 8001d28:	3fd33333 	.word	0x3fd33333
 8001d2c:	00000000 	.word	0x00000000

08001d30 <CalibrateAccel>:

/**
 @brief      Fully calibrate Accel from ZERO in about 6-7 Loops 600-700 readings
 */
void CalibrateAccel(uint8_t Loops)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af02      	add	r7, sp, #8
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
	float kP = 0.3;
 8001d3a:	4b21      	ldr	r3, [pc, #132]	@ (8001dc0 <CalibrateAccel+0x90>)
 8001d3c:	617b      	str	r3, [r7, #20]
	float kI = 20;
 8001d3e:	4b21      	ldr	r3, [pc, #132]	@ (8001dc4 <CalibrateAccel+0x94>)
 8001d40:	613b      	str	r3, [r7, #16]
	float x;
	x = (100 - map(Loops, 1, 5, 20, 0)) * .01;
 8001d42:	79f8      	ldrb	r0, [r7, #7]
 8001d44:	2300      	movs	r3, #0
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	2314      	movs	r3, #20
 8001d4a:	2205      	movs	r2, #5
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	f7ff fbcd 	bl	80014ec <map>
 8001d52:	4603      	mov	r3, r0
 8001d54:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fc03 	bl	8000564 <__aeabi_i2d>
 8001d5e:	a316      	add	r3, pc, #88	@ (adr r3, 8001db8 <CalibrateAccel+0x88>)
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	f7fe fc68 	bl	8000638 <__aeabi_dmul>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f7fe ff3a 	bl	8000be8 <__aeabi_d2f>
 8001d74:	4603      	mov	r3, r0
 8001d76:	60fb      	str	r3, [r7, #12]
	kP *= x;
 8001d78:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d84:	edc7 7a05 	vstr	s15, [r7, #20]
	kP = 0.31;
 8001d88:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc8 <CalibrateAccel+0x98>)
 8001d8a:	617b      	str	r3, [r7, #20]
	kI *= x;
 8001d8c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d90:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d98:	edc7 7a04 	vstr	s15, [r7, #16]
//	printf("x: %f\n\r", x);
//	printf("kp: %f\n\r", kP);
//	printf("kI: %f\n\r", kI);

	PID(0x3B, kP, kI, Loops);
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	edd7 0a04 	vldr	s1, [r7, #16]
 8001da4:	ed97 0a05 	vldr	s0, [r7, #20]
 8001da8:	203b      	movs	r0, #59	@ 0x3b
 8001daa:	f000 f811 	bl	8001dd0 <PID>
}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	47ae147b 	.word	0x47ae147b
 8001dbc:	3f847ae1 	.word	0x3f847ae1
 8001dc0:	3e99999a 	.word	0x3e99999a
 8001dc4:	41a00000 	.word	0x41a00000
 8001dc8:	3e9eb852 	.word	0x3e9eb852
 8001dcc:	00000000 	.word	0x00000000

08001dd0 <PID>:

void PID(uint8_t ReadAddress, float kP, float kI, uint8_t Loops)
{
 8001dd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dd4:	b098      	sub	sp, #96	@ 0x60
 8001dd6:	af02      	add	r7, sp, #8
 8001dd8:	4603      	mov	r3, r0
 8001dda:	ed87 0a02 	vstr	s0, [r7, #8]
 8001dde:	edc7 0a01 	vstr	s1, [r7, #4]
 8001de2:	460a      	mov	r2, r1
 8001de4:	73fb      	strb	r3, [r7, #15]
 8001de6:	4613      	mov	r3, r2
 8001de8:	73bb      	strb	r3, [r7, #14]
	uint8_t SaveAddress =
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	2b3b      	cmp	r3, #59	@ 0x3b
 8001dee:	d108      	bne.n	8001e02 <PID+0x32>
			(ReadAddress == 0x3B) ?
					((getDeviceID() < 0x38) ? 0x06 : 0x77) : 0x13;
 8001df0:	f7ff fd16 	bl	8001820 <getDeviceID>
 8001df4:	4603      	mov	r3, r0
	uint8_t SaveAddress =
 8001df6:	2b37      	cmp	r3, #55	@ 0x37
 8001df8:	d801      	bhi.n	8001dfe <PID+0x2e>
 8001dfa:	2306      	movs	r3, #6
 8001dfc:	e002      	b.n	8001e04 <PID+0x34>
 8001dfe:	2377      	movs	r3, #119	@ 0x77
 8001e00:	e000      	b.n	8001e04 <PID+0x34>
 8001e02:	2313      	movs	r3, #19
 8001e04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int16_t Data;
	float Reading;
	int16_t BitZero[3];
	uint8_t shift = (SaveAddress == 0x77) ? 3 : 2;
 8001e08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e0c:	2b77      	cmp	r3, #119	@ 0x77
 8001e0e:	d101      	bne.n	8001e14 <PID+0x44>
 8001e10:	2303      	movs	r3, #3
 8001e12:	e000      	b.n	8001e16 <PID+0x46>
 8001e14:	2302      	movs	r3, #2
 8001e16:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	float Error, PTerm, ITerm[3];
	int16_t eSample;
	uint32_t eSum;
	uint16_t gravity = 8192;
 8001e1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e1e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	if (ReadAddress == 0x3B)
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	2b3b      	cmp	r3, #59	@ 0x3b
 8001e26:	d108      	bne.n	8001e3a <PID+0x6a>
		gravity = 16384 >> getFullScaleAccelRange();
 8001e28:	f7ff fbba 	bl	80015a0 <getFullScaleAccelRange>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e34:	4113      	asrs	r3, r2
 8001e36:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
//	printf("gravity: %u\n\r", gravity);
//	printf("SaveAddress: %u\n\r", SaveAddress);

	printf(">");
 8001e3a:	203e      	movs	r0, #62	@ 0x3e
 8001e3c:	f004 fdca 	bl	80069d4 <putchar>
	for (int i = 0; i < 3; i++)
 8001e40:	2300      	movs	r3, #0
 8001e42:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e44:	e04a      	b.n	8001edc <PID+0x10c>
	{
		readWords(mpu.devAddr, SaveAddress + (i * shift), 1, (uint16_t*) &Data,
 8001e46:	4bc2      	ldr	r3, [pc, #776]	@ (8002150 <PID+0x380>)
 8001e48:	7818      	ldrb	r0, [r3, #0]
 8001e4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001e52:	fb12 f303 	smulbb	r3, r2, r3
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b2d9      	uxtb	r1, r3
 8001e60:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8001e64:	2200      	movs	r2, #0
 8001e66:	9201      	str	r2, [sp, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	9200      	str	r2, [sp, #0]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f7ff f929 	bl	80010c4 <readWords>
				0, NULL);    // reads 1 or more 16 bit integers (Word)
//		HAL_Delay(1);

		Reading = Data;
 8001e72:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e7e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

		if (SaveAddress != 0x13)
 8001e82:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e86:	2b13      	cmp	r3, #19
 8001e88:	d018      	beq.n	8001ebc <PID+0xec>
		{
			BitZero[i] = Data & 1; // Capture Bit Zero to properly handle Accelerometer calibration
 8001e8a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	b21a      	sxth	r2, r3
 8001e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	3358      	adds	r3, #88	@ 0x58
 8001e9a:	443b      	add	r3, r7
 8001e9c:	f823 2c38 	strh.w	r2, [r3, #-56]
			ITerm[i] = ((float) Reading) * 8;
 8001ea0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001ea4:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	3358      	adds	r3, #88	@ 0x58
 8001eb2:	443b      	add	r3, r7
 8001eb4:	3b44      	subs	r3, #68	@ 0x44
 8001eb6:	edc3 7a00 	vstr	s15, [r3]
 8001eba:	e00c      	b.n	8001ed6 <PID+0x106>
		}
		else
		{
			ITerm[i] = Reading * 4;
 8001ebc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001ec0:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001ec4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	3358      	adds	r3, #88	@ 0x58
 8001ece:	443b      	add	r3, r7
 8001ed0:	3b44      	subs	r3, #68	@ 0x44
 8001ed2:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; i++)
 8001ed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ed8:	3301      	adds	r3, #1
 8001eda:	647b      	str	r3, [r7, #68]	@ 0x44
 8001edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	ddb1      	ble.n	8001e46 <PID+0x76>
	}
//	for (int op = 0; op < 3; op++){
//		printf("BitZero: %u\n\r", BitZero[op]);
//		printf("ITerm: %f\n\r", ITerm[op]);
//	}
	for (int L = 0; L < Loops; L++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ee6:	e291      	b.n	800240c <PID+0x63c>
	{
		eSample = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
		for (int c = 0; c < 100; c++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ef2:	e1a7      	b.n	8002244 <PID+0x474>
		{
			eSum = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
			for (int i = 0; i < 3; i++)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001efc:	e164      	b.n	80021c8 <PID+0x3f8>
			{
//				HAL_Delay(1000);
				readWords(mpu.devAddr, ReadAddress + (i * 2), 1,
 8001efe:	4b94      	ldr	r3, [pc, #592]	@ (8002150 <PID+0x380>)
 8001f00:	7818      	ldrb	r0, [r3, #0]
 8001f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	b2d9      	uxtb	r1, r3
 8001f10:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8001f14:	2200      	movs	r2, #0
 8001f16:	9201      	str	r2, [sp, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	9200      	str	r2, [sp, #0]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f7ff f8d1 	bl	80010c4 <readWords>
						(uint16_t*) &Data, 0, NULL);
//				HAL_Delay(1);

				Reading = Data;
 8001f22:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001f26:	ee07 3a90 	vmov	s15, r3
 8001f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f2e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
//				printf("Reading: %f\n\r", Reading);
//				HAL_Delay(10000);

				if ((ReadAddress == 0x3B) && (i == 2))
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	2b3b      	cmp	r3, #59	@ 0x3b
 8001f36:	d10e      	bne.n	8001f56 <PID+0x186>
 8001f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d10b      	bne.n	8001f56 <PID+0x186>
					Reading -= gravity;    // remove Gravity
 8001f3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f42:	ee07 3a90 	vmov	s15, r3
 8001f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f4a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f52:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
				Error = -Reading;
 8001f56:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001f5a:	eef1 7a67 	vneg.f32	s15, s15
 8001f5e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
				eSum += abs_int(Reading);
 8001f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f64:	ee07 3a90 	vmov	s15, r3
 8001f68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f6c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001f70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f78:	dd02      	ble.n	8001f80 <PID+0x1b0>
 8001f7a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001f7e:	e003      	b.n	8001f88 <PID+0x1b8>
 8001f80:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001f84:	eef1 7a67 	vneg.f32	s15, s15
 8001f88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f90:	ee17 3a90 	vmov	r3, s15
 8001f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
				PTerm = kP * Error;
 8001f96:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f9a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
				ITerm[i] += (Error * 0.001) * kI; // Integral term 1000 Calculations a second = 0.001
 8001fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	3358      	adds	r3, #88	@ 0x58
 8001fac:	443b      	add	r3, r7
 8001fae:	3b44      	subs	r3, #68	@ 0x44
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fae8 	bl	8000588 <__aeabi_f2d>
 8001fb8:	4604      	mov	r4, r0
 8001fba:	460d      	mov	r5, r1
 8001fbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001fbe:	f7fe fae3 	bl	8000588 <__aeabi_f2d>
 8001fc2:	a361      	add	r3, pc, #388	@ (adr r3, 8002148 <PID+0x378>)
 8001fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc8:	f7fe fb36 	bl	8000638 <__aeabi_dmul>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4690      	mov	r8, r2
 8001fd2:	4699      	mov	r9, r3
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7fe fad7 	bl	8000588 <__aeabi_f2d>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4640      	mov	r0, r8
 8001fe0:	4649      	mov	r1, r9
 8001fe2:	f7fe fb29 	bl	8000638 <__aeabi_dmul>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4620      	mov	r0, r4
 8001fec:	4629      	mov	r1, r5
 8001fee:	f7fe f96d 	bl	80002cc <__adddf3>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f7fe fdf5 	bl	8000be8 <__aeabi_d2f>
 8001ffe:	4602      	mov	r2, r0
 8002000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	3358      	adds	r3, #88	@ 0x58
 8002006:	443b      	add	r3, r7
 8002008:	3b44      	subs	r3, #68	@ 0x44
 800200a:	601a      	str	r2, [r3, #0]
				if (SaveAddress != 0x13)
 800200c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002010:	2b13      	cmp	r3, #19
 8002012:	d064      	beq.n	80020de <PID+0x30e>
				{
					Data = round_long((PTerm + ITerm[i]) / 8); // Compute PID Output
 8002014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	3358      	adds	r3, #88	@ 0x58
 800201a:	443b      	add	r3, r7
 800201c:	3b44      	subs	r3, #68	@ 0x44
 800201e:	ed93 7a00 	vldr	s14, [r3]
 8002022:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002026:	ee37 7a27 	vadd.f32	s14, s14, s15
 800202a:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800202e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002032:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203a:	db20      	blt.n	800207e <PID+0x2ae>
 800203c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	3358      	adds	r3, #88	@ 0x58
 8002042:	443b      	add	r3, r7
 8002044:	3b44      	subs	r3, #68	@ 0x44
 8002046:	ed93 7a00 	vldr	s14, [r3]
 800204a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800204e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002052:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8002056:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800205a:	ee16 0a90 	vmov	r0, s13
 800205e:	f7fe fa93 	bl	8000588 <__aeabi_f2d>
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	4b3b      	ldr	r3, [pc, #236]	@ (8002154 <PID+0x384>)
 8002068:	f7fe f930 	bl	80002cc <__adddf3>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4610      	mov	r0, r2
 8002072:	4619      	mov	r1, r3
 8002074:	f7fe fd90 	bl	8000b98 <__aeabi_d2iz>
 8002078:	4603      	mov	r3, r0
 800207a:	b21b      	sxth	r3, r3
 800207c:	e01f      	b.n	80020be <PID+0x2ee>
 800207e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	3358      	adds	r3, #88	@ 0x58
 8002084:	443b      	add	r3, r7
 8002086:	3b44      	subs	r3, #68	@ 0x44
 8002088:	ed93 7a00 	vldr	s14, [r3]
 800208c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002094:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8002098:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800209c:	ee16 0a90 	vmov	r0, s13
 80020a0:	f7fe fa72 	bl	8000588 <__aeabi_f2d>
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002154 <PID+0x384>)
 80020aa:	f7fe f90d 	bl	80002c8 <__aeabi_dsub>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7fe fd6f 	bl	8000b98 <__aeabi_d2iz>
 80020ba:	4603      	mov	r3, r0
 80020bc:	b21b      	sxth	r3, r3
 80020be:	84fb      	strh	r3, [r7, #38]	@ 0x26
					Data = ((Data) & 0xFFFE) | BitZero[i]; // Insert Bit0 Saved at beginning
 80020c0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80020c4:	f023 0301 	bic.w	r3, r3, #1
 80020c8:	b21a      	sxth	r2, r3
 80020ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	3358      	adds	r3, #88	@ 0x58
 80020d0:	443b      	add	r3, r7
 80020d2:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	b21b      	sxth	r3, r3
 80020da:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80020dc:	e05d      	b.n	800219a <PID+0x3ca>
				}
				else
					Data = round_long((PTerm + ITerm[i]) / 4); // Compute PID Output
 80020de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	3358      	adds	r3, #88	@ 0x58
 80020e4:	443b      	add	r3, r7
 80020e6:	3b44      	subs	r3, #68	@ 0x44
 80020e8:	ed93 7a00 	vldr	s14, [r3]
 80020ec:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80020f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020f4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80020f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002104:	db28      	blt.n	8002158 <PID+0x388>
 8002106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	3358      	adds	r3, #88	@ 0x58
 800210c:	443b      	add	r3, r7
 800210e:	3b44      	subs	r3, #68	@ 0x44
 8002110:	ed93 7a00 	vldr	s14, [r3]
 8002114:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800211c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002120:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002124:	ee16 0a90 	vmov	r0, s13
 8002128:	f7fe fa2e 	bl	8000588 <__aeabi_f2d>
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <PID+0x384>)
 8002132:	f7fe f8cb 	bl	80002cc <__adddf3>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	f7fe fd2b 	bl	8000b98 <__aeabi_d2iz>
 8002142:	4603      	mov	r3, r0
 8002144:	b21b      	sxth	r3, r3
 8002146:	e027      	b.n	8002198 <PID+0x3c8>
 8002148:	d2f1a9fc 	.word	0xd2f1a9fc
 800214c:	3f50624d 	.word	0x3f50624d
 8002150:	200002ac 	.word	0x200002ac
 8002154:	3fe00000 	.word	0x3fe00000
 8002158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	3358      	adds	r3, #88	@ 0x58
 800215e:	443b      	add	r3, r7
 8002160:	3b44      	subs	r3, #68	@ 0x44
 8002162:	ed93 7a00 	vldr	s14, [r3]
 8002166:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800216a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800216e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002172:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002176:	ee16 0a90 	vmov	r0, s13
 800217a:	f7fe fa05 	bl	8000588 <__aeabi_f2d>
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	4bad      	ldr	r3, [pc, #692]	@ (8002438 <PID+0x668>)
 8002184:	f7fe f8a0 	bl	80002c8 <__aeabi_dsub>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	f7fe fd02 	bl	8000b98 <__aeabi_d2iz>
 8002194:	4603      	mov	r3, r0
 8002196:	b21b      	sxth	r3, r3
 8002198:	84fb      	strh	r3, [r7, #38]	@ 0x26
//				HAL_Delay(1000);
				writeWords(mpu.devAddr, SaveAddress + (i * shift), 1,
 800219a:	4ba8      	ldr	r3, [pc, #672]	@ (800243c <PID+0x66c>)
 800219c:	7818      	ldrb	r0, [r3, #0]
 800219e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80021a6:	fb12 f303 	smulbb	r3, r2, r3
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80021b0:	4413      	add	r3, r2
 80021b2:	b2d9      	uxtb	r1, r3
 80021b4:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 80021b8:	2200      	movs	r2, #0
 80021ba:	9200      	str	r2, [sp, #0]
 80021bc:	2201      	movs	r2, #1
 80021be:	f7ff f8fd 	bl	80013bc <writeWords>
			for (int i = 0; i < 3; i++)
 80021c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021c4:	3301      	adds	r3, #1
 80021c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80021c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	f77f ae97 	ble.w	8001efe <PID+0x12e>
//				printf("Wrote words: %u\n", Data);
//				HAL_Delay(10000);

//				HAL_Delay(1);
			}
			if ((c == 99) && eSum > 1000)
 80021d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021d2:	2b63      	cmp	r3, #99	@ 0x63
 80021d4:	d105      	bne.n	80021e2 <PID+0x412>
 80021d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021dc:	d901      	bls.n	80021e2 <PID+0x412>
			{
//				printf("esum %ld \n\r", eSum); // Error is still to great to continue
				c = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
			}
			if ((eSum * ((ReadAddress == 0x3B) ? 0.05 : 1)) < 5)
 80021e2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80021e4:	f7fe f9ae 	bl	8000544 <__aeabi_ui2d>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	7bf9      	ldrb	r1, [r7, #15]
 80021ee:	293b      	cmp	r1, #59	@ 0x3b
 80021f0:	d103      	bne.n	80021fa <PID+0x42a>
 80021f2:	a18f      	add	r1, pc, #572	@ (adr r1, 8002430 <PID+0x660>)
 80021f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021f8:	e002      	b.n	8002200 <PID+0x430>
 80021fa:	f04f 0000 	mov.w	r0, #0
 80021fe:	4990      	ldr	r1, [pc, #576]	@ (8002440 <PID+0x670>)
 8002200:	f7fe fa1a 	bl	8000638 <__aeabi_dmul>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4610      	mov	r0, r2
 800220a:	4619      	mov	r1, r3
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	4b8c      	ldr	r3, [pc, #560]	@ (8002444 <PID+0x674>)
 8002212:	f7fe fc83 	bl	8000b1c <__aeabi_dcmplt>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d006      	beq.n	800222a <PID+0x45a>
				eSample++;    // Successfully found offsets prepare to  advance
 800221c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 8002220:	b29b      	uxth	r3, r3
 8002222:	3301      	adds	r3, #1
 8002224:	b29b      	uxth	r3, r3
 8002226:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
			if ((eSum < 100) && (c > 10) && (eSample >= 10))
 800222a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800222c:	2b63      	cmp	r3, #99	@ 0x63
 800222e:	d806      	bhi.n	800223e <PID+0x46e>
 8002230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002232:	2b0a      	cmp	r3, #10
 8002234:	dd03      	ble.n	800223e <PID+0x46e>
 8002236:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 800223a:	2b09      	cmp	r3, #9
 800223c:	dc07      	bgt.n	800224e <PID+0x47e>
		for (int c = 0; c < 100; c++)
 800223e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002240:	3301      	adds	r3, #1
 8002242:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002246:	2b63      	cmp	r3, #99	@ 0x63
 8002248:	f77f ae54 	ble.w	8001ef4 <PID+0x124>
 800224c:	e000      	b.n	8002250 <PID+0x480>
				break;        // Advance to next Loop
 800224e:	bf00      	nop
		}
		printf(".");
 8002250:	202e      	movs	r0, #46	@ 0x2e
 8002252:	f004 fbbf 	bl	80069d4 <putchar>
		kP *= .75;
 8002256:	edd7 7a02 	vldr	s15, [r7, #8]
 800225a:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 800225e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002262:	edc7 7a02 	vstr	s15, [r7, #8]
		kI *= .75;
 8002266:	edd7 7a01 	vldr	s15, [r7, #4]
 800226a:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 800226e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002272:	edc7 7a01 	vstr	s15, [r7, #4]
		for (int i = 0; i < 3; i++)
 8002276:	2300      	movs	r3, #0
 8002278:	637b      	str	r3, [r7, #52]	@ 0x34
 800227a:	e0c0      	b.n	80023fe <PID+0x62e>
		{
			if (SaveAddress != 0x13)
 800227c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002280:	2b13      	cmp	r3, #19
 8002282:	d058      	beq.n	8002336 <PID+0x566>
			{
				Data = round_long((ITerm[i]) / 8);        // Compute PID Output
 8002284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	3358      	adds	r3, #88	@ 0x58
 800228a:	443b      	add	r3, r7
 800228c:	3b44      	subs	r3, #68	@ 0x44
 800228e:	ed93 7a00 	vldr	s14, [r3]
 8002292:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8002296:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800229a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a2:	db1c      	blt.n	80022de <PID+0x50e>
 80022a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	3358      	adds	r3, #88	@ 0x58
 80022aa:	443b      	add	r3, r7
 80022ac:	3b44      	subs	r3, #68	@ 0x44
 80022ae:	edd3 7a00 	vldr	s15, [r3]
 80022b2:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80022b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022ba:	ee16 0a90 	vmov	r0, s13
 80022be:	f7fe f963 	bl	8000588 <__aeabi_f2d>
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002438 <PID+0x668>)
 80022c8:	f7fe f800 	bl	80002cc <__adddf3>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	f7fe fc60 	bl	8000b98 <__aeabi_d2iz>
 80022d8:	4603      	mov	r3, r0
 80022da:	b21b      	sxth	r3, r3
 80022dc:	e01b      	b.n	8002316 <PID+0x546>
 80022de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	3358      	adds	r3, #88	@ 0x58
 80022e4:	443b      	add	r3, r7
 80022e6:	3b44      	subs	r3, #68	@ 0x44
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80022f0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022f4:	ee16 0a90 	vmov	r0, s13
 80022f8:	f7fe f946 	bl	8000588 <__aeabi_f2d>
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	4b4d      	ldr	r3, [pc, #308]	@ (8002438 <PID+0x668>)
 8002302:	f7fd ffe1 	bl	80002c8 <__aeabi_dsub>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4610      	mov	r0, r2
 800230c:	4619      	mov	r1, r3
 800230e:	f7fe fc43 	bl	8000b98 <__aeabi_d2iz>
 8002312:	4603      	mov	r3, r0
 8002314:	b21b      	sxth	r3, r3
 8002316:	84fb      	strh	r3, [r7, #38]	@ 0x26
				Data = ((Data) & 0xFFFE) | BitZero[i]; // Insert Bit0 Saved at beginning
 8002318:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	b21a      	sxth	r2, r3
 8002322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	3358      	adds	r3, #88	@ 0x58
 8002328:	443b      	add	r3, r7
 800232a:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 800232e:	4313      	orrs	r3, r2
 8002330:	b21b      	sxth	r3, r3
 8002332:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002334:	e049      	b.n	80023ca <PID+0x5fa>
			}
			else
				Data = round_long((ITerm[i]) / 4);
 8002336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	3358      	adds	r3, #88	@ 0x58
 800233c:	443b      	add	r3, r7
 800233e:	3b44      	subs	r3, #68	@ 0x44
 8002340:	ed93 7a00 	vldr	s14, [r3]
 8002344:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002348:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800234c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002354:	db1c      	blt.n	8002390 <PID+0x5c0>
 8002356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	3358      	adds	r3, #88	@ 0x58
 800235c:	443b      	add	r3, r7
 800235e:	3b44      	subs	r3, #68	@ 0x44
 8002360:	edd3 7a00 	vldr	s15, [r3]
 8002364:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002368:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800236c:	ee16 0a90 	vmov	r0, s13
 8002370:	f7fe f90a 	bl	8000588 <__aeabi_f2d>
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	4b2f      	ldr	r3, [pc, #188]	@ (8002438 <PID+0x668>)
 800237a:	f7fd ffa7 	bl	80002cc <__adddf3>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4610      	mov	r0, r2
 8002384:	4619      	mov	r1, r3
 8002386:	f7fe fc07 	bl	8000b98 <__aeabi_d2iz>
 800238a:	4603      	mov	r3, r0
 800238c:	b21b      	sxth	r3, r3
 800238e:	e01b      	b.n	80023c8 <PID+0x5f8>
 8002390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	3358      	adds	r3, #88	@ 0x58
 8002396:	443b      	add	r3, r7
 8002398:	3b44      	subs	r3, #68	@ 0x44
 800239a:	edd3 7a00 	vldr	s15, [r3]
 800239e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80023a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80023a6:	ee16 0a90 	vmov	r0, s13
 80023aa:	f7fe f8ed 	bl	8000588 <__aeabi_f2d>
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	4b21      	ldr	r3, [pc, #132]	@ (8002438 <PID+0x668>)
 80023b4:	f7fd ff88 	bl	80002c8 <__aeabi_dsub>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	f7fe fbea 	bl	8000b98 <__aeabi_d2iz>
 80023c4:	4603      	mov	r3, r0
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
			writeWords(mpu.devAddr, SaveAddress + (i * shift), 1,
 80023ca:	4b1c      	ldr	r3, [pc, #112]	@ (800243c <PID+0x66c>)
 80023cc:	7818      	ldrb	r0, [r3, #0]
 80023ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80023d6:	fb12 f303 	smulbb	r3, r2, r3
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023e0:	4413      	add	r3, r2
 80023e2:	b2d9      	uxtb	r1, r3
 80023e4:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 80023e8:	2200      	movs	r2, #0
 80023ea:	9200      	str	r2, [sp, #0]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f7fe ffe5 	bl	80013bc <writeWords>
					(uint16_t*) &Data, NULL);
			HAL_Delay(1);
 80023f2:	2001      	movs	r0, #1
 80023f4:	f001 f816 	bl	8003424 <HAL_Delay>
		for (int i = 0; i < 3; i++)
 80023f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023fa:	3301      	adds	r3, #1
 80023fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80023fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002400:	2b02      	cmp	r3, #2
 8002402:	f77f af3b 	ble.w	800227c <PID+0x4ac>
	for (int L = 0; L < Loops; L++)
 8002406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002408:	3301      	adds	r3, #1
 800240a:	643b      	str	r3, [r7, #64]	@ 0x40
 800240c:	7bbb      	ldrb	r3, [r7, #14]
 800240e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002410:	429a      	cmp	r2, r3
 8002412:	f6ff ad69 	blt.w	8001ee8 <PID+0x118>

		}
	}
	printf("PID Tuning Done.\n\r");
 8002416:	480c      	ldr	r0, [pc, #48]	@ (8002448 <PID+0x678>)
 8002418:	f004 faca 	bl	80069b0 <iprintf>
	resetFIFO();
 800241c:	f7ff f8fa 	bl	8001614 <resetFIFO>
	resetDMP();
 8002420:	f7ff fab6 	bl	8001990 <resetDMP>
}
 8002424:	bf00      	nop
 8002426:	3758      	adds	r7, #88	@ 0x58
 8002428:	46bd      	mov	sp, r7
 800242a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800242e:	bf00      	nop
 8002430:	9999999a 	.word	0x9999999a
 8002434:	3fa99999 	.word	0x3fa99999
 8002438:	3fe00000 	.word	0x3fe00000
 800243c:	200002ac 	.word	0x200002ac
 8002440:	3ff00000 	.word	0x3ff00000
 8002444:	40140000 	.word	0x40140000
 8002448:	08009410 	.word	0x08009410

0800244c <GetActiveOffsets>:

int16_t* GetActiveOffsets(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af02      	add	r7, sp, #8
	uint8_t AOffsetRegister =
			(getDeviceID() < 0x38) ? MPU6050_RA_XA_OFFS_H : 0x77;
 8002452:	f7ff f9e5 	bl	8001820 <getDeviceID>
 8002456:	4603      	mov	r3, r0
	uint8_t AOffsetRegister =
 8002458:	2b37      	cmp	r3, #55	@ 0x37
 800245a:	d801      	bhi.n	8002460 <GetActiveOffsets+0x14>
 800245c:	2306      	movs	r3, #6
 800245e:	e000      	b.n	8002462 <GetActiveOffsets+0x16>
 8002460:	2377      	movs	r3, #119	@ 0x77
 8002462:	71fb      	strb	r3, [r7, #7]
	if (AOffsetRegister == 0x06)
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	2b06      	cmp	r3, #6
 8002468:	d10b      	bne.n	8002482 <GetActiveOffsets+0x36>
		readWords(mpu.devAddr, AOffsetRegister, 3, (uint16_t*) mpu.offsets, 0,
 800246a:	4b22      	ldr	r3, [pc, #136]	@ (80024f4 <GetActiveOffsets+0xa8>)
 800246c:	7818      	ldrb	r0, [r3, #0]
 800246e:	79f9      	ldrb	r1, [r7, #7]
 8002470:	2300      	movs	r3, #0
 8002472:	9301      	str	r3, [sp, #4]
 8002474:	2300      	movs	r3, #0
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	4b1f      	ldr	r3, [pc, #124]	@ (80024f8 <GetActiveOffsets+0xac>)
 800247a:	2203      	movs	r2, #3
 800247c:	f7fe fe22 	bl	80010c4 <readWords>
 8002480:	e026      	b.n	80024d0 <GetActiveOffsets+0x84>
		NULL);
	else
	{
		readWords(mpu.devAddr, AOffsetRegister, 1, (uint16_t*) mpu.offsets, 0,
 8002482:	4b1c      	ldr	r3, [pc, #112]	@ (80024f4 <GetActiveOffsets+0xa8>)
 8002484:	7818      	ldrb	r0, [r3, #0]
 8002486:	79f9      	ldrb	r1, [r7, #7]
 8002488:	2300      	movs	r3, #0
 800248a:	9301      	str	r3, [sp, #4]
 800248c:	2300      	movs	r3, #0
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	4b19      	ldr	r3, [pc, #100]	@ (80024f8 <GetActiveOffsets+0xac>)
 8002492:	2201      	movs	r2, #1
 8002494:	f7fe fe16 	bl	80010c4 <readWords>
		NULL);
		readWords(mpu.devAddr, AOffsetRegister + 3, 1,
 8002498:	4b16      	ldr	r3, [pc, #88]	@ (80024f4 <GetActiveOffsets+0xa8>)
 800249a:	7818      	ldrb	r0, [r3, #0]
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	3303      	adds	r3, #3
 80024a0:	b2d9      	uxtb	r1, r3
 80024a2:	4a16      	ldr	r2, [pc, #88]	@ (80024fc <GetActiveOffsets+0xb0>)
 80024a4:	2300      	movs	r3, #0
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	2300      	movs	r3, #0
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	4613      	mov	r3, r2
 80024ae:	2201      	movs	r2, #1
 80024b0:	f7fe fe08 	bl	80010c4 <readWords>
				(uint16_t*) (mpu.offsets + 1), 0, NULL);
		readWords(mpu.devAddr, AOffsetRegister + 6, 1,
 80024b4:	4b0f      	ldr	r3, [pc, #60]	@ (80024f4 <GetActiveOffsets+0xa8>)
 80024b6:	7818      	ldrb	r0, [r3, #0]
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	3306      	adds	r3, #6
 80024bc:	b2d9      	uxtb	r1, r3
 80024be:	4a10      	ldr	r2, [pc, #64]	@ (8002500 <GetActiveOffsets+0xb4>)
 80024c0:	2300      	movs	r3, #0
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	2300      	movs	r3, #0
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	4613      	mov	r3, r2
 80024ca:	2201      	movs	r2, #1
 80024cc:	f7fe fdfa 	bl	80010c4 <readWords>
				(uint16_t*) (mpu.offsets + 2), 0, NULL);
	}
	readWords(mpu.devAddr, 0x13, 3, (uint16_t*) (mpu.offsets + 3), 0, NULL);
 80024d0:	4b08      	ldr	r3, [pc, #32]	@ (80024f4 <GetActiveOffsets+0xa8>)
 80024d2:	7818      	ldrb	r0, [r3, #0]
 80024d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002504 <GetActiveOffsets+0xb8>)
 80024d6:	2300      	movs	r3, #0
 80024d8:	9301      	str	r3, [sp, #4]
 80024da:	2300      	movs	r3, #0
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	4613      	mov	r3, r2
 80024e0:	2203      	movs	r2, #3
 80024e2:	2113      	movs	r1, #19
 80024e4:	f7fe fdee 	bl	80010c4 <readWords>
	return mpu.offsets;
 80024e8:	4b03      	ldr	r3, [pc, #12]	@ (80024f8 <GetActiveOffsets+0xac>)
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200002ac 	.word	0x200002ac
 80024f8:	200002c8 	.word	0x200002c8
 80024fc:	200002ca 	.word	0x200002ca
 8002500:	200002cc 	.word	0x200002cc
 8002504:	200002ce 	.word	0x200002ce

08002508 <PrintActiveOffsets>:

void PrintActiveOffsets(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
	GetActiveOffsets();
 800250c:	f7ff ff9e 	bl	800244c <GetActiveOffsets>
	//	A_OFFSET_H_READ_A_OFFS(Data);
	printf("%.5f", (float) mpu.offsets[0]);
 8002510:	4b39      	ldr	r3, [pc, #228]	@ (80025f8 <PrintActiveOffsets+0xf0>)
 8002512:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800251e:	ee17 0a90 	vmov	r0, s15
 8002522:	f7fe f831 	bl	8000588 <__aeabi_f2d>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4834      	ldr	r0, [pc, #208]	@ (80025fc <PrintActiveOffsets+0xf4>)
 800252c:	f004 fa40 	bl	80069b0 <iprintf>
	printf(",\t");
 8002530:	4833      	ldr	r0, [pc, #204]	@ (8002600 <PrintActiveOffsets+0xf8>)
 8002532:	f004 fa3d 	bl	80069b0 <iprintf>
	printf("%.5f", (float) mpu.offsets[1]);
 8002536:	4b30      	ldr	r3, [pc, #192]	@ (80025f8 <PrintActiveOffsets+0xf0>)
 8002538:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800253c:	ee07 3a90 	vmov	s15, r3
 8002540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002544:	ee17 0a90 	vmov	r0, s15
 8002548:	f7fe f81e 	bl	8000588 <__aeabi_f2d>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	482a      	ldr	r0, [pc, #168]	@ (80025fc <PrintActiveOffsets+0xf4>)
 8002552:	f004 fa2d 	bl	80069b0 <iprintf>
	printf(",\t");
 8002556:	482a      	ldr	r0, [pc, #168]	@ (8002600 <PrintActiveOffsets+0xf8>)
 8002558:	f004 fa2a 	bl	80069b0 <iprintf>
	printf("%.5f", (float) mpu.offsets[2]);
 800255c:	4b26      	ldr	r3, [pc, #152]	@ (80025f8 <PrintActiveOffsets+0xf0>)
 800255e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002562:	ee07 3a90 	vmov	s15, r3
 8002566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800256a:	ee17 0a90 	vmov	r0, s15
 800256e:	f7fe f80b 	bl	8000588 <__aeabi_f2d>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4821      	ldr	r0, [pc, #132]	@ (80025fc <PrintActiveOffsets+0xf4>)
 8002578:	f004 fa1a 	bl	80069b0 <iprintf>
	printf(",\t");
 800257c:	4820      	ldr	r0, [pc, #128]	@ (8002600 <PrintActiveOffsets+0xf8>)
 800257e:	f004 fa17 	bl	80069b0 <iprintf>

	//	XG_OFFSET_H_READ_OFFS_USR(Data);
	printf("%.5f", (float) mpu.offsets[3]);
 8002582:	4b1d      	ldr	r3, [pc, #116]	@ (80025f8 <PrintActiveOffsets+0xf0>)
 8002584:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8002588:	ee07 3a90 	vmov	s15, r3
 800258c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002590:	ee17 0a90 	vmov	r0, s15
 8002594:	f7fd fff8 	bl	8000588 <__aeabi_f2d>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4817      	ldr	r0, [pc, #92]	@ (80025fc <PrintActiveOffsets+0xf4>)
 800259e:	f004 fa07 	bl	80069b0 <iprintf>
	printf(",\t");
 80025a2:	4817      	ldr	r0, [pc, #92]	@ (8002600 <PrintActiveOffsets+0xf8>)
 80025a4:	f004 fa04 	bl	80069b0 <iprintf>
	printf("%.5f", (float) mpu.offsets[4]);
 80025a8:	4b13      	ldr	r3, [pc, #76]	@ (80025f8 <PrintActiveOffsets+0xf0>)
 80025aa:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025b6:	ee17 0a90 	vmov	r0, s15
 80025ba:	f7fd ffe5 	bl	8000588 <__aeabi_f2d>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	480e      	ldr	r0, [pc, #56]	@ (80025fc <PrintActiveOffsets+0xf4>)
 80025c4:	f004 f9f4 	bl	80069b0 <iprintf>
	printf(",\t");
 80025c8:	480d      	ldr	r0, [pc, #52]	@ (8002600 <PrintActiveOffsets+0xf8>)
 80025ca:	f004 f9f1 	bl	80069b0 <iprintf>
	printf("%.5f", (float) mpu.offsets[5]);
 80025ce:	4b0a      	ldr	r3, [pc, #40]	@ (80025f8 <PrintActiveOffsets+0xf0>)
 80025d0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 80025d4:	ee07 3a90 	vmov	s15, r3
 80025d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025dc:	ee17 0a90 	vmov	r0, s15
 80025e0:	f7fd ffd2 	bl	8000588 <__aeabi_f2d>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4804      	ldr	r0, [pc, #16]	@ (80025fc <PrintActiveOffsets+0xf4>)
 80025ea:	f004 f9e1 	bl	80069b0 <iprintf>
	printf("\n\n");
 80025ee:	4805      	ldr	r0, [pc, #20]	@ (8002604 <PrintActiveOffsets+0xfc>)
 80025f0:	f004 fa4e 	bl	8006a90 <puts>
}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	200002ac 	.word	0x200002ac
 80025fc:	08009424 	.word	0x08009424
 8002600:	0800942c 	.word	0x0800942c
 8002604:	08009430 	.word	0x08009430

08002608 <dmpInitialize>:

// this is the most basic initialization I can create. with the intent that we access the register bytes as few times as
// needed to get the job done. for detailed descriptions of all registers and there purpose google "MPU-6000/MPU-6050
// Register Map and Descriptions"
uint8_t dmpInitialize(void)
{    // Lets get it over with fast Write everything once and set it up nicely
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af02      	add	r7, sp, #8
	uint8_t val;
	uint16_t ival;
	// Reset procedure per instructions in the "MPU-6000/MPU-6050 Register Map and Descriptions" page 41
	writeBit(mpu.devAddr, 0x6B, 7, (val = 1), NULL); // PWR_MGMT_1: reset with 100ms delay
 800260e:	4b65      	ldr	r3, [pc, #404]	@ (80027a4 <dmpInitialize+0x19c>)
 8002610:	7818      	ldrb	r0, [r3, #0]
 8002612:	2301      	movs	r3, #1
 8002614:	71fb      	strb	r3, [r7, #7]
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	2200      	movs	r2, #0
 800261a:	9200      	str	r2, [sp, #0]
 800261c:	2207      	movs	r2, #7
 800261e:	216b      	movs	r1, #107	@ 0x6b
 8002620:	f7fe fddc 	bl	80011dc <writeBit>
	HAL_Delay(100);
 8002624:	2064      	movs	r0, #100	@ 0x64
 8002626:	f000 fefd 	bl	8003424 <HAL_Delay>
	writeBits(mpu.devAddr, 0x6A, 2, 3, (val = 0b111), NULL); // full SIGNAL_PATH_RESET: with another 100ms delay
 800262a:	4b5e      	ldr	r3, [pc, #376]	@ (80027a4 <dmpInitialize+0x19c>)
 800262c:	7818      	ldrb	r0, [r3, #0]
 800262e:	2307      	movs	r3, #7
 8002630:	71fb      	strb	r3, [r7, #7]
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	2200      	movs	r2, #0
 8002636:	9201      	str	r2, [sp, #4]
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	2303      	movs	r3, #3
 800263c:	2202      	movs	r2, #2
 800263e:	216a      	movs	r1, #106	@ 0x6a
 8002640:	f7fe fe0b 	bl	800125a <writeBits>
	HAL_Delay(100);
 8002644:	2064      	movs	r0, #100	@ 0x64
 8002646:	f000 feed 	bl	8003424 <HAL_Delay>
	val = 0x01;
 800264a:	2301      	movs	r3, #1
 800264c:	71fb      	strb	r3, [r7, #7]
	writeBytes(mpu.devAddr, 0x6B, 1, &(val), NULL); // 1000 0001 PWR_MGMT_1:Clock Source Select PLL_X_gyro
 800264e:	4b55      	ldr	r3, [pc, #340]	@ (80027a4 <dmpInitialize+0x19c>)
 8002650:	7818      	ldrb	r0, [r3, #0]
 8002652:	1dfb      	adds	r3, r7, #7
 8002654:	2200      	movs	r2, #0
 8002656:	9200      	str	r2, [sp, #0]
 8002658:	2201      	movs	r2, #1
 800265a:	216b      	movs	r1, #107	@ 0x6b
 800265c:	f7fe fe82 	bl	8001364 <writeBytes>
	val = 0x00;
 8002660:	2300      	movs	r3, #0
 8002662:	71fb      	strb	r3, [r7, #7]
	writeBytes(mpu.devAddr, 0x38, 1, &(val), NULL); // 0000 0000 INT_ENABLE: no Interrupt
 8002664:	4b4f      	ldr	r3, [pc, #316]	@ (80027a4 <dmpInitialize+0x19c>)
 8002666:	7818      	ldrb	r0, [r3, #0]
 8002668:	1dfb      	adds	r3, r7, #7
 800266a:	2200      	movs	r2, #0
 800266c:	9200      	str	r2, [sp, #0]
 800266e:	2201      	movs	r2, #1
 8002670:	2138      	movs	r1, #56	@ 0x38
 8002672:	f7fe fe77 	bl	8001364 <writeBytes>
	val = 0x00;
 8002676:	2300      	movs	r3, #0
 8002678:	71fb      	strb	r3, [r7, #7]
	writeBytes(mpu.devAddr, 0x23, 1, &(val), NULL); // 0000 0000 MPU FIFO_EN: (all off) Using DMP's FIFO instead
 800267a:	4b4a      	ldr	r3, [pc, #296]	@ (80027a4 <dmpInitialize+0x19c>)
 800267c:	7818      	ldrb	r0, [r3, #0]
 800267e:	1dfb      	adds	r3, r7, #7
 8002680:	2200      	movs	r2, #0
 8002682:	9200      	str	r2, [sp, #0]
 8002684:	2201      	movs	r2, #1
 8002686:	2123      	movs	r1, #35	@ 0x23
 8002688:	f7fe fe6c 	bl	8001364 <writeBytes>
	val = 0x00;
 800268c:	2300      	movs	r3, #0
 800268e:	71fb      	strb	r3, [r7, #7]
	writeBytes(mpu.devAddr, 0x1C, 1, &(val), NULL); // 0000 0000 ACCEL_CONFIG: 0 =  Accel Full Scale Select: 2g
 8002690:	4b44      	ldr	r3, [pc, #272]	@ (80027a4 <dmpInitialize+0x19c>)
 8002692:	7818      	ldrb	r0, [r3, #0]
 8002694:	1dfb      	adds	r3, r7, #7
 8002696:	2200      	movs	r2, #0
 8002698:	9200      	str	r2, [sp, #0]
 800269a:	2201      	movs	r2, #1
 800269c:	211c      	movs	r1, #28
 800269e:	f7fe fe61 	bl	8001364 <writeBytes>
	val = 0x80;
 80026a2:	2380      	movs	r3, #128	@ 0x80
 80026a4:	71fb      	strb	r3, [r7, #7]
	writeBytes(mpu.devAddr, 0x37, 1, &(val), NULL); // 1001 0000 INT_PIN_CFG: ACTL The logic level for int pin is
 80026a6:	4b3f      	ldr	r3, [pc, #252]	@ (80027a4 <dmpInitialize+0x19c>)
 80026a8:	7818      	ldrb	r0, [r3, #0]
 80026aa:	1dfb      	adds	r3, r7, #7
 80026ac:	2200      	movs	r2, #0
 80026ae:	9200      	str	r2, [sp, #0]
 80026b0:	2201      	movs	r2, #1
 80026b2:	2137      	movs	r1, #55	@ 0x37
 80026b4:	f7fe fe56 	bl	8001364 <writeBytes>
	// active low. and interrupt status bits are cleared on any read
	val = 0x01;
 80026b8:	2301      	movs	r3, #1
 80026ba:	71fb      	strb	r3, [r7, #7]
	writeBytes(mpu.devAddr, 0x6B, 1, &(val), NULL); // 0000 0001 PWR_MGMT_1: Clock Source Select PLL_X_gyro
 80026bc:	4b39      	ldr	r3, [pc, #228]	@ (80027a4 <dmpInitialize+0x19c>)
 80026be:	7818      	ldrb	r0, [r3, #0]
 80026c0:	1dfb      	adds	r3, r7, #7
 80026c2:	2200      	movs	r2, #0
 80026c4:	9200      	str	r2, [sp, #0]
 80026c6:	2201      	movs	r2, #1
 80026c8:	216b      	movs	r1, #107	@ 0x6b
 80026ca:	f7fe fe4b 	bl	8001364 <writeBytes>
	val = 0x04;
 80026ce:	2304      	movs	r3, #4
 80026d0:	71fb      	strb	r3, [r7, #7]
	writeBytes(mpu.devAddr, 0x19, 1, &(val), NULL); // 0000 0100 SMPLRT_DIV: Divides the internal sample rate 400Hz (
 80026d2:	4b34      	ldr	r3, [pc, #208]	@ (80027a4 <dmpInitialize+0x19c>)
 80026d4:	7818      	ldrb	r0, [r3, #0]
 80026d6:	1dfb      	adds	r3, r7, #7
 80026d8:	2200      	movs	r2, #0
 80026da:	9200      	str	r2, [sp, #0]
 80026dc:	2201      	movs	r2, #1
 80026de:	2119      	movs	r1, #25
 80026e0:	f7fe fe40 	bl	8001364 <writeBytes>
													// Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV))
	val = 0x01;
 80026e4:	2301      	movs	r3, #1
 80026e6:	71fb      	strb	r3, [r7, #7]
	writeBytes(mpu.devAddr, 0x1A, 1, &(val), NULL); // 0000 0001 CONFIG: Digital Low Pass Filter (DLPF)
 80026e8:	4b2e      	ldr	r3, [pc, #184]	@ (80027a4 <dmpInitialize+0x19c>)
 80026ea:	7818      	ldrb	r0, [r3, #0]
 80026ec:	1dfb      	adds	r3, r7, #7
 80026ee:	2200      	movs	r2, #0
 80026f0:	9200      	str	r2, [sp, #0]
 80026f2:	2201      	movs	r2, #1
 80026f4:	211a      	movs	r1, #26
 80026f6:	f7fe fe35 	bl	8001364 <writeBytes>
													// Configuration 188HZ  //Im betting this will be the beat
	if (!writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE, 0, 0, true))
 80026fa:	2301      	movs	r3, #1
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	2300      	movs	r3, #0
 8002700:	2200      	movs	r2, #0
 8002702:	f640 31f6 	movw	r1, #3062	@ 0xbf6
 8002706:	4828      	ldr	r0, [pc, #160]	@ (80027a8 <dmpInitialize+0x1a0>)
 8002708:	f7ff fa8c 	bl	8001c24 <writeProgMemoryBlock>
 800270c:	4603      	mov	r3, r0
 800270e:	f083 0301 	eor.w	r3, r3, #1
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <dmpInitialize+0x114>
		return 1;                                         //   Fail
 8002718:	2301      	movs	r3, #1
 800271a:	e03f      	b.n	800279c <dmpInitialize+0x194>
														  // Loads the DMP image into the MPU6050 Memory // Should Never
	ival = 0x0400;
 800271c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002720:	80bb      	strh	r3, [r7, #4]
	writeWords(mpu.devAddr, 0x70, 1, &(ival), NULL); // DMP Program Start Address
 8002722:	4b20      	ldr	r3, [pc, #128]	@ (80027a4 <dmpInitialize+0x19c>)
 8002724:	7818      	ldrb	r0, [r3, #0]
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	2200      	movs	r2, #0
 800272a:	9200      	str	r2, [sp, #0]
 800272c:	2201      	movs	r2, #1
 800272e:	2170      	movs	r1, #112	@ 0x70
 8002730:	f7fe fe44 	bl	80013bc <writeWords>
	HAL_Delay(1);
 8002734:	2001      	movs	r0, #1
 8002736:	f000 fe75 	bl	8003424 <HAL_Delay>
	val = 0x18;
 800273a:	2318      	movs	r3, #24
 800273c:	71fb      	strb	r3, [r7, #7]
	writeBytes(mpu.devAddr, 0x1B, 1, &(val), NULL); // 0001 1000 GYRO_CONFIG: 3 = +2000 Deg/sec
 800273e:	4b19      	ldr	r3, [pc, #100]	@ (80027a4 <dmpInitialize+0x19c>)
 8002740:	7818      	ldrb	r0, [r3, #0]
 8002742:	1dfb      	adds	r3, r7, #7
 8002744:	2200      	movs	r2, #0
 8002746:	9200      	str	r2, [sp, #0]
 8002748:	2201      	movs	r2, #1
 800274a:	211b      	movs	r1, #27
 800274c:	f7fe fe0a 	bl	8001364 <writeBytes>
	val = 0xC0;
 8002750:	23c0      	movs	r3, #192	@ 0xc0
 8002752:	71fb      	strb	r3, [r7, #7]
	writeBytes(mpu.devAddr, 0x6A, 1, &(val), NULL); // 1100 1100 USER_CTRL: Enable Fifo and Reset Fifo
 8002754:	4b13      	ldr	r3, [pc, #76]	@ (80027a4 <dmpInitialize+0x19c>)
 8002756:	7818      	ldrb	r0, [r3, #0]
 8002758:	1dfb      	adds	r3, r7, #7
 800275a:	2200      	movs	r2, #0
 800275c:	9200      	str	r2, [sp, #0]
 800275e:	2201      	movs	r2, #1
 8002760:	216a      	movs	r1, #106	@ 0x6a
 8002762:	f7fe fdff 	bl	8001364 <writeBytes>
	val = 0x02;
 8002766:	2302      	movs	r3, #2
 8002768:	71fb      	strb	r3, [r7, #7]
	writeBytes(mpu.devAddr, 0x38, 1, &(val), NULL); // 0000 0010 INT_ENABLE: RAW_DMP_INT_EN on
 800276a:	4b0e      	ldr	r3, [pc, #56]	@ (80027a4 <dmpInitialize+0x19c>)
 800276c:	7818      	ldrb	r0, [r3, #0]
 800276e:	1dfb      	adds	r3, r7, #7
 8002770:	2200      	movs	r2, #0
 8002772:	9200      	str	r2, [sp, #0]
 8002774:	2201      	movs	r2, #1
 8002776:	2138      	movs	r1, #56	@ 0x38
 8002778:	f7fe fdf4 	bl	8001364 <writeBytes>
	writeBit(mpu.devAddr, 0x6A, 2, 1, NULL); // Reset FIFO one last time just for kicks. (MPUi2cWrite reads 0x6A
 800277c:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <dmpInitialize+0x19c>)
 800277e:	7818      	ldrb	r0, [r3, #0]
 8002780:	2300      	movs	r3, #0
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2301      	movs	r3, #1
 8002786:	2202      	movs	r2, #2
 8002788:	216a      	movs	r1, #106	@ 0x6a
 800278a:	f7fe fd27 	bl	80011dc <writeBit>
											 // first and only alters 1 bit and then saves the byte)

	setDMPEnabled(false); // disable DMP for compatibility with the MPU6050 library
 800278e:	2000      	movs	r0, #0
 8002790:	f7ff f8ea 	bl	8001968 <setDMPEnabled>
	/*
	 dmpPacketSize += 16;//DMP_FEATURE_6X_LP_QUAT
	 dmpPacketSize += 6;//DMP_FEATURE_SEND_RAW_ACCEL
	 dmpPacketSize += 6;//DMP_FEATURE_SEND_RAW_GYRO
	 */
	dmpPacketSize = 28;
 8002794:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <dmpInitialize+0x1a4>)
 8002796:	221c      	movs	r2, #28
 8002798:	801a      	strh	r2, [r3, #0]
	return 0;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	200002ac 	.word	0x200002ac
 80027a8:	08009554 	.word	0x08009554
 80027ac:	2000020c 	.word	0x2000020c

080027b0 <dmpGetQuaternion16bit>:
	data[3] = (((uint32_t) packet[12] << 24) | ((uint32_t) packet[13] << 16)
			| ((uint32_t) packet[14] << 8) | packet[15]);
	return 0;
}
uint8_t dmpGetQuaternion16bit(int16_t *data, const uint8_t *packet)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
	// TODO: accommodate different arrangements of sent data (ONLY default supported now)
	if (packet == 0)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <dmpGetQuaternion16bit+0x16>
		packet = dmpPacketBuffer;
 80027c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002840 <dmpGetQuaternion16bit+0x90>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	603b      	str	r3, [r7, #0]
	data[0] = ((packet[0] << 8) | packet[1]);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	b21a      	sxth	r2, r3
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	3301      	adds	r3, #1
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	b21b      	sxth	r3, r3
 80027d6:	4313      	orrs	r3, r2
 80027d8:	b21a      	sxth	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	801a      	strh	r2, [r3, #0]
	data[1] = ((packet[4] << 8) | packet[5]);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	3304      	adds	r3, #4
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	b219      	sxth	r1, r3
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	3305      	adds	r3, #5
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	b21a      	sxth	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3302      	adds	r3, #2
 80027f4:	430a      	orrs	r2, r1
 80027f6:	b212      	sxth	r2, r2
 80027f8:	801a      	strh	r2, [r3, #0]
	data[2] = ((packet[8] << 8) | packet[9]);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	3308      	adds	r3, #8
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	021b      	lsls	r3, r3, #8
 8002802:	b219      	sxth	r1, r3
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	3309      	adds	r3, #9
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	b21a      	sxth	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3304      	adds	r3, #4
 8002810:	430a      	orrs	r2, r1
 8002812:	b212      	sxth	r2, r2
 8002814:	801a      	strh	r2, [r3, #0]
	data[3] = ((packet[12] << 8) | packet[13]);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	330c      	adds	r3, #12
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	021b      	lsls	r3, r3, #8
 800281e:	b219      	sxth	r1, r3
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	330d      	adds	r3, #13
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	b21a      	sxth	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3306      	adds	r3, #6
 800282c:	430a      	orrs	r2, r1
 800282e:	b212      	sxth	r2, r2
 8002830:	801a      	strh	r2, [r3, #0]
	return 0;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	20000208 	.word	0x20000208

08002844 <dmpGetQuaternion>:
uint8_t dmpGetQuaternion(Quaternion *q, const uint8_t *packet)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
	// TODO: accommodate different arrangements of sent data (ONLY default supported now)
	int16_t qI[4];
	uint8_t status = dmpGetQuaternion16bit(qI, packet);
 800284e:	f107 030c 	add.w	r3, r7, #12
 8002852:	6839      	ldr	r1, [r7, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ffab 	bl	80027b0 <dmpGetQuaternion16bit>
 800285a:	4603      	mov	r3, r0
 800285c:	75fb      	strb	r3, [r7, #23]
	if (status == 0)
 800285e:	7dfb      	ldrb	r3, [r7, #23]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d135      	bne.n	80028d0 <dmpGetQuaternion+0x8c>
	{
		q->w = (float) qI[0] / 16384.0f;
 8002864:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002868:	ee07 3a90 	vmov	s15, r3
 800286c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002870:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80028dc <dmpGetQuaternion+0x98>
 8002874:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	edc3 7a00 	vstr	s15, [r3]
		q->x = (float) qI[1] / 16384.0f;
 800287e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002882:	ee07 3a90 	vmov	s15, r3
 8002886:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800288a:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80028dc <dmpGetQuaternion+0x98>
 800288e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	edc3 7a01 	vstr	s15, [r3, #4]
		q->y = (float) qI[2] / 16384.0f;
 8002898:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800289c:	ee07 3a90 	vmov	s15, r3
 80028a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028a4:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80028dc <dmpGetQuaternion+0x98>
 80028a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	edc3 7a02 	vstr	s15, [r3, #8]
		q->z = (float) qI[3] / 16384.0f;
 80028b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80028b6:	ee07 3a90 	vmov	s15, r3
 80028ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028be:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80028dc <dmpGetQuaternion+0x98>
 80028c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	edc3 7a03 	vstr	s15, [r3, #12]
		return 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e000      	b.n	80028d2 <dmpGetQuaternion+0x8e>
	}
	return status; // int16 return value, indicates error if this line is reached
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	46800000 	.word	0x46800000

080028e0 <dmpGetEuler>:
// uint8_t dmpGetQuantizedAccel(long *data, const uint8_t* packet);
// uint8_t dmpGetExternalSensorData(long *data, int size, const uint8_t* packet);
// uint8_t dmpGetEIS(long *data, const uint8_t* packet);

uint8_t dmpGetEuler(float *data, Quaternion *q)
{
 80028e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
	data[0] = atan2(2 * q->x * q->y - 2 * q->w * q->z,
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80028f2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80028fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	edd3 7a00 	vldr	s15, [r3]
 8002906:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002918:	ee17 0a90 	vmov	r0, s15
 800291c:	f7fd fe34 	bl	8000588 <__aeabi_f2d>
 8002920:	4680      	mov	r8, r0
 8002922:	4689      	mov	r9, r1
			2 * q->w * q->w + 2 * q->x * q->x - 1) * 57.29;    // psi
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	edd3 7a00 	vldr	s15, [r3]
 800292a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	edd3 7a00 	vldr	s15, [r3]
 8002934:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	edd3 7a01 	vldr	s15, [r3, #4]
 800293e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	edd3 7a01 	vldr	s15, [r3, #4]
 8002948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800294c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002950:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002954:	ee77 7ac7 	vsub.f32	s15, s15, s14
	data[0] = atan2(2 * q->x * q->y - 2 * q->w * q->z,
 8002958:	ee17 0a90 	vmov	r0, s15
 800295c:	f7fd fe14 	bl	8000588 <__aeabi_f2d>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	ec43 2b11 	vmov	d1, r2, r3
 8002968:	ec49 8b10 	vmov	d0, r8, r9
 800296c:	f005 ffc0 	bl	80088f0 <atan2>
 8002970:	ec51 0b10 	vmov	r0, r1, d0
			2 * q->w * q->w + 2 * q->x * q->x - 1) * 57.29;    // psi
 8002974:	a34e      	add	r3, pc, #312	@ (adr r3, 8002ab0 <dmpGetEuler+0x1d0>)
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	f7fd fe5d 	bl	8000638 <__aeabi_dmul>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	f7fe f92f 	bl	8000be8 <__aeabi_d2f>
 800298a:	4602      	mov	r2, r0
	data[0] = atan2(2 * q->x * q->y - 2 * q->w * q->z,
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	601a      	str	r2, [r3, #0]
	data[1] = -asin(2 * q->x * q->z + 2 * q->w * q->y) * 57.29;         // theta
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	edd3 7a01 	vldr	s15, [r3, #4]
 8002996:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	edd3 7a03 	vldr	s15, [r3, #12]
 80029a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	edd3 7a00 	vldr	s15, [r3]
 80029aa:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80029b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029bc:	ee17 0a90 	vmov	r0, s15
 80029c0:	f7fd fde2 	bl	8000588 <__aeabi_f2d>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	ec43 2b10 	vmov	d0, r2, r3
 80029cc:	f005 ff5c 	bl	8008888 <asin>
 80029d0:	ec53 2b10 	vmov	r2, r3, d0
 80029d4:	4614      	mov	r4, r2
 80029d6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80029da:	a335      	add	r3, pc, #212	@ (adr r3, 8002ab0 <dmpGetEuler+0x1d0>)
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	4620      	mov	r0, r4
 80029e2:	4629      	mov	r1, r5
 80029e4:	f7fd fe28 	bl	8000638 <__aeabi_dmul>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4610      	mov	r0, r2
 80029ee:	4619      	mov	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	1d1c      	adds	r4, r3, #4
 80029f4:	f7fe f8f8 	bl	8000be8 <__aeabi_d2f>
 80029f8:	4603      	mov	r3, r0
 80029fa:	6023      	str	r3, [r4, #0]
	data[2] = atan2(2 * q->y * q->z - 2 * q->w * q->x,
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a02:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	edd3 7a00 	vldr	s15, [r3]
 8002a16:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a28:	ee17 0a90 	vmov	r0, s15
 8002a2c:	f7fd fdac 	bl	8000588 <__aeabi_f2d>
 8002a30:	4604      	mov	r4, r0
 8002a32:	460d      	mov	r5, r1
			2 * q->w * q->w + 2 * q->z * q->z - 1) * 57.29;    // phi
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	edd3 7a00 	vldr	s15, [r3]
 8002a3a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	edd3 7a00 	vldr	s15, [r3]
 8002a44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a4e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002a64:	ee77 7ac7 	vsub.f32	s15, s15, s14
	data[2] = atan2(2 * q->y * q->z - 2 * q->w * q->x,
 8002a68:	ee17 0a90 	vmov	r0, s15
 8002a6c:	f7fd fd8c 	bl	8000588 <__aeabi_f2d>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	ec43 2b11 	vmov	d1, r2, r3
 8002a78:	ec45 4b10 	vmov	d0, r4, r5
 8002a7c:	f005 ff38 	bl	80088f0 <atan2>
 8002a80:	ec51 0b10 	vmov	r0, r1, d0
			2 * q->w * q->w + 2 * q->z * q->z - 1) * 57.29;    // phi
 8002a84:	a30a      	add	r3, pc, #40	@ (adr r3, 8002ab0 <dmpGetEuler+0x1d0>)
 8002a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8a:	f7fd fdd5 	bl	8000638 <__aeabi_dmul>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4610      	mov	r0, r2
 8002a94:	4619      	mov	r1, r3
	data[2] = atan2(2 * q->y * q->z - 2 * q->w * q->x,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f103 0408 	add.w	r4, r3, #8
			2 * q->w * q->w + 2 * q->z * q->z - 1) * 57.29;    // phi
 8002a9c:	f7fe f8a4 	bl	8000be8 <__aeabi_d2f>
 8002aa0:	4603      	mov	r3, r0
	data[2] = atan2(2 * q->y * q->z - 2 * q->w * q->x,
 8002aa2:	6023      	str	r3, [r4, #0]
	return 0;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ab0:	b851eb85 	.word	0xb851eb85
 8002ab4:	404ca51e 	.word	0x404ca51e

08002ab8 <dmpGetFIFOPacketSize>:
// uint8_t dmpDecodeQuantizedAccel();
// uint32_t dmpGetGyroSumOfSquare();
// uint32_t dmpGetAccelSumOfSquare();
// void dmpOverrideQuaternion(long *q);
uint16_t dmpGetFIFOPacketSize(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
	return dmpPacketSize;
 8002abc:	4b03      	ldr	r3, [pc, #12]	@ (8002acc <dmpGetFIFOPacketSize+0x14>)
 8002abe:	881b      	ldrh	r3, [r3, #0]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	2000020c 	.word	0x2000020c

08002ad0 <dmpGetCurrentFIFOPacket>:

uint8_t dmpGetCurrentFIFOPacket(uint8_t *data)
{    // overflow proof
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	return (GetCurrentFIFOPacket(data, 28));
 8002ad8:	211c      	movs	r1, #28
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe fe14 	bl	8001708 <GetCurrentFIFOPacket>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	b2db      	uxtb	r3, r3
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002af4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002af8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d013      	beq.n	8002b2c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002b04:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002b08:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002b0c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00b      	beq.n	8002b2c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002b14:	e000      	b.n	8002b18 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002b16:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002b18:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f9      	beq.n	8002b16 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002b22:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002b2c:	687b      	ldr	r3, [r7, #4]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b086      	sub	sp, #24
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	e009      	b.n	8002b60 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	60ba      	str	r2, [r7, #8]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff ffc9 	bl	8002aec <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	dbf1      	blt.n	8002b4c <_write+0x12>
	}
	return len;
 8002b68:	687b      	ldr	r3, [r7, #4]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002b74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b78:	b084      	sub	sp, #16
 8002b7a:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002b7c:	f000 fbe0 	bl	8003340 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002b80:	f000 f8d6 	bl	8002d30 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002b84:	f000 f99a 	bl	8002ebc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8002b88:	f000 f96e 	bl	8002e68 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8002b8c:	f000 f93e 	bl	8002e0c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	printf("MPU6050 Started.\n\r");
 8002b90:	4853      	ldr	r0, [pc, #332]	@ (8002ce0 <main+0x16c>)
 8002b92:	f003 ff0d 	bl	80069b0 <iprintf>
	I2Cdev_init(&hi2c1);
 8002b96:	4853      	ldr	r0, [pc, #332]	@ (8002ce4 <main+0x170>)
 8002b98:	f7fe f9ee 	bl	8000f78 <I2Cdev_init>
	mpu.devAddr = MPU6050_ADDRESS_AD0_LOW;
 8002b9c:	4b52      	ldr	r3, [pc, #328]	@ (8002ce8 <main+0x174>)
 8002b9e:	2268      	movs	r2, #104	@ 0x68
 8002ba0:	701a      	strb	r2, [r3, #0]
	mpu.fifoTimeout = 0;
 8002ba2:	4b51      	ldr	r3, [pc, #324]	@ (8002ce8 <main+0x174>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	619a      	str	r2, [r3, #24]
	initialize();
 8002ba8:	f7fe fcc8 	bl	800153c <initialize>
	printf("Testing device connections...\n\r");
 8002bac:	484f      	ldr	r0, [pc, #316]	@ (8002cec <main+0x178>)
 8002bae:	f003 feff 	bl	80069b0 <iprintf>
	printf(
			(testConnection() ?
 8002bb2:	f7fe fcd3 	bl	800155c <testConnection>
 8002bb6:	4603      	mov	r3, r0
	printf(
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <main+0x4c>
 8002bbc:	4b4c      	ldr	r3, [pc, #304]	@ (8002cf0 <main+0x17c>)
 8002bbe:	e000      	b.n	8002bc2 <main+0x4e>
 8002bc0:	4b4c      	ldr	r3, [pc, #304]	@ (8002cf4 <main+0x180>)
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f003 fef4 	bl	80069b0 <iprintf>
					("MPU6050 connection successful\n\r") :
					("MPU6050 connection failed\n\r")));
	devStatus = dmpInitialize();
 8002bc8:	f7ff fd1e 	bl	8002608 <dmpInitialize>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4b49      	ldr	r3, [pc, #292]	@ (8002cf8 <main+0x184>)
 8002bd2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(70);
 8002bd4:	2046      	movs	r0, #70	@ 0x46
 8002bd6:	f000 fc25 	bl	8003424 <HAL_Delay>
	setXGyroOffset(51);
 8002bda:	2033      	movs	r0, #51	@ 0x33
 8002bdc:	f7fe fe8e 	bl	80018fc <setXGyroOffset>
	setYGyroOffset(8);
 8002be0:	2008      	movs	r0, #8
 8002be2:	f7fe fe9d 	bl	8001920 <setYGyroOffset>
	setZGyroOffset(21);
 8002be6:	2015      	movs	r0, #21
 8002be8:	f7fe feac 	bl	8001944 <setZGyroOffset>
	setXAccelOffset(1150);
 8002bec:	f240 407e 	movw	r0, #1150	@ 0x47e
 8002bf0:	f7fe fe30 	bl	8001854 <setXAccelOffset>
	setYAccelOffset(-50);
 8002bf4:	f06f 0031 	mvn.w	r0, #49	@ 0x31
 8002bf8:	f7fe fe48 	bl	800188c <setYAccelOffset>
	setZAccelOffset(1060);
 8002bfc:	f240 4024 	movw	r0, #1060	@ 0x424
 8002c00:	f7fe fe60 	bl	80018c4 <setZAccelOffset>
	HAL_Delay(80);
 8002c04:	2050      	movs	r0, #80	@ 0x50
 8002c06:	f000 fc0d 	bl	8003424 <HAL_Delay>

	printf("Offsets set. \n\r");
 8002c0a:	483c      	ldr	r0, [pc, #240]	@ (8002cfc <main+0x188>)
 8002c0c:	f003 fed0 	bl	80069b0 <iprintf>
	if (devStatus == 0)
 8002c10:	4b39      	ldr	r3, [pc, #228]	@ (8002cf8 <main+0x184>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d123      	bne.n	8002c60 <main+0xec>
	{
		printf("DMP Firmware Uploaded. \n\r");
 8002c18:	4839      	ldr	r0, [pc, #228]	@ (8002d00 <main+0x18c>)
 8002c1a:	f003 fec9 	bl	80069b0 <iprintf>
		CalibrateAccel(6);
 8002c1e:	2006      	movs	r0, #6
 8002c20:	f7ff f886 	bl	8001d30 <CalibrateAccel>
		printf("Accel Calibration Done. \n\r");
 8002c24:	4837      	ldr	r0, [pc, #220]	@ (8002d04 <main+0x190>)
 8002c26:	f003 fec3 	bl	80069b0 <iprintf>
		CalibrateGyro(6);
 8002c2a:	2006      	movs	r0, #6
 8002c2c:	f7ff f818 	bl	8001c60 <CalibrateGyro>
		printf("Calibration Done. \n\r");
 8002c30:	4835      	ldr	r0, [pc, #212]	@ (8002d08 <main+0x194>)
 8002c32:	f003 febd 	bl	80069b0 <iprintf>
		printf("\n\r");
 8002c36:	4835      	ldr	r0, [pc, #212]	@ (8002d0c <main+0x198>)
 8002c38:	f003 feba 	bl	80069b0 <iprintf>
		PrintActiveOffsets();
 8002c3c:	f7ff fc64 	bl	8002508 <PrintActiveOffsets>
		// turn on the DMP, now that it's ready
		printf("Enabling DMP...\n\r");
 8002c40:	4833      	ldr	r0, [pc, #204]	@ (8002d10 <main+0x19c>)
 8002c42:	f003 feb5 	bl	80069b0 <iprintf>
		setDMPEnabled(true);
 8002c46:	2001      	movs	r0, #1
 8002c48:	f7fe fe8e 	bl	8001968 <setDMPEnabled>
		dmpReady = true;
 8002c4c:	4b31      	ldr	r3, [pc, #196]	@ (8002d14 <main+0x1a0>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
		packetSize = dmpGetFIFOPacketSize();
 8002c52:	f7ff ff31 	bl	8002ab8 <dmpGetFIFOPacketSize>
 8002c56:	4603      	mov	r3, r0
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8002d18 <main+0x1a4>)
 8002c5c:	801a      	strh	r2, [r3, #0]
 8002c5e:	e005      	b.n	8002c6c <main+0xf8>
	{
		// ERROR!
		// 1 = initial memory load failed
		// 2 = DMP configuration updates failed
		// (if it's going to break, usually the code will be 1)
		printf("DMP Initialization failed (code %u)\n\r", devStatus);
 8002c60:	4b25      	ldr	r3, [pc, #148]	@ (8002cf8 <main+0x184>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	4619      	mov	r1, r3
 8002c66:	482d      	ldr	r0, [pc, #180]	@ (8002d1c <main+0x1a8>)
 8002c68:	f003 fea2 	bl	80069b0 <iprintf>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if (!dmpReady)
 8002c6c:	4b29      	ldr	r3, [pc, #164]	@ (8002d14 <main+0x1a0>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	f083 0301 	eor.w	r3, r3, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d12c      	bne.n	8002cd4 <main+0x160>
			break;
		if (dmpGetCurrentFIFOPacket(fifoBuffer))
 8002c7a:	4829      	ldr	r0, [pc, #164]	@ (8002d20 <main+0x1ac>)
 8002c7c:	f7ff ff28 	bl	8002ad0 <dmpGetCurrentFIFOPacket>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f2      	beq.n	8002c6c <main+0xf8>
		{    // Get the Latest packet
			// display quaternion values in easy matrix form: w x y z

			dmpGetQuaternion(&q, fifoBuffer);
 8002c86:	4926      	ldr	r1, [pc, #152]	@ (8002d20 <main+0x1ac>)
 8002c88:	4826      	ldr	r0, [pc, #152]	@ (8002d24 <main+0x1b0>)
 8002c8a:	f7ff fddb 	bl	8002844 <dmpGetQuaternion>
			dmpGetEuler(ypr, &q);
 8002c8e:	4925      	ldr	r1, [pc, #148]	@ (8002d24 <main+0x1b0>)
 8002c90:	4825      	ldr	r0, [pc, #148]	@ (8002d28 <main+0x1b4>)
 8002c92:	f7ff fe25 	bl	80028e0 <dmpGetEuler>

//			printf("quat\t%f\t%f\t%f\t%f\n", q.w, q.x, q.y, q.z);
			printf("YPR\t%f\t%f\t%f\n", ypr[0], ypr[1], ypr[2]);
 8002c96:	4b24      	ldr	r3, [pc, #144]	@ (8002d28 <main+0x1b4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fd fc74 	bl	8000588 <__aeabi_f2d>
 8002ca0:	4680      	mov	r8, r0
 8002ca2:	4689      	mov	r9, r1
 8002ca4:	4b20      	ldr	r3, [pc, #128]	@ (8002d28 <main+0x1b4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fd fc6d 	bl	8000588 <__aeabi_f2d>
 8002cae:	4604      	mov	r4, r0
 8002cb0:	460d      	mov	r5, r1
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d28 <main+0x1b4>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fc66 	bl	8000588 <__aeabi_f2d>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002cc4:	e9cd 4500 	strd	r4, r5, [sp]
 8002cc8:	4642      	mov	r2, r8
 8002cca:	464b      	mov	r3, r9
 8002ccc:	4817      	ldr	r0, [pc, #92]	@ (8002d2c <main+0x1b8>)
 8002cce:	f003 fe6f 	bl	80069b0 <iprintf>
		if (!dmpReady)
 8002cd2:	e7cb      	b.n	8002c6c <main+0xf8>
			break;
 8002cd4:	bf00      	nop
 8002cd6:	2300      	movs	r3, #0
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ce0:	08009434 	.word	0x08009434
 8002ce4:	20000210 	.word	0x20000210
 8002ce8:	200002ac 	.word	0x200002ac
 8002cec:	08009448 	.word	0x08009448
 8002cf0:	08009468 	.word	0x08009468
 8002cf4:	08009488 	.word	0x08009488
 8002cf8:	200002d5 	.word	0x200002d5
 8002cfc:	080094a4 	.word	0x080094a4
 8002d00:	080094b4 	.word	0x080094b4
 8002d04:	080094d0 	.word	0x080094d0
 8002d08:	080094ec 	.word	0x080094ec
 8002d0c:	08009504 	.word	0x08009504
 8002d10:	08009508 	.word	0x08009508
 8002d14:	200002d4 	.word	0x200002d4
 8002d18:	200002d6 	.word	0x200002d6
 8002d1c:	0800951c 	.word	0x0800951c
 8002d20:	200002d8 	.word	0x200002d8
 8002d24:	20000318 	.word	0x20000318
 8002d28:	20000328 	.word	0x20000328
 8002d2c:	08009544 	.word	0x08009544

08002d30 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b094      	sub	sp, #80	@ 0x50
 8002d34:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002d36:	f107 031c 	add.w	r3, r7, #28
 8002d3a:	2234      	movs	r2, #52	@ 0x34
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f003 ff96 	bl	8006c70 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002d44:	f107 0308 	add.w	r3, r7, #8
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002d54:	2300      	movs	r3, #0
 8002d56:	607b      	str	r3, [r7, #4]
 8002d58:	4b2a      	ldr	r3, [pc, #168]	@ (8002e04 <SystemClock_Config+0xd4>)
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	4a29      	ldr	r2, [pc, #164]	@ (8002e04 <SystemClock_Config+0xd4>)
 8002d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d62:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d64:	4b27      	ldr	r3, [pc, #156]	@ (8002e04 <SystemClock_Config+0xd4>)
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6c:	607b      	str	r3, [r7, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002d70:	2300      	movs	r3, #0
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	4b24      	ldr	r3, [pc, #144]	@ (8002e08 <SystemClock_Config+0xd8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002d7c:	4a22      	ldr	r2, [pc, #136]	@ (8002e08 <SystemClock_Config+0xd8>)
 8002d7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b20      	ldr	r3, [pc, #128]	@ (8002e08 <SystemClock_Config+0xd8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002d8c:	603b      	str	r3, [r7, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d90:	2302      	movs	r3, #2
 8002d92:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d94:	2301      	movs	r3, #1
 8002d96:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d98:	2310      	movs	r3, #16
 8002d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002da0:	2300      	movs	r3, #0
 8002da2:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8002da4:	2310      	movs	r3, #16
 8002da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8002da8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002dac:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002dae:	2304      	movs	r3, #4
 8002db0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8002db2:	2302      	movs	r3, #2
 8002db4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002db6:	2302      	movs	r3, #2
 8002db8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dba:	f107 031c 	add.w	r3, r7, #28
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f002 fabc 	bl	800533c <HAL_RCC_OscConfig>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8002dca:	f000 f8e5 	bl	8002f98 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002dce:	230f      	movs	r3, #15
 8002dd0:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002dda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dde:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002de4:	f107 0308 	add.w	r3, r7, #8
 8002de8:	2102      	movs	r1, #2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f001 ff5c 	bl	8004ca8 <HAL_RCC_ClockConfig>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <SystemClock_Config+0xca>
	{
		Error_Handler();
 8002df6:	f000 f8cf 	bl	8002f98 <Error_Handler>
	}
}
 8002dfa:	bf00      	nop
 8002dfc:	3750      	adds	r7, #80	@ 0x50
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40007000 	.word	0x40007000

08002e0c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002e10:	4b12      	ldr	r3, [pc, #72]	@ (8002e5c <MX_I2C1_Init+0x50>)
 8002e12:	4a13      	ldr	r2, [pc, #76]	@ (8002e60 <MX_I2C1_Init+0x54>)
 8002e14:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8002e16:	4b11      	ldr	r3, [pc, #68]	@ (8002e5c <MX_I2C1_Init+0x50>)
 8002e18:	4a12      	ldr	r2, [pc, #72]	@ (8002e64 <MX_I2C1_Init+0x58>)
 8002e1a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e5c <MX_I2C1_Init+0x50>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002e22:	4b0e      	ldr	r3, [pc, #56]	@ (8002e5c <MX_I2C1_Init+0x50>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e28:	4b0c      	ldr	r3, [pc, #48]	@ (8002e5c <MX_I2C1_Init+0x50>)
 8002e2a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e2e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e30:	4b0a      	ldr	r3, [pc, #40]	@ (8002e5c <MX_I2C1_Init+0x50>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002e36:	4b09      	ldr	r3, [pc, #36]	@ (8002e5c <MX_I2C1_Init+0x50>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e3c:	4b07      	ldr	r3, [pc, #28]	@ (8002e5c <MX_I2C1_Init+0x50>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e42:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <MX_I2C1_Init+0x50>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e48:	4804      	ldr	r0, [pc, #16]	@ (8002e5c <MX_I2C1_Init+0x50>)
 8002e4a:	f000 fda3 	bl	8003994 <HAL_I2C_Init>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8002e54:	f000 f8a0 	bl	8002f98 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002e58:	bf00      	nop
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20000210 	.word	0x20000210
 8002e60:	40005400 	.word	0x40005400
 8002e64:	000186a0 	.word	0x000186a0

08002e68 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002e6c:	4b11      	ldr	r3, [pc, #68]	@ (8002eb4 <MX_USART2_UART_Init+0x4c>)
 8002e6e:	4a12      	ldr	r2, [pc, #72]	@ (8002eb8 <MX_USART2_UART_Init+0x50>)
 8002e70:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002e72:	4b10      	ldr	r3, [pc, #64]	@ (8002eb4 <MX_USART2_UART_Init+0x4c>)
 8002e74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e78:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb4 <MX_USART2_UART_Init+0x4c>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002e80:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb4 <MX_USART2_UART_Init+0x4c>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002e86:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb4 <MX_USART2_UART_Init+0x4c>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002e8c:	4b09      	ldr	r3, [pc, #36]	@ (8002eb4 <MX_USART2_UART_Init+0x4c>)
 8002e8e:	220c      	movs	r2, #12
 8002e90:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e92:	4b08      	ldr	r3, [pc, #32]	@ (8002eb4 <MX_USART2_UART_Init+0x4c>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e98:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <MX_USART2_UART_Init+0x4c>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e9e:	4805      	ldr	r0, [pc, #20]	@ (8002eb4 <MX_USART2_UART_Init+0x4c>)
 8002ea0:	f002 fcea 	bl	8005878 <HAL_UART_Init>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8002eaa:	f000 f875 	bl	8002f98 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000264 	.word	0x20000264
 8002eb8:	40004400 	.word	0x40004400

08002ebc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	@ 0x28
 8002ec0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002ec2:	f107 0314 	add.w	r3, r7, #20
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	609a      	str	r2, [r3, #8]
 8002ece:	60da      	str	r2, [r3, #12]
 8002ed0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8002f8c <MX_GPIO_Init+0xd0>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eda:	4a2c      	ldr	r2, [pc, #176]	@ (8002f8c <MX_GPIO_Init+0xd0>)
 8002edc:	f043 0304 	orr.w	r3, r3, #4
 8002ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8002f8c <MX_GPIO_Init+0xd0>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	4b26      	ldr	r3, [pc, #152]	@ (8002f8c <MX_GPIO_Init+0xd0>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef6:	4a25      	ldr	r2, [pc, #148]	@ (8002f8c <MX_GPIO_Init+0xd0>)
 8002ef8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002efe:	4b23      	ldr	r3, [pc, #140]	@ (8002f8c <MX_GPIO_Init+0xd0>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8002f8c <MX_GPIO_Init+0xd0>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	4a1e      	ldr	r2, [pc, #120]	@ (8002f8c <MX_GPIO_Init+0xd0>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002f8c <MX_GPIO_Init+0xd0>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	4b18      	ldr	r3, [pc, #96]	@ (8002f8c <MX_GPIO_Init+0xd0>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2e:	4a17      	ldr	r2, [pc, #92]	@ (8002f8c <MX_GPIO_Init+0xd0>)
 8002f30:	f043 0302 	orr.w	r3, r3, #2
 8002f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f36:	4b15      	ldr	r3, [pc, #84]	@ (8002f8c <MX_GPIO_Init+0xd0>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	607b      	str	r3, [r7, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002f42:	2200      	movs	r2, #0
 8002f44:	2120      	movs	r1, #32
 8002f46:	4812      	ldr	r0, [pc, #72]	@ (8002f90 <MX_GPIO_Init+0xd4>)
 8002f48:	f000 fd0a 	bl	8003960 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002f4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f50:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f52:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002f56:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f5c:	f107 0314 	add.w	r3, r7, #20
 8002f60:	4619      	mov	r1, r3
 8002f62:	480c      	ldr	r0, [pc, #48]	@ (8002f94 <MX_GPIO_Init+0xd8>)
 8002f64:	f000 fb68 	bl	8003638 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8002f68:	2320      	movs	r3, #32
 8002f6a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f74:	2300      	movs	r3, #0
 8002f76:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002f78:	f107 0314 	add.w	r3, r7, #20
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4804      	ldr	r0, [pc, #16]	@ (8002f90 <MX_GPIO_Init+0xd4>)
 8002f80:	f000 fb5a 	bl	8003638 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002f84:	bf00      	nop
 8002f86:	3728      	adds	r7, #40	@ 0x28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	40020000 	.word	0x40020000
 8002f94:	40020800 	.word	0x40020800

08002f98 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f9c:	b672      	cpsid	i
}
 8002f9e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002fa0:	bf00      	nop
 8002fa2:	e7fd      	b.n	8002fa0 <Error_Handler+0x8>

08002fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	607b      	str	r3, [r7, #4]
 8002fae:	4b10      	ldr	r3, [pc, #64]	@ (8002ff0 <HAL_MspInit+0x4c>)
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb2:	4a0f      	ldr	r2, [pc, #60]	@ (8002ff0 <HAL_MspInit+0x4c>)
 8002fb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fba:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff0 <HAL_MspInit+0x4c>)
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fc2:	607b      	str	r3, [r7, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	603b      	str	r3, [r7, #0]
 8002fca:	4b09      	ldr	r3, [pc, #36]	@ (8002ff0 <HAL_MspInit+0x4c>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	4a08      	ldr	r2, [pc, #32]	@ (8002ff0 <HAL_MspInit+0x4c>)
 8002fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fd6:	4b06      	ldr	r3, [pc, #24]	@ (8002ff0 <HAL_MspInit+0x4c>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002fe2:	2007      	movs	r0, #7
 8002fe4:	f000 faf4 	bl	80035d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fe8:	bf00      	nop
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40023800 	.word	0x40023800

08002ff4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08a      	sub	sp, #40	@ 0x28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffc:	f107 0314 	add.w	r3, r7, #20
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a19      	ldr	r2, [pc, #100]	@ (8003078 <HAL_I2C_MspInit+0x84>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d12c      	bne.n	8003070 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	4b18      	ldr	r3, [pc, #96]	@ (800307c <HAL_I2C_MspInit+0x88>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	4a17      	ldr	r2, [pc, #92]	@ (800307c <HAL_I2C_MspInit+0x88>)
 8003020:	f043 0302 	orr.w	r3, r3, #2
 8003024:	6313      	str	r3, [r2, #48]	@ 0x30
 8003026:	4b15      	ldr	r3, [pc, #84]	@ (800307c <HAL_I2C_MspInit+0x88>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003032:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003038:	2312      	movs	r3, #18
 800303a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003040:	2303      	movs	r3, #3
 8003042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003044:	2304      	movs	r3, #4
 8003046:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	4619      	mov	r1, r3
 800304e:	480c      	ldr	r0, [pc, #48]	@ (8003080 <HAL_I2C_MspInit+0x8c>)
 8003050:	f000 faf2 	bl	8003638 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	4b08      	ldr	r3, [pc, #32]	@ (800307c <HAL_I2C_MspInit+0x88>)
 800305a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305c:	4a07      	ldr	r2, [pc, #28]	@ (800307c <HAL_I2C_MspInit+0x88>)
 800305e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003062:	6413      	str	r3, [r2, #64]	@ 0x40
 8003064:	4b05      	ldr	r3, [pc, #20]	@ (800307c <HAL_I2C_MspInit+0x88>)
 8003066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003070:	bf00      	nop
 8003072:	3728      	adds	r7, #40	@ 0x28
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40005400 	.word	0x40005400
 800307c:	40023800 	.word	0x40023800
 8003080:	40020400 	.word	0x40020400

08003084 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08a      	sub	sp, #40	@ 0x28
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800308c:	f107 0314 	add.w	r3, r7, #20
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	609a      	str	r2, [r3, #8]
 8003098:	60da      	str	r2, [r3, #12]
 800309a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a19      	ldr	r2, [pc, #100]	@ (8003108 <HAL_UART_MspInit+0x84>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d12b      	bne.n	80030fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	4b18      	ldr	r3, [pc, #96]	@ (800310c <HAL_UART_MspInit+0x88>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	4a17      	ldr	r2, [pc, #92]	@ (800310c <HAL_UART_MspInit+0x88>)
 80030b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030b6:	4b15      	ldr	r3, [pc, #84]	@ (800310c <HAL_UART_MspInit+0x88>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	4b11      	ldr	r3, [pc, #68]	@ (800310c <HAL_UART_MspInit+0x88>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ca:	4a10      	ldr	r2, [pc, #64]	@ (800310c <HAL_UART_MspInit+0x88>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030d2:	4b0e      	ldr	r3, [pc, #56]	@ (800310c <HAL_UART_MspInit+0x88>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80030de:	230c      	movs	r3, #12
 80030e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e2:	2302      	movs	r3, #2
 80030e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ea:	2303      	movs	r3, #3
 80030ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030ee:	2307      	movs	r3, #7
 80030f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f2:	f107 0314 	add.w	r3, r7, #20
 80030f6:	4619      	mov	r1, r3
 80030f8:	4805      	ldr	r0, [pc, #20]	@ (8003110 <HAL_UART_MspInit+0x8c>)
 80030fa:	f000 fa9d 	bl	8003638 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80030fe:	bf00      	nop
 8003100:	3728      	adds	r7, #40	@ 0x28
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40004400 	.word	0x40004400
 800310c:	40023800 	.word	0x40023800
 8003110:	40020000 	.word	0x40020000

08003114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003118:	bf00      	nop
 800311a:	e7fd      	b.n	8003118 <NMI_Handler+0x4>

0800311c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003120:	bf00      	nop
 8003122:	e7fd      	b.n	8003120 <HardFault_Handler+0x4>

08003124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003128:	bf00      	nop
 800312a:	e7fd      	b.n	8003128 <MemManage_Handler+0x4>

0800312c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003130:	bf00      	nop
 8003132:	e7fd      	b.n	8003130 <BusFault_Handler+0x4>

08003134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003138:	bf00      	nop
 800313a:	e7fd      	b.n	8003138 <UsageFault_Handler+0x4>

0800313c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003140:	bf00      	nop
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800314a:	b480      	push	{r7}
 800314c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800316a:	f000 f93b 	bl	80033e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}

08003172 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0
  return 1;
 8003176:	2301      	movs	r3, #1
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <_kill>:

int _kill(int pid, int sig)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800318c:	f003 fdd2 	bl	8006d34 <__errno>
 8003190:	4603      	mov	r3, r0
 8003192:	2216      	movs	r2, #22
 8003194:	601a      	str	r2, [r3, #0]
  return -1;
 8003196:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <_exit>:

void _exit (int status)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031aa:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7ff ffe7 	bl	8003182 <_kill>
  while (1) {}    /* Make sure we hang here */
 80031b4:	bf00      	nop
 80031b6:	e7fd      	b.n	80031b4 <_exit+0x12>

080031b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	e00a      	b.n	80031e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031ca:	f3af 8000 	nop.w
 80031ce:	4601      	mov	r1, r0
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	60ba      	str	r2, [r7, #8]
 80031d6:	b2ca      	uxtb	r2, r1
 80031d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	3301      	adds	r3, #1
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	dbf0      	blt.n	80031ca <_read+0x12>
  }

  return len;
 80031e8:	687b      	ldr	r3, [r7, #4]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800321a:	605a      	str	r2, [r3, #4]
  return 0;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <_isatty>:

int _isatty(int file)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003232:	2301      	movs	r3, #1
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003264:	4a14      	ldr	r2, [pc, #80]	@ (80032b8 <_sbrk+0x5c>)
 8003266:	4b15      	ldr	r3, [pc, #84]	@ (80032bc <_sbrk+0x60>)
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003270:	4b13      	ldr	r3, [pc, #76]	@ (80032c0 <_sbrk+0x64>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d102      	bne.n	800327e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003278:	4b11      	ldr	r3, [pc, #68]	@ (80032c0 <_sbrk+0x64>)
 800327a:	4a12      	ldr	r2, [pc, #72]	@ (80032c4 <_sbrk+0x68>)
 800327c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800327e:	4b10      	ldr	r3, [pc, #64]	@ (80032c0 <_sbrk+0x64>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4413      	add	r3, r2
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	429a      	cmp	r2, r3
 800328a:	d207      	bcs.n	800329c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800328c:	f003 fd52 	bl	8006d34 <__errno>
 8003290:	4603      	mov	r3, r0
 8003292:	220c      	movs	r2, #12
 8003294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003296:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800329a:	e009      	b.n	80032b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800329c:	4b08      	ldr	r3, [pc, #32]	@ (80032c0 <_sbrk+0x64>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032a2:	4b07      	ldr	r3, [pc, #28]	@ (80032c0 <_sbrk+0x64>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4413      	add	r3, r2
 80032aa:	4a05      	ldr	r2, [pc, #20]	@ (80032c0 <_sbrk+0x64>)
 80032ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032ae:	68fb      	ldr	r3, [r7, #12]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	20020000 	.word	0x20020000
 80032bc:	00000400 	.word	0x00000400
 80032c0:	20000334 	.word	0x20000334
 80032c4:	20000488 	.word	0x20000488

080032c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032cc:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <SystemInit+0x20>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d2:	4a05      	ldr	r2, [pc, #20]	@ (80032e8 <SystemInit+0x20>)
 80032d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032dc:	bf00      	nop
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	e000ed00 	.word	0xe000ed00

080032ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003324 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80032f0:	f7ff ffea 	bl	80032c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032f4:	480c      	ldr	r0, [pc, #48]	@ (8003328 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032f6:	490d      	ldr	r1, [pc, #52]	@ (800332c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003330 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032fc:	e002      	b.n	8003304 <LoopCopyDataInit>

080032fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003302:	3304      	adds	r3, #4

08003304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003308:	d3f9      	bcc.n	80032fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800330a:	4a0a      	ldr	r2, [pc, #40]	@ (8003334 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800330c:	4c0a      	ldr	r4, [pc, #40]	@ (8003338 <LoopFillZerobss+0x22>)
  movs r3, #0
 800330e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003310:	e001      	b.n	8003316 <LoopFillZerobss>

08003312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003314:	3204      	adds	r2, #4

08003316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003318:	d3fb      	bcc.n	8003312 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800331a:	f003 fd11 	bl	8006d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800331e:	f7ff fc29 	bl	8002b74 <main>
  bx  lr    
 8003322:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003324:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800332c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003330:	0800a558 	.word	0x0800a558
  ldr r2, =_sbss
 8003334:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003338:	20000488 	.word	0x20000488

0800333c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800333c:	e7fe      	b.n	800333c <ADC_IRQHandler>
	...

08003340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003344:	4b0e      	ldr	r3, [pc, #56]	@ (8003380 <HAL_Init+0x40>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a0d      	ldr	r2, [pc, #52]	@ (8003380 <HAL_Init+0x40>)
 800334a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800334e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003350:	4b0b      	ldr	r3, [pc, #44]	@ (8003380 <HAL_Init+0x40>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a0a      	ldr	r2, [pc, #40]	@ (8003380 <HAL_Init+0x40>)
 8003356:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800335a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800335c:	4b08      	ldr	r3, [pc, #32]	@ (8003380 <HAL_Init+0x40>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a07      	ldr	r2, [pc, #28]	@ (8003380 <HAL_Init+0x40>)
 8003362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003366:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003368:	2003      	movs	r0, #3
 800336a:	f000 f931 	bl	80035d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800336e:	2000      	movs	r0, #0
 8003370:	f000 f808 	bl	8003384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003374:	f7ff fe16 	bl	8002fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40023c00 	.word	0x40023c00

08003384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800338c:	4b12      	ldr	r3, [pc, #72]	@ (80033d8 <HAL_InitTick+0x54>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	4b12      	ldr	r3, [pc, #72]	@ (80033dc <HAL_InitTick+0x58>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	4619      	mov	r1, r3
 8003396:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800339a:	fbb3 f3f1 	udiv	r3, r3, r1
 800339e:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 f93b 	bl	800361e <HAL_SYSTICK_Config>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e00e      	b.n	80033d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b0f      	cmp	r3, #15
 80033b6:	d80a      	bhi.n	80033ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033b8:	2200      	movs	r2, #0
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033c0:	f000 f911 	bl	80035e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033c4:	4a06      	ldr	r2, [pc, #24]	@ (80033e0 <HAL_InitTick+0x5c>)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e000      	b.n	80033d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	20000000 	.word	0x20000000
 80033dc:	20000008 	.word	0x20000008
 80033e0:	20000004 	.word	0x20000004

080033e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033e8:	4b06      	ldr	r3, [pc, #24]	@ (8003404 <HAL_IncTick+0x20>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	461a      	mov	r2, r3
 80033ee:	4b06      	ldr	r3, [pc, #24]	@ (8003408 <HAL_IncTick+0x24>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4413      	add	r3, r2
 80033f4:	4a04      	ldr	r2, [pc, #16]	@ (8003408 <HAL_IncTick+0x24>)
 80033f6:	6013      	str	r3, [r2, #0]
}
 80033f8:	bf00      	nop
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	20000008 	.word	0x20000008
 8003408:	20000338 	.word	0x20000338

0800340c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  return uwTick;
 8003410:	4b03      	ldr	r3, [pc, #12]	@ (8003420 <HAL_GetTick+0x14>)
 8003412:	681b      	ldr	r3, [r3, #0]
}
 8003414:	4618      	mov	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	20000338 	.word	0x20000338

08003424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800342c:	f7ff ffee 	bl	800340c <HAL_GetTick>
 8003430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800343c:	d005      	beq.n	800344a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800343e:	4b0a      	ldr	r3, [pc, #40]	@ (8003468 <HAL_Delay+0x44>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4413      	add	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800344a:	bf00      	nop
 800344c:	f7ff ffde 	bl	800340c <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	429a      	cmp	r2, r3
 800345a:	d8f7      	bhi.n	800344c <HAL_Delay+0x28>
  {
  }
}
 800345c:	bf00      	nop
 800345e:	bf00      	nop
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000008 	.word	0x20000008

0800346c <__NVIC_SetPriorityGrouping>:
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800347c:	4b0c      	ldr	r3, [pc, #48]	@ (80034b0 <__NVIC_SetPriorityGrouping+0x44>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003488:	4013      	ands	r3, r2
 800348a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003494:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800349c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800349e:	4a04      	ldr	r2, [pc, #16]	@ (80034b0 <__NVIC_SetPriorityGrouping+0x44>)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	60d3      	str	r3, [r2, #12]
}
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <__NVIC_GetPriorityGrouping>:
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034b8:	4b04      	ldr	r3, [pc, #16]	@ (80034cc <__NVIC_GetPriorityGrouping+0x18>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	0a1b      	lsrs	r3, r3, #8
 80034be:	f003 0307 	and.w	r3, r3, #7
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <__NVIC_SetPriority>:
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	6039      	str	r1, [r7, #0]
 80034da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	db0a      	blt.n	80034fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	490c      	ldr	r1, [pc, #48]	@ (800351c <__NVIC_SetPriority+0x4c>)
 80034ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ee:	0112      	lsls	r2, r2, #4
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	440b      	add	r3, r1
 80034f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80034f8:	e00a      	b.n	8003510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	4908      	ldr	r1, [pc, #32]	@ (8003520 <__NVIC_SetPriority+0x50>)
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	3b04      	subs	r3, #4
 8003508:	0112      	lsls	r2, r2, #4
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	440b      	add	r3, r1
 800350e:	761a      	strb	r2, [r3, #24]
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	e000e100 	.word	0xe000e100
 8003520:	e000ed00 	.word	0xe000ed00

08003524 <NVIC_EncodePriority>:
{
 8003524:	b480      	push	{r7}
 8003526:	b089      	sub	sp, #36	@ 0x24
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f1c3 0307 	rsb	r3, r3, #7
 800353e:	2b04      	cmp	r3, #4
 8003540:	bf28      	it	cs
 8003542:	2304      	movcs	r3, #4
 8003544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	3304      	adds	r3, #4
 800354a:	2b06      	cmp	r3, #6
 800354c:	d902      	bls.n	8003554 <NVIC_EncodePriority+0x30>
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	3b03      	subs	r3, #3
 8003552:	e000      	b.n	8003556 <NVIC_EncodePriority+0x32>
 8003554:	2300      	movs	r3, #0
 8003556:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003558:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43da      	mvns	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	401a      	ands	r2, r3
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800356c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	fa01 f303 	lsl.w	r3, r1, r3
 8003576:	43d9      	mvns	r1, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800357c:	4313      	orrs	r3, r2
}
 800357e:	4618      	mov	r0, r3
 8003580:	3724      	adds	r7, #36	@ 0x24
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
	...

0800358c <SysTick_Config>:
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3b01      	subs	r3, #1
 8003598:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800359c:	d301      	bcc.n	80035a2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800359e:	2301      	movs	r3, #1
 80035a0:	e00f      	b.n	80035c2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035a2:	4a0a      	ldr	r2, [pc, #40]	@ (80035cc <SysTick_Config+0x40>)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035aa:	210f      	movs	r1, #15
 80035ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035b0:	f7ff ff8e 	bl	80034d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035b4:	4b05      	ldr	r3, [pc, #20]	@ (80035cc <SysTick_Config+0x40>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ba:	4b04      	ldr	r3, [pc, #16]	@ (80035cc <SysTick_Config+0x40>)
 80035bc:	2207      	movs	r2, #7
 80035be:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	e000e010 	.word	0xe000e010

080035d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff ff47 	bl	800346c <__NVIC_SetPriorityGrouping>
}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b086      	sub	sp, #24
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	4603      	mov	r3, r0
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035f8:	f7ff ff5c 	bl	80034b4 <__NVIC_GetPriorityGrouping>
 80035fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	6978      	ldr	r0, [r7, #20]
 8003604:	f7ff ff8e 	bl	8003524 <NVIC_EncodePriority>
 8003608:	4602      	mov	r2, r0
 800360a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800360e:	4611      	mov	r1, r2
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff ff5d 	bl	80034d0 <__NVIC_SetPriority>
}
 8003616:	bf00      	nop
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff ffb0 	bl	800358c <SysTick_Config>
 800362c:	4603      	mov	r3, r0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003638:	b480      	push	{r7}
 800363a:	b089      	sub	sp, #36	@ 0x24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003646:	2300      	movs	r3, #0
 8003648:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800364a:	2300      	movs	r3, #0
 800364c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
 8003652:	e165      	b.n	8003920 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003654:	2201      	movs	r2, #1
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	4013      	ands	r3, r2
 8003666:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	429a      	cmp	r2, r3
 800366e:	f040 8154 	bne.w	800391a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	2b01      	cmp	r3, #1
 800367c:	d005      	beq.n	800368a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003686:	2b02      	cmp	r3, #2
 8003688:	d130      	bne.n	80036ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	2203      	movs	r2, #3
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43db      	mvns	r3, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4013      	ands	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036c0:	2201      	movs	r2, #1
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	091b      	lsrs	r3, r3, #4
 80036d6:	f003 0201 	and.w	r2, r3, #1
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d017      	beq.n	8003728 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	2203      	movs	r2, #3
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4013      	ands	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 0303 	and.w	r3, r3, #3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d123      	bne.n	800377c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	08da      	lsrs	r2, r3, #3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3208      	adds	r2, #8
 800373c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003740:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	220f      	movs	r2, #15
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4013      	ands	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	08da      	lsrs	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3208      	adds	r2, #8
 8003776:	69b9      	ldr	r1, [r7, #24]
 8003778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	2203      	movs	r2, #3
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4013      	ands	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 0203 	and.w	r2, r3, #3
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 80ae 	beq.w	800391a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003938 <HAL_GPIO_Init+0x300>)
 80037c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c6:	4a5c      	ldr	r2, [pc, #368]	@ (8003938 <HAL_GPIO_Init+0x300>)
 80037c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80037ce:	4b5a      	ldr	r3, [pc, #360]	@ (8003938 <HAL_GPIO_Init+0x300>)
 80037d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037da:	4a58      	ldr	r2, [pc, #352]	@ (800393c <HAL_GPIO_Init+0x304>)
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	089b      	lsrs	r3, r3, #2
 80037e0:	3302      	adds	r3, #2
 80037e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	220f      	movs	r2, #15
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	43db      	mvns	r3, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4013      	ands	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a4f      	ldr	r2, [pc, #316]	@ (8003940 <HAL_GPIO_Init+0x308>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d025      	beq.n	8003852 <HAL_GPIO_Init+0x21a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a4e      	ldr	r2, [pc, #312]	@ (8003944 <HAL_GPIO_Init+0x30c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d01f      	beq.n	800384e <HAL_GPIO_Init+0x216>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a4d      	ldr	r2, [pc, #308]	@ (8003948 <HAL_GPIO_Init+0x310>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d019      	beq.n	800384a <HAL_GPIO_Init+0x212>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a4c      	ldr	r2, [pc, #304]	@ (800394c <HAL_GPIO_Init+0x314>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d013      	beq.n	8003846 <HAL_GPIO_Init+0x20e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a4b      	ldr	r2, [pc, #300]	@ (8003950 <HAL_GPIO_Init+0x318>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00d      	beq.n	8003842 <HAL_GPIO_Init+0x20a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a4a      	ldr	r2, [pc, #296]	@ (8003954 <HAL_GPIO_Init+0x31c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d007      	beq.n	800383e <HAL_GPIO_Init+0x206>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a49      	ldr	r2, [pc, #292]	@ (8003958 <HAL_GPIO_Init+0x320>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d101      	bne.n	800383a <HAL_GPIO_Init+0x202>
 8003836:	2306      	movs	r3, #6
 8003838:	e00c      	b.n	8003854 <HAL_GPIO_Init+0x21c>
 800383a:	2307      	movs	r3, #7
 800383c:	e00a      	b.n	8003854 <HAL_GPIO_Init+0x21c>
 800383e:	2305      	movs	r3, #5
 8003840:	e008      	b.n	8003854 <HAL_GPIO_Init+0x21c>
 8003842:	2304      	movs	r3, #4
 8003844:	e006      	b.n	8003854 <HAL_GPIO_Init+0x21c>
 8003846:	2303      	movs	r3, #3
 8003848:	e004      	b.n	8003854 <HAL_GPIO_Init+0x21c>
 800384a:	2302      	movs	r3, #2
 800384c:	e002      	b.n	8003854 <HAL_GPIO_Init+0x21c>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <HAL_GPIO_Init+0x21c>
 8003852:	2300      	movs	r3, #0
 8003854:	69fa      	ldr	r2, [r7, #28]
 8003856:	f002 0203 	and.w	r2, r2, #3
 800385a:	0092      	lsls	r2, r2, #2
 800385c:	4093      	lsls	r3, r2
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4313      	orrs	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003864:	4935      	ldr	r1, [pc, #212]	@ (800393c <HAL_GPIO_Init+0x304>)
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	089b      	lsrs	r3, r3, #2
 800386a:	3302      	adds	r3, #2
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003872:	4b3a      	ldr	r3, [pc, #232]	@ (800395c <HAL_GPIO_Init+0x324>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	43db      	mvns	r3, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4013      	ands	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003896:	4a31      	ldr	r2, [pc, #196]	@ (800395c <HAL_GPIO_Init+0x324>)
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800389c:	4b2f      	ldr	r3, [pc, #188]	@ (800395c <HAL_GPIO_Init+0x324>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	43db      	mvns	r3, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4013      	ands	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038c0:	4a26      	ldr	r2, [pc, #152]	@ (800395c <HAL_GPIO_Init+0x324>)
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038c6:	4b25      	ldr	r3, [pc, #148]	@ (800395c <HAL_GPIO_Init+0x324>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	43db      	mvns	r3, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4013      	ands	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038ea:	4a1c      	ldr	r2, [pc, #112]	@ (800395c <HAL_GPIO_Init+0x324>)
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038f0:	4b1a      	ldr	r3, [pc, #104]	@ (800395c <HAL_GPIO_Init+0x324>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003914:	4a11      	ldr	r2, [pc, #68]	@ (800395c <HAL_GPIO_Init+0x324>)
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	3301      	adds	r3, #1
 800391e:	61fb      	str	r3, [r7, #28]
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	2b0f      	cmp	r3, #15
 8003924:	f67f ae96 	bls.w	8003654 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003928:	bf00      	nop
 800392a:	bf00      	nop
 800392c:	3724      	adds	r7, #36	@ 0x24
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40023800 	.word	0x40023800
 800393c:	40013800 	.word	0x40013800
 8003940:	40020000 	.word	0x40020000
 8003944:	40020400 	.word	0x40020400
 8003948:	40020800 	.word	0x40020800
 800394c:	40020c00 	.word	0x40020c00
 8003950:	40021000 	.word	0x40021000
 8003954:	40021400 	.word	0x40021400
 8003958:	40021800 	.word	0x40021800
 800395c:	40013c00 	.word	0x40013c00

08003960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	807b      	strh	r3, [r7, #2]
 800396c:	4613      	mov	r3, r2
 800396e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003970:	787b      	ldrb	r3, [r7, #1]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003976:	887a      	ldrh	r2, [r7, #2]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800397c:	e003      	b.n	8003986 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800397e:	887b      	ldrh	r3, [r7, #2]
 8003980:	041a      	lsls	r2, r3, #16
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	619a      	str	r2, [r3, #24]
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
	...

08003994 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e12b      	b.n	8003bfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d106      	bne.n	80039c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff fb1a 	bl	8002ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2224      	movs	r2, #36	@ 0x24
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0201 	bic.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039f8:	f001 fa48 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 80039fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	4a81      	ldr	r2, [pc, #516]	@ (8003c08 <HAL_I2C_Init+0x274>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d807      	bhi.n	8003a18 <HAL_I2C_Init+0x84>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4a80      	ldr	r2, [pc, #512]	@ (8003c0c <HAL_I2C_Init+0x278>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	bf94      	ite	ls
 8003a10:	2301      	movls	r3, #1
 8003a12:	2300      	movhi	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	e006      	b.n	8003a26 <HAL_I2C_Init+0x92>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4a7d      	ldr	r2, [pc, #500]	@ (8003c10 <HAL_I2C_Init+0x27c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	bf94      	ite	ls
 8003a20:	2301      	movls	r3, #1
 8003a22:	2300      	movhi	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e0e7      	b.n	8003bfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4a78      	ldr	r2, [pc, #480]	@ (8003c14 <HAL_I2C_Init+0x280>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	0c9b      	lsrs	r3, r3, #18
 8003a38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4a6a      	ldr	r2, [pc, #424]	@ (8003c08 <HAL_I2C_Init+0x274>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d802      	bhi.n	8003a68 <HAL_I2C_Init+0xd4>
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	3301      	adds	r3, #1
 8003a66:	e009      	b.n	8003a7c <HAL_I2C_Init+0xe8>
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a6e:	fb02 f303 	mul.w	r3, r2, r3
 8003a72:	4a69      	ldr	r2, [pc, #420]	@ (8003c18 <HAL_I2C_Init+0x284>)
 8003a74:	fba2 2303 	umull	r2, r3, r2, r3
 8003a78:	099b      	lsrs	r3, r3, #6
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	430b      	orrs	r3, r1
 8003a82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	495c      	ldr	r1, [pc, #368]	@ (8003c08 <HAL_I2C_Init+0x274>)
 8003a98:	428b      	cmp	r3, r1
 8003a9a:	d819      	bhi.n	8003ad0 <HAL_I2C_Init+0x13c>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	1e59      	subs	r1, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aaa:	1c59      	adds	r1, r3, #1
 8003aac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ab0:	400b      	ands	r3, r1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HAL_I2C_Init+0x138>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1e59      	subs	r1, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aca:	e051      	b.n	8003b70 <HAL_I2C_Init+0x1dc>
 8003acc:	2304      	movs	r3, #4
 8003ace:	e04f      	b.n	8003b70 <HAL_I2C_Init+0x1dc>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d111      	bne.n	8003afc <HAL_I2C_Init+0x168>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	1e58      	subs	r0, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6859      	ldr	r1, [r3, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	440b      	add	r3, r1
 8003ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aea:	3301      	adds	r3, #1
 8003aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf0c      	ite	eq
 8003af4:	2301      	moveq	r3, #1
 8003af6:	2300      	movne	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	e012      	b.n	8003b22 <HAL_I2C_Init+0x18e>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	1e58      	subs	r0, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6859      	ldr	r1, [r3, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	0099      	lsls	r1, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b12:	3301      	adds	r3, #1
 8003b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bf0c      	ite	eq
 8003b1c:	2301      	moveq	r3, #1
 8003b1e:	2300      	movne	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_I2C_Init+0x196>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e022      	b.n	8003b70 <HAL_I2C_Init+0x1dc>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10e      	bne.n	8003b50 <HAL_I2C_Init+0x1bc>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1e58      	subs	r0, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6859      	ldr	r1, [r3, #4]
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	440b      	add	r3, r1
 8003b40:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b44:	3301      	adds	r3, #1
 8003b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b4e:	e00f      	b.n	8003b70 <HAL_I2C_Init+0x1dc>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1e58      	subs	r0, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6859      	ldr	r1, [r3, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	0099      	lsls	r1, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b66:	3301      	adds	r3, #1
 8003b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	6809      	ldr	r1, [r1, #0]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69da      	ldr	r2, [r3, #28]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6911      	ldr	r1, [r2, #16]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	68d2      	ldr	r2, [r2, #12]
 8003baa:	4311      	orrs	r1, r2
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6812      	ldr	r2, [r2, #0]
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	000186a0 	.word	0x000186a0
 8003c0c:	001e847f 	.word	0x001e847f
 8003c10:	003d08ff 	.word	0x003d08ff
 8003c14:	431bde83 	.word	0x431bde83
 8003c18:	10624dd3 	.word	0x10624dd3

08003c1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	607a      	str	r2, [r7, #4]
 8003c26:	461a      	mov	r2, r3
 8003c28:	460b      	mov	r3, r1
 8003c2a:	817b      	strh	r3, [r7, #10]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c30:	f7ff fbec 	bl	800340c <HAL_GetTick>
 8003c34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b20      	cmp	r3, #32
 8003c40:	f040 80e0 	bne.w	8003e04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	2319      	movs	r3, #25
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	4970      	ldr	r1, [pc, #448]	@ (8003e10 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 fdf4 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e0d3      	b.n	8003e06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_I2C_Master_Transmit+0x50>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e0cc      	b.n	8003e06 <HAL_I2C_Master_Transmit+0x1ea>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d007      	beq.n	8003c92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f042 0201 	orr.w	r2, r2, #1
 8003c90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ca0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2221      	movs	r2, #33	@ 0x21
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2210      	movs	r2, #16
 8003cae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	893a      	ldrh	r2, [r7, #8]
 8003cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	4a50      	ldr	r2, [pc, #320]	@ (8003e14 <HAL_I2C_Master_Transmit+0x1f8>)
 8003cd2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cd4:	8979      	ldrh	r1, [r7, #10]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	6a3a      	ldr	r2, [r7, #32]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 fbc8 	bl	8004470 <I2C_MasterRequestWrite>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e08d      	b.n	8003e06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cea:	2300      	movs	r3, #0
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	613b      	str	r3, [r7, #16]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d00:	e066      	b.n	8003dd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	6a39      	ldr	r1, [r7, #32]
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 feb2 	bl	8004a70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00d      	beq.n	8003d2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d107      	bne.n	8003d2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e06b      	b.n	8003e06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d32:	781a      	ldrb	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d11b      	bne.n	8003da4 <HAL_I2C_Master_Transmit+0x188>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d017      	beq.n	8003da4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d78:	781a      	ldrb	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	6a39      	ldr	r1, [r7, #32]
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fea9 	bl	8004b00 <I2C_WaitOnBTFFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00d      	beq.n	8003dd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d107      	bne.n	8003dcc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e01a      	b.n	8003e06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d194      	bne.n	8003d02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	e000      	b.n	8003e06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e04:	2302      	movs	r3, #2
  }
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	00100002 	.word	0x00100002
 8003e14:	ffff0000 	.word	0xffff0000

08003e18 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08c      	sub	sp, #48	@ 0x30
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	607a      	str	r2, [r7, #4]
 8003e22:	461a      	mov	r2, r3
 8003e24:	460b      	mov	r3, r1
 8003e26:	817b      	strh	r3, [r7, #10]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e2c:	f7ff faee 	bl	800340c <HAL_GetTick>
 8003e30:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	f040 8217 	bne.w	800426e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	2319      	movs	r3, #25
 8003e46:	2201      	movs	r2, #1
 8003e48:	497c      	ldr	r1, [pc, #496]	@ (800403c <HAL_I2C_Master_Receive+0x224>)
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 fcf6 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003e56:	2302      	movs	r3, #2
 8003e58:	e20a      	b.n	8004270 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_I2C_Master_Receive+0x50>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e203      	b.n	8004270 <HAL_I2C_Master_Receive+0x458>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d007      	beq.n	8003e8e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0201 	orr.w	r2, r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2222      	movs	r2, #34	@ 0x22
 8003ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2210      	movs	r2, #16
 8003eaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	893a      	ldrh	r2, [r7, #8]
 8003ebe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4a5c      	ldr	r2, [pc, #368]	@ (8004040 <HAL_I2C_Master_Receive+0x228>)
 8003ece:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ed0:	8979      	ldrh	r1, [r7, #10]
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 fb4c 	bl	8004574 <I2C_MasterRequestRead>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e1c4      	b.n	8004270 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d113      	bne.n	8003f16 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eee:	2300      	movs	r3, #0
 8003ef0:	623b      	str	r3, [r7, #32]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	623b      	str	r3, [r7, #32]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	623b      	str	r3, [r7, #32]
 8003f02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	e198      	b.n	8004248 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d11b      	bne.n	8003f56 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61fb      	str	r3, [r7, #28]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	61fb      	str	r3, [r7, #28]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	61fb      	str	r3, [r7, #28]
 8003f42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	e178      	b.n	8004248 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d11b      	bne.n	8003f96 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61bb      	str	r3, [r7, #24]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	61bb      	str	r3, [r7, #24]
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	e158      	b.n	8004248 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	617b      	str	r3, [r7, #20]
 8003fba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003fbc:	e144      	b.n	8004248 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	f200 80f1 	bhi.w	80041aa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d123      	bne.n	8004018 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 fddb 	bl	8004b90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e145      	b.n	8004270 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400c:	b29b      	uxth	r3, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004016:	e117      	b.n	8004248 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401c:	2b02      	cmp	r3, #2
 800401e:	d14e      	bne.n	80040be <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004026:	2200      	movs	r2, #0
 8004028:	4906      	ldr	r1, [pc, #24]	@ (8004044 <HAL_I2C_Master_Receive+0x22c>)
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 fc06 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d008      	beq.n	8004048 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e11a      	b.n	8004270 <HAL_I2C_Master_Receive+0x458>
 800403a:	bf00      	nop
 800403c:	00100002 	.word	0x00100002
 8004040:	ffff0000 	.word	0xffff0000
 8004044:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004056:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004080:	b29b      	uxth	r3, r3
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040bc:	e0c4      	b.n	8004248 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c4:	2200      	movs	r2, #0
 80040c6:	496c      	ldr	r1, [pc, #432]	@ (8004278 <HAL_I2C_Master_Receive+0x460>)
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 fbb7 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0cb      	b.n	8004270 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004120:	2200      	movs	r2, #0
 8004122:	4955      	ldr	r1, [pc, #340]	@ (8004278 <HAL_I2C_Master_Receive+0x460>)
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 fb89 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e09d      	b.n	8004270 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004142:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041a8:	e04e      	b.n	8004248 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 fcee 	bl	8004b90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e058      	b.n	8004270 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c8:	b2d2      	uxtb	r2, r2
 80041ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	f003 0304 	and.w	r3, r3, #4
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d124      	bne.n	8004248 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004202:	2b03      	cmp	r3, #3
 8004204:	d107      	bne.n	8004216 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004214:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424c:	2b00      	cmp	r3, #0
 800424e:	f47f aeb6 	bne.w	8003fbe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2220      	movs	r2, #32
 8004256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	e000      	b.n	8004270 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800426e:	2302      	movs	r3, #2
  }
}
 8004270:	4618      	mov	r0, r3
 8004272:	3728      	adds	r7, #40	@ 0x28
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	00010004 	.word	0x00010004

0800427c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af02      	add	r7, sp, #8
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	4608      	mov	r0, r1
 8004286:	4611      	mov	r1, r2
 8004288:	461a      	mov	r2, r3
 800428a:	4603      	mov	r3, r0
 800428c:	817b      	strh	r3, [r7, #10]
 800428e:	460b      	mov	r3, r1
 8004290:	813b      	strh	r3, [r7, #8]
 8004292:	4613      	mov	r3, r2
 8004294:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004296:	f7ff f8b9 	bl	800340c <HAL_GetTick>
 800429a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	f040 80d9 	bne.w	800445c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	2319      	movs	r3, #25
 80042b0:	2201      	movs	r2, #1
 80042b2:	496d      	ldr	r1, [pc, #436]	@ (8004468 <HAL_I2C_Mem_Write+0x1ec>)
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 fac1 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80042c0:	2302      	movs	r3, #2
 80042c2:	e0cc      	b.n	800445e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_I2C_Mem_Write+0x56>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e0c5      	b.n	800445e <HAL_I2C_Mem_Write+0x1e2>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d007      	beq.n	80042f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004306:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2221      	movs	r2, #33	@ 0x21
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2240      	movs	r2, #64	@ 0x40
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a3a      	ldr	r2, [r7, #32]
 8004322:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004328:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4a4d      	ldr	r2, [pc, #308]	@ (800446c <HAL_I2C_Mem_Write+0x1f0>)
 8004338:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800433a:	88f8      	ldrh	r0, [r7, #6]
 800433c:	893a      	ldrh	r2, [r7, #8]
 800433e:	8979      	ldrh	r1, [r7, #10]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	9301      	str	r3, [sp, #4]
 8004344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	4603      	mov	r3, r0
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 f9e0 	bl	8004710 <I2C_RequestMemoryWrite>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d052      	beq.n	80043fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e081      	b.n	800445e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 fb86 	bl	8004a70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00d      	beq.n	8004386 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436e:	2b04      	cmp	r3, #4
 8004370:	d107      	bne.n	8004382 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004380:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e06b      	b.n	800445e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438a:	781a      	ldrb	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d11b      	bne.n	80043fc <HAL_I2C_Mem_Write+0x180>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d017      	beq.n	80043fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d0:	781a      	ldrb	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1aa      	bne.n	800435a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 fb79 	bl	8004b00 <I2C_WaitOnBTFFlagUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00d      	beq.n	8004430 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004418:	2b04      	cmp	r3, #4
 800441a:	d107      	bne.n	800442c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800442a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e016      	b.n	800445e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800443e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	e000      	b.n	800445e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800445c:	2302      	movs	r3, #2
  }
}
 800445e:	4618      	mov	r0, r3
 8004460:	3718      	adds	r7, #24
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	00100002 	.word	0x00100002
 800446c:	ffff0000 	.word	0xffff0000

08004470 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af02      	add	r7, sp, #8
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	607a      	str	r2, [r7, #4]
 800447a:	603b      	str	r3, [r7, #0]
 800447c:	460b      	mov	r3, r1
 800447e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004484:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b08      	cmp	r3, #8
 800448a:	d006      	beq.n	800449a <I2C_MasterRequestWrite+0x2a>
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d003      	beq.n	800449a <I2C_MasterRequestWrite+0x2a>
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004498:	d108      	bne.n	80044ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	e00b      	b.n	80044c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b0:	2b12      	cmp	r3, #18
 80044b2:	d107      	bne.n	80044c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f9b3 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00d      	beq.n	80044f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044ea:	d103      	bne.n	80044f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e035      	b.n	8004564 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004500:	d108      	bne.n	8004514 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004502:	897b      	ldrh	r3, [r7, #10]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004510:	611a      	str	r2, [r3, #16]
 8004512:	e01b      	b.n	800454c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004514:	897b      	ldrh	r3, [r7, #10]
 8004516:	11db      	asrs	r3, r3, #7
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f003 0306 	and.w	r3, r3, #6
 800451e:	b2db      	uxtb	r3, r3
 8004520:	f063 030f 	orn	r3, r3, #15
 8004524:	b2da      	uxtb	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	490e      	ldr	r1, [pc, #56]	@ (800456c <I2C_MasterRequestWrite+0xfc>)
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 f9fc 	bl	8004930 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e010      	b.n	8004564 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004542:	897b      	ldrh	r3, [r7, #10]
 8004544:	b2da      	uxtb	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	4907      	ldr	r1, [pc, #28]	@ (8004570 <I2C_MasterRequestWrite+0x100>)
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 f9ec 	bl	8004930 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	00010008 	.word	0x00010008
 8004570:	00010002 	.word	0x00010002

08004574 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af02      	add	r7, sp, #8
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	607a      	str	r2, [r7, #4]
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	460b      	mov	r3, r1
 8004582:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004588:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004598:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b08      	cmp	r3, #8
 800459e:	d006      	beq.n	80045ae <I2C_MasterRequestRead+0x3a>
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d003      	beq.n	80045ae <I2C_MasterRequestRead+0x3a>
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045ac:	d108      	bne.n	80045c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	e00b      	b.n	80045d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c4:	2b11      	cmp	r3, #17
 80045c6:	d107      	bne.n	80045d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f929 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00d      	beq.n	800460c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045fe:	d103      	bne.n	8004608 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004606:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e079      	b.n	8004700 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004614:	d108      	bne.n	8004628 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004616:	897b      	ldrh	r3, [r7, #10]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	b2da      	uxtb	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	611a      	str	r2, [r3, #16]
 8004626:	e05f      	b.n	80046e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004628:	897b      	ldrh	r3, [r7, #10]
 800462a:	11db      	asrs	r3, r3, #7
 800462c:	b2db      	uxtb	r3, r3
 800462e:	f003 0306 	and.w	r3, r3, #6
 8004632:	b2db      	uxtb	r3, r3
 8004634:	f063 030f 	orn	r3, r3, #15
 8004638:	b2da      	uxtb	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	4930      	ldr	r1, [pc, #192]	@ (8004708 <I2C_MasterRequestRead+0x194>)
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f972 	bl	8004930 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e054      	b.n	8004700 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004656:	897b      	ldrh	r3, [r7, #10]
 8004658:	b2da      	uxtb	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	4929      	ldr	r1, [pc, #164]	@ (800470c <I2C_MasterRequestRead+0x198>)
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f962 	bl	8004930 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e044      	b.n	8004700 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004676:	2300      	movs	r3, #0
 8004678:	613b      	str	r3, [r7, #16]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800469a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 f8c7 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00d      	beq.n	80046d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046c2:	d103      	bne.n	80046cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046ca:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e017      	b.n	8004700 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80046d0:	897b      	ldrh	r3, [r7, #10]
 80046d2:	11db      	asrs	r3, r3, #7
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	f003 0306 	and.w	r3, r3, #6
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	f063 030e 	orn	r3, r3, #14
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	4907      	ldr	r1, [pc, #28]	@ (800470c <I2C_MasterRequestRead+0x198>)
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 f91e 	bl	8004930 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	00010008 	.word	0x00010008
 800470c:	00010002 	.word	0x00010002

08004710 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af02      	add	r7, sp, #8
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	4608      	mov	r0, r1
 800471a:	4611      	mov	r1, r2
 800471c:	461a      	mov	r2, r3
 800471e:	4603      	mov	r3, r0
 8004720:	817b      	strh	r3, [r7, #10]
 8004722:	460b      	mov	r3, r1
 8004724:	813b      	strh	r3, [r7, #8]
 8004726:	4613      	mov	r3, r2
 8004728:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004738:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	2200      	movs	r2, #0
 8004742:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f878 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00d      	beq.n	800476e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800475c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004760:	d103      	bne.n	800476a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004768:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e05f      	b.n	800482e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800476e:	897b      	ldrh	r3, [r7, #10]
 8004770:	b2db      	uxtb	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800477c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800477e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004780:	6a3a      	ldr	r2, [r7, #32]
 8004782:	492d      	ldr	r1, [pc, #180]	@ (8004838 <I2C_RequestMemoryWrite+0x128>)
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f8d3 	bl	8004930 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e04c      	b.n	800482e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ac:	6a39      	ldr	r1, [r7, #32]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 f95e 	bl	8004a70 <I2C_WaitOnTXEFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00d      	beq.n	80047d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d107      	bne.n	80047d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e02b      	b.n	800482e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047d6:	88fb      	ldrh	r3, [r7, #6]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d105      	bne.n	80047e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047dc:	893b      	ldrh	r3, [r7, #8]
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	611a      	str	r2, [r3, #16]
 80047e6:	e021      	b.n	800482c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047e8:	893b      	ldrh	r3, [r7, #8]
 80047ea:	0a1b      	lsrs	r3, r3, #8
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047f8:	6a39      	ldr	r1, [r7, #32]
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f938 	bl	8004a70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00d      	beq.n	8004822 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480a:	2b04      	cmp	r3, #4
 800480c:	d107      	bne.n	800481e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800481c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e005      	b.n	800482e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004822:	893b      	ldrh	r3, [r7, #8]
 8004824:	b2da      	uxtb	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	00010002 	.word	0x00010002

0800483c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	4613      	mov	r3, r2
 800484a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800484c:	e048      	b.n	80048e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004854:	d044      	beq.n	80048e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004856:	f7fe fdd9 	bl	800340c <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d302      	bcc.n	800486c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d139      	bne.n	80048e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	0c1b      	lsrs	r3, r3, #16
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b01      	cmp	r3, #1
 8004874:	d10d      	bne.n	8004892 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	43da      	mvns	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	4013      	ands	r3, r2
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	bf0c      	ite	eq
 8004888:	2301      	moveq	r3, #1
 800488a:	2300      	movne	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	e00c      	b.n	80048ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	43da      	mvns	r2, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4013      	ands	r3, r2
 800489e:	b29b      	uxth	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	bf0c      	ite	eq
 80048a4:	2301      	moveq	r3, #1
 80048a6:	2300      	movne	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	79fb      	ldrb	r3, [r7, #7]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d116      	bne.n	80048e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048cc:	f043 0220 	orr.w	r2, r3, #32
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e023      	b.n	8004928 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	0c1b      	lsrs	r3, r3, #16
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d10d      	bne.n	8004906 <I2C_WaitOnFlagUntilTimeout+0xca>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	43da      	mvns	r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	4013      	ands	r3, r2
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	bf0c      	ite	eq
 80048fc:	2301      	moveq	r3, #1
 80048fe:	2300      	movne	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	e00c      	b.n	8004920 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	43da      	mvns	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	4013      	ands	r3, r2
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	bf0c      	ite	eq
 8004918:	2301      	moveq	r3, #1
 800491a:	2300      	movne	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	461a      	mov	r2, r3
 8004920:	79fb      	ldrb	r3, [r7, #7]
 8004922:	429a      	cmp	r2, r3
 8004924:	d093      	beq.n	800484e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800493e:	e071      	b.n	8004a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800494a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800494e:	d123      	bne.n	8004998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800495e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004968:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004984:	f043 0204 	orr.w	r2, r3, #4
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e067      	b.n	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800499e:	d041      	beq.n	8004a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a0:	f7fe fd34 	bl	800340c <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d302      	bcc.n	80049b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d136      	bne.n	8004a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	0c1b      	lsrs	r3, r3, #16
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d10c      	bne.n	80049da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	43da      	mvns	r2, r3
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	4013      	ands	r3, r2
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	bf14      	ite	ne
 80049d2:	2301      	movne	r3, #1
 80049d4:	2300      	moveq	r3, #0
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	e00b      	b.n	80049f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	43da      	mvns	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4013      	ands	r3, r2
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bf14      	ite	ne
 80049ec:	2301      	movne	r3, #1
 80049ee:	2300      	moveq	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d016      	beq.n	8004a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a10:	f043 0220 	orr.w	r2, r3, #32
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e021      	b.n	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	0c1b      	lsrs	r3, r3, #16
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d10c      	bne.n	8004a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	43da      	mvns	r2, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	bf14      	ite	ne
 8004a40:	2301      	movne	r3, #1
 8004a42:	2300      	moveq	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	e00b      	b.n	8004a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	43da      	mvns	r2, r3
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4013      	ands	r3, r2
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	bf14      	ite	ne
 8004a5a:	2301      	movne	r3, #1
 8004a5c:	2300      	moveq	r3, #0
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f47f af6d 	bne.w	8004940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a7c:	e034      	b.n	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 f8e3 	bl	8004c4a <I2C_IsAcknowledgeFailed>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e034      	b.n	8004af8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a94:	d028      	beq.n	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a96:	f7fe fcb9 	bl	800340c <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d302      	bcc.n	8004aac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d11d      	bne.n	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab6:	2b80      	cmp	r3, #128	@ 0x80
 8004ab8:	d016      	beq.n	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad4:	f043 0220 	orr.w	r2, r3, #32
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e007      	b.n	8004af8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af2:	2b80      	cmp	r3, #128	@ 0x80
 8004af4:	d1c3      	bne.n	8004a7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b0c:	e034      	b.n	8004b78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 f89b 	bl	8004c4a <I2C_IsAcknowledgeFailed>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e034      	b.n	8004b88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b24:	d028      	beq.n	8004b78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b26:	f7fe fc71 	bl	800340c <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d302      	bcc.n	8004b3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d11d      	bne.n	8004b78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d016      	beq.n	8004b78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b64:	f043 0220 	orr.w	r2, r3, #32
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e007      	b.n	8004b88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d1c3      	bne.n	8004b0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b9c:	e049      	b.n	8004c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b10      	cmp	r3, #16
 8004baa:	d119      	bne.n	8004be0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0210 	mvn.w	r2, #16
 8004bb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e030      	b.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be0:	f7fe fc14 	bl	800340c <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d302      	bcc.n	8004bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d11d      	bne.n	8004c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c00:	2b40      	cmp	r3, #64	@ 0x40
 8004c02:	d016      	beq.n	8004c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1e:	f043 0220 	orr.w	r2, r3, #32
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e007      	b.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c3c:	2b40      	cmp	r3, #64	@ 0x40
 8004c3e:	d1ae      	bne.n	8004b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c60:	d11b      	bne.n	8004c9a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c6a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c86:	f043 0204 	orr.w	r2, r3, #4
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e0cc      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cbc:	4b68      	ldr	r3, [pc, #416]	@ (8004e60 <HAL_RCC_ClockConfig+0x1b8>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d90c      	bls.n	8004ce4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cca:	4b65      	ldr	r3, [pc, #404]	@ (8004e60 <HAL_RCC_ClockConfig+0x1b8>)
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd2:	4b63      	ldr	r3, [pc, #396]	@ (8004e60 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d001      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e0b8      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d020      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d005      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cfc:	4b59      	ldr	r3, [pc, #356]	@ (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	4a58      	ldr	r2, [pc, #352]	@ (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d14:	4b53      	ldr	r3, [pc, #332]	@ (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	4a52      	ldr	r2, [pc, #328]	@ (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d20:	4b50      	ldr	r3, [pc, #320]	@ (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	494d      	ldr	r1, [pc, #308]	@ (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d044      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d107      	bne.n	8004d56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d46:	4b47      	ldr	r3, [pc, #284]	@ (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d119      	bne.n	8004d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e07f      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d003      	beq.n	8004d66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d62:	2b03      	cmp	r3, #3
 8004d64:	d107      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d66:	4b3f      	ldr	r3, [pc, #252]	@ (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d109      	bne.n	8004d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e06f      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d76:	4b3b      	ldr	r3, [pc, #236]	@ (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e067      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d86:	4b37      	ldr	r3, [pc, #220]	@ (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f023 0203 	bic.w	r2, r3, #3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	4934      	ldr	r1, [pc, #208]	@ (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d98:	f7fe fb38 	bl	800340c <HAL_GetTick>
 8004d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9e:	e00a      	b.n	8004db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da0:	f7fe fb34 	bl	800340c <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e04f      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db6:	4b2b      	ldr	r3, [pc, #172]	@ (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 020c 	and.w	r2, r3, #12
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d1eb      	bne.n	8004da0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc8:	4b25      	ldr	r3, [pc, #148]	@ (8004e60 <HAL_RCC_ClockConfig+0x1b8>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 030f 	and.w	r3, r3, #15
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d20c      	bcs.n	8004df0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd6:	4b22      	ldr	r3, [pc, #136]	@ (8004e60 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dde:	4b20      	ldr	r3, [pc, #128]	@ (8004e60 <HAL_RCC_ClockConfig+0x1b8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d001      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e032      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d008      	beq.n	8004e0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dfc:	4b19      	ldr	r3, [pc, #100]	@ (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	4916      	ldr	r1, [pc, #88]	@ (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d009      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e1a:	4b12      	ldr	r3, [pc, #72]	@ (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	490e      	ldr	r1, [pc, #56]	@ (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e2e:	f000 f855 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8004e32:	4602      	mov	r2, r0
 8004e34:	4b0b      	ldr	r3, [pc, #44]	@ (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	091b      	lsrs	r3, r3, #4
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	490a      	ldr	r1, [pc, #40]	@ (8004e68 <HAL_RCC_ClockConfig+0x1c0>)
 8004e40:	5ccb      	ldrb	r3, [r1, r3]
 8004e42:	fa22 f303 	lsr.w	r3, r2, r3
 8004e46:	4a09      	ldr	r2, [pc, #36]	@ (8004e6c <HAL_RCC_ClockConfig+0x1c4>)
 8004e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e4a:	4b09      	ldr	r3, [pc, #36]	@ (8004e70 <HAL_RCC_ClockConfig+0x1c8>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fe fa98 	bl	8003384 <HAL_InitTick>

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40023c00 	.word	0x40023c00
 8004e64:	40023800 	.word	0x40023800
 8004e68:	0800a14c 	.word	0x0800a14c
 8004e6c:	20000000 	.word	0x20000000
 8004e70:	20000004 	.word	0x20000004

08004e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e78:	4b03      	ldr	r3, [pc, #12]	@ (8004e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000000 	.word	0x20000000

08004e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e90:	f7ff fff0 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8004e94:	4602      	mov	r2, r0
 8004e96:	4b05      	ldr	r3, [pc, #20]	@ (8004eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	0a9b      	lsrs	r3, r3, #10
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	4903      	ldr	r1, [pc, #12]	@ (8004eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ea2:	5ccb      	ldrb	r3, [r1, r3]
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	0800a15c 	.word	0x0800a15c

08004eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004eb8:	f7ff ffdc 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	4b05      	ldr	r3, [pc, #20]	@ (8004ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	0b5b      	lsrs	r3, r3, #13
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	4903      	ldr	r1, [pc, #12]	@ (8004ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eca:	5ccb      	ldrb	r3, [r1, r3]
 8004ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	0800a15c 	.word	0x0800a15c

08004edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ee0:	b0ae      	sub	sp, #184	@ 0xb8
 8004ee2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f02:	4bcb      	ldr	r3, [pc, #812]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 030c 	and.w	r3, r3, #12
 8004f0a:	2b0c      	cmp	r3, #12
 8004f0c:	f200 8206 	bhi.w	800531c <HAL_RCC_GetSysClockFreq+0x440>
 8004f10:	a201      	add	r2, pc, #4	@ (adr r2, 8004f18 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f16:	bf00      	nop
 8004f18:	08004f4d 	.word	0x08004f4d
 8004f1c:	0800531d 	.word	0x0800531d
 8004f20:	0800531d 	.word	0x0800531d
 8004f24:	0800531d 	.word	0x0800531d
 8004f28:	08004f55 	.word	0x08004f55
 8004f2c:	0800531d 	.word	0x0800531d
 8004f30:	0800531d 	.word	0x0800531d
 8004f34:	0800531d 	.word	0x0800531d
 8004f38:	08004f5d 	.word	0x08004f5d
 8004f3c:	0800531d 	.word	0x0800531d
 8004f40:	0800531d 	.word	0x0800531d
 8004f44:	0800531d 	.word	0x0800531d
 8004f48:	0800514d 	.word	0x0800514d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f4c:	4bb9      	ldr	r3, [pc, #740]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x358>)
 8004f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f52:	e1e7      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f54:	4bb8      	ldr	r3, [pc, #736]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004f56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f5a:	e1e3      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f5c:	4bb4      	ldr	r3, [pc, #720]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f68:	4bb1      	ldr	r3, [pc, #708]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d071      	beq.n	8005058 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f74:	4bae      	ldr	r3, [pc, #696]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	099b      	lsrs	r3, r3, #6
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f80:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f90:	2300      	movs	r3, #0
 8004f92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f9a:	4622      	mov	r2, r4
 8004f9c:	462b      	mov	r3, r5
 8004f9e:	f04f 0000 	mov.w	r0, #0
 8004fa2:	f04f 0100 	mov.w	r1, #0
 8004fa6:	0159      	lsls	r1, r3, #5
 8004fa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fac:	0150      	lsls	r0, r2, #5
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	1a51      	subs	r1, r2, r1
 8004fb6:	6439      	str	r1, [r7, #64]	@ 0x40
 8004fb8:	4629      	mov	r1, r5
 8004fba:	eb63 0301 	sbc.w	r3, r3, r1
 8004fbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004fcc:	4649      	mov	r1, r9
 8004fce:	018b      	lsls	r3, r1, #6
 8004fd0:	4641      	mov	r1, r8
 8004fd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fd6:	4641      	mov	r1, r8
 8004fd8:	018a      	lsls	r2, r1, #6
 8004fda:	4641      	mov	r1, r8
 8004fdc:	1a51      	subs	r1, r2, r1
 8004fde:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004fe0:	4649      	mov	r1, r9
 8004fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8004fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004ff4:	4649      	mov	r1, r9
 8004ff6:	00cb      	lsls	r3, r1, #3
 8004ff8:	4641      	mov	r1, r8
 8004ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ffe:	4641      	mov	r1, r8
 8005000:	00ca      	lsls	r2, r1, #3
 8005002:	4610      	mov	r0, r2
 8005004:	4619      	mov	r1, r3
 8005006:	4603      	mov	r3, r0
 8005008:	4622      	mov	r2, r4
 800500a:	189b      	adds	r3, r3, r2
 800500c:	633b      	str	r3, [r7, #48]	@ 0x30
 800500e:	462b      	mov	r3, r5
 8005010:	460a      	mov	r2, r1
 8005012:	eb42 0303 	adc.w	r3, r2, r3
 8005016:	637b      	str	r3, [r7, #52]	@ 0x34
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005024:	4629      	mov	r1, r5
 8005026:	024b      	lsls	r3, r1, #9
 8005028:	4621      	mov	r1, r4
 800502a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800502e:	4621      	mov	r1, r4
 8005030:	024a      	lsls	r2, r1, #9
 8005032:	4610      	mov	r0, r2
 8005034:	4619      	mov	r1, r3
 8005036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800503a:	2200      	movs	r2, #0
 800503c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005040:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005044:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005048:	f7fb fe1e 	bl	8000c88 <__aeabi_uldivmod>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4613      	mov	r3, r2
 8005052:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005056:	e067      	b.n	8005128 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005058:	4b75      	ldr	r3, [pc, #468]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x354>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	099b      	lsrs	r3, r3, #6
 800505e:	2200      	movs	r2, #0
 8005060:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005064:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005068:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800506c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005070:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005072:	2300      	movs	r3, #0
 8005074:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005076:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800507a:	4622      	mov	r2, r4
 800507c:	462b      	mov	r3, r5
 800507e:	f04f 0000 	mov.w	r0, #0
 8005082:	f04f 0100 	mov.w	r1, #0
 8005086:	0159      	lsls	r1, r3, #5
 8005088:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800508c:	0150      	lsls	r0, r2, #5
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4621      	mov	r1, r4
 8005094:	1a51      	subs	r1, r2, r1
 8005096:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005098:	4629      	mov	r1, r5
 800509a:	eb63 0301 	sbc.w	r3, r3, r1
 800509e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	f04f 0300 	mov.w	r3, #0
 80050a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80050ac:	4649      	mov	r1, r9
 80050ae:	018b      	lsls	r3, r1, #6
 80050b0:	4641      	mov	r1, r8
 80050b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050b6:	4641      	mov	r1, r8
 80050b8:	018a      	lsls	r2, r1, #6
 80050ba:	4641      	mov	r1, r8
 80050bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80050c0:	4649      	mov	r1, r9
 80050c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80050c6:	f04f 0200 	mov.w	r2, #0
 80050ca:	f04f 0300 	mov.w	r3, #0
 80050ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050da:	4692      	mov	sl, r2
 80050dc:	469b      	mov	fp, r3
 80050de:	4623      	mov	r3, r4
 80050e0:	eb1a 0303 	adds.w	r3, sl, r3
 80050e4:	623b      	str	r3, [r7, #32]
 80050e6:	462b      	mov	r3, r5
 80050e8:	eb4b 0303 	adc.w	r3, fp, r3
 80050ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80050fa:	4629      	mov	r1, r5
 80050fc:	028b      	lsls	r3, r1, #10
 80050fe:	4621      	mov	r1, r4
 8005100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005104:	4621      	mov	r1, r4
 8005106:	028a      	lsls	r2, r1, #10
 8005108:	4610      	mov	r0, r2
 800510a:	4619      	mov	r1, r3
 800510c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005110:	2200      	movs	r2, #0
 8005112:	673b      	str	r3, [r7, #112]	@ 0x70
 8005114:	677a      	str	r2, [r7, #116]	@ 0x74
 8005116:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800511a:	f7fb fdb5 	bl	8000c88 <__aeabi_uldivmod>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4613      	mov	r3, r2
 8005124:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005128:	4b41      	ldr	r3, [pc, #260]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x354>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	0c1b      	lsrs	r3, r3, #16
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	3301      	adds	r3, #1
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800513a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800513e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005142:	fbb2 f3f3 	udiv	r3, r2, r3
 8005146:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800514a:	e0eb      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800514c:	4b38      	ldr	r3, [pc, #224]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x354>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005154:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005158:	4b35      	ldr	r3, [pc, #212]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x354>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d06b      	beq.n	800523c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005164:	4b32      	ldr	r3, [pc, #200]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x354>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	099b      	lsrs	r3, r3, #6
 800516a:	2200      	movs	r2, #0
 800516c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800516e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005170:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005176:	663b      	str	r3, [r7, #96]	@ 0x60
 8005178:	2300      	movs	r3, #0
 800517a:	667b      	str	r3, [r7, #100]	@ 0x64
 800517c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005180:	4622      	mov	r2, r4
 8005182:	462b      	mov	r3, r5
 8005184:	f04f 0000 	mov.w	r0, #0
 8005188:	f04f 0100 	mov.w	r1, #0
 800518c:	0159      	lsls	r1, r3, #5
 800518e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005192:	0150      	lsls	r0, r2, #5
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4621      	mov	r1, r4
 800519a:	1a51      	subs	r1, r2, r1
 800519c:	61b9      	str	r1, [r7, #24]
 800519e:	4629      	mov	r1, r5
 80051a0:	eb63 0301 	sbc.w	r3, r3, r1
 80051a4:	61fb      	str	r3, [r7, #28]
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	f04f 0300 	mov.w	r3, #0
 80051ae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80051b2:	4659      	mov	r1, fp
 80051b4:	018b      	lsls	r3, r1, #6
 80051b6:	4651      	mov	r1, sl
 80051b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051bc:	4651      	mov	r1, sl
 80051be:	018a      	lsls	r2, r1, #6
 80051c0:	4651      	mov	r1, sl
 80051c2:	ebb2 0801 	subs.w	r8, r2, r1
 80051c6:	4659      	mov	r1, fp
 80051c8:	eb63 0901 	sbc.w	r9, r3, r1
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051e0:	4690      	mov	r8, r2
 80051e2:	4699      	mov	r9, r3
 80051e4:	4623      	mov	r3, r4
 80051e6:	eb18 0303 	adds.w	r3, r8, r3
 80051ea:	613b      	str	r3, [r7, #16]
 80051ec:	462b      	mov	r3, r5
 80051ee:	eb49 0303 	adc.w	r3, r9, r3
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005200:	4629      	mov	r1, r5
 8005202:	024b      	lsls	r3, r1, #9
 8005204:	4621      	mov	r1, r4
 8005206:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800520a:	4621      	mov	r1, r4
 800520c:	024a      	lsls	r2, r1, #9
 800520e:	4610      	mov	r0, r2
 8005210:	4619      	mov	r1, r3
 8005212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005216:	2200      	movs	r2, #0
 8005218:	65bb      	str	r3, [r7, #88]	@ 0x58
 800521a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800521c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005220:	f7fb fd32 	bl	8000c88 <__aeabi_uldivmod>
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	4613      	mov	r3, r2
 800522a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800522e:	e065      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0x420>
 8005230:	40023800 	.word	0x40023800
 8005234:	00f42400 	.word	0x00f42400
 8005238:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800523c:	4b3d      	ldr	r3, [pc, #244]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x458>)
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	099b      	lsrs	r3, r3, #6
 8005242:	2200      	movs	r2, #0
 8005244:	4618      	mov	r0, r3
 8005246:	4611      	mov	r1, r2
 8005248:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800524c:	653b      	str	r3, [r7, #80]	@ 0x50
 800524e:	2300      	movs	r3, #0
 8005250:	657b      	str	r3, [r7, #84]	@ 0x54
 8005252:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005256:	4642      	mov	r2, r8
 8005258:	464b      	mov	r3, r9
 800525a:	f04f 0000 	mov.w	r0, #0
 800525e:	f04f 0100 	mov.w	r1, #0
 8005262:	0159      	lsls	r1, r3, #5
 8005264:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005268:	0150      	lsls	r0, r2, #5
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	4641      	mov	r1, r8
 8005270:	1a51      	subs	r1, r2, r1
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	4649      	mov	r1, r9
 8005276:	eb63 0301 	sbc.w	r3, r3, r1
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	f04f 0200 	mov.w	r2, #0
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005288:	4659      	mov	r1, fp
 800528a:	018b      	lsls	r3, r1, #6
 800528c:	4651      	mov	r1, sl
 800528e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005292:	4651      	mov	r1, sl
 8005294:	018a      	lsls	r2, r1, #6
 8005296:	4651      	mov	r1, sl
 8005298:	1a54      	subs	r4, r2, r1
 800529a:	4659      	mov	r1, fp
 800529c:	eb63 0501 	sbc.w	r5, r3, r1
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	00eb      	lsls	r3, r5, #3
 80052aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052ae:	00e2      	lsls	r2, r4, #3
 80052b0:	4614      	mov	r4, r2
 80052b2:	461d      	mov	r5, r3
 80052b4:	4643      	mov	r3, r8
 80052b6:	18e3      	adds	r3, r4, r3
 80052b8:	603b      	str	r3, [r7, #0]
 80052ba:	464b      	mov	r3, r9
 80052bc:	eb45 0303 	adc.w	r3, r5, r3
 80052c0:	607b      	str	r3, [r7, #4]
 80052c2:	f04f 0200 	mov.w	r2, #0
 80052c6:	f04f 0300 	mov.w	r3, #0
 80052ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052ce:	4629      	mov	r1, r5
 80052d0:	028b      	lsls	r3, r1, #10
 80052d2:	4621      	mov	r1, r4
 80052d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052d8:	4621      	mov	r1, r4
 80052da:	028a      	lsls	r2, r1, #10
 80052dc:	4610      	mov	r0, r2
 80052de:	4619      	mov	r1, r3
 80052e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052e4:	2200      	movs	r2, #0
 80052e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052e8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80052ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052ee:	f7fb fccb 	bl	8000c88 <__aeabi_uldivmod>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4613      	mov	r3, r2
 80052f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80052fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x458>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	0f1b      	lsrs	r3, r3, #28
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800530a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800530e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005312:	fbb2 f3f3 	udiv	r3, r2, r3
 8005316:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800531a:	e003      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800531c:	4b06      	ldr	r3, [pc, #24]	@ (8005338 <HAL_RCC_GetSysClockFreq+0x45c>)
 800531e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005322:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005324:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005328:	4618      	mov	r0, r3
 800532a:	37b8      	adds	r7, #184	@ 0xb8
 800532c:	46bd      	mov	sp, r7
 800532e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005332:	bf00      	nop
 8005334:	40023800 	.word	0x40023800
 8005338:	00f42400 	.word	0x00f42400

0800533c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e28d      	b.n	800586a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 8083 	beq.w	8005462 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800535c:	4b94      	ldr	r3, [pc, #592]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 030c 	and.w	r3, r3, #12
 8005364:	2b04      	cmp	r3, #4
 8005366:	d019      	beq.n	800539c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005368:	4b91      	ldr	r3, [pc, #580]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 030c 	and.w	r3, r3, #12
        || \
 8005370:	2b08      	cmp	r3, #8
 8005372:	d106      	bne.n	8005382 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005374:	4b8e      	ldr	r3, [pc, #568]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800537c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005380:	d00c      	beq.n	800539c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005382:	4b8b      	ldr	r3, [pc, #556]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800538a:	2b0c      	cmp	r3, #12
 800538c:	d112      	bne.n	80053b4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800538e:	4b88      	ldr	r3, [pc, #544]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005396:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800539a:	d10b      	bne.n	80053b4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800539c:	4b84      	ldr	r3, [pc, #528]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d05b      	beq.n	8005460 <HAL_RCC_OscConfig+0x124>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d157      	bne.n	8005460 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e25a      	b.n	800586a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053bc:	d106      	bne.n	80053cc <HAL_RCC_OscConfig+0x90>
 80053be:	4b7c      	ldr	r3, [pc, #496]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a7b      	ldr	r2, [pc, #492]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 80053c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053c8:	6013      	str	r3, [r2, #0]
 80053ca:	e01d      	b.n	8005408 <HAL_RCC_OscConfig+0xcc>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053d4:	d10c      	bne.n	80053f0 <HAL_RCC_OscConfig+0xb4>
 80053d6:	4b76      	ldr	r3, [pc, #472]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a75      	ldr	r2, [pc, #468]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 80053dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	4b73      	ldr	r3, [pc, #460]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a72      	ldr	r2, [pc, #456]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 80053e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	e00b      	b.n	8005408 <HAL_RCC_OscConfig+0xcc>
 80053f0:	4b6f      	ldr	r3, [pc, #444]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a6e      	ldr	r2, [pc, #440]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 80053f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	4b6c      	ldr	r3, [pc, #432]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a6b      	ldr	r2, [pc, #428]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 8005402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d013      	beq.n	8005438 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005410:	f7fd fffc 	bl	800340c <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005418:	f7fd fff8 	bl	800340c <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b64      	cmp	r3, #100	@ 0x64
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e21f      	b.n	800586a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800542a:	4b61      	ldr	r3, [pc, #388]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f0      	beq.n	8005418 <HAL_RCC_OscConfig+0xdc>
 8005436:	e014      	b.n	8005462 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005438:	f7fd ffe8 	bl	800340c <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005440:	f7fd ffe4 	bl	800340c <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b64      	cmp	r3, #100	@ 0x64
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e20b      	b.n	800586a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005452:	4b57      	ldr	r3, [pc, #348]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f0      	bne.n	8005440 <HAL_RCC_OscConfig+0x104>
 800545e:	e000      	b.n	8005462 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d06f      	beq.n	800554e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800546e:	4b50      	ldr	r3, [pc, #320]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 030c 	and.w	r3, r3, #12
 8005476:	2b00      	cmp	r3, #0
 8005478:	d017      	beq.n	80054aa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800547a:	4b4d      	ldr	r3, [pc, #308]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 030c 	and.w	r3, r3, #12
        || \
 8005482:	2b08      	cmp	r3, #8
 8005484:	d105      	bne.n	8005492 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005486:	4b4a      	ldr	r3, [pc, #296]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00b      	beq.n	80054aa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005492:	4b47      	ldr	r3, [pc, #284]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800549a:	2b0c      	cmp	r3, #12
 800549c:	d11c      	bne.n	80054d8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800549e:	4b44      	ldr	r3, [pc, #272]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d116      	bne.n	80054d8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054aa:	4b41      	ldr	r3, [pc, #260]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d005      	beq.n	80054c2 <HAL_RCC_OscConfig+0x186>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d001      	beq.n	80054c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e1d3      	b.n	800586a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c2:	4b3b      	ldr	r3, [pc, #236]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	4937      	ldr	r1, [pc, #220]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054d6:	e03a      	b.n	800554e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d020      	beq.n	8005522 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054e0:	4b34      	ldr	r3, [pc, #208]	@ (80055b4 <HAL_RCC_OscConfig+0x278>)
 80054e2:	2201      	movs	r2, #1
 80054e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e6:	f7fd ff91 	bl	800340c <HAL_GetTick>
 80054ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054ee:	f7fd ff8d 	bl	800340c <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e1b4      	b.n	800586a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005500:	4b2b      	ldr	r3, [pc, #172]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0f0      	beq.n	80054ee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800550c:	4b28      	ldr	r3, [pc, #160]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	4925      	ldr	r1, [pc, #148]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 800551c:	4313      	orrs	r3, r2
 800551e:	600b      	str	r3, [r1, #0]
 8005520:	e015      	b.n	800554e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005522:	4b24      	ldr	r3, [pc, #144]	@ (80055b4 <HAL_RCC_OscConfig+0x278>)
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005528:	f7fd ff70 	bl	800340c <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005530:	f7fd ff6c 	bl	800340c <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e193      	b.n	800586a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005542:	4b1b      	ldr	r3, [pc, #108]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f0      	bne.n	8005530 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	2b00      	cmp	r3, #0
 8005558:	d036      	beq.n	80055c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d016      	beq.n	8005590 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005562:	4b15      	ldr	r3, [pc, #84]	@ (80055b8 <HAL_RCC_OscConfig+0x27c>)
 8005564:	2201      	movs	r2, #1
 8005566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005568:	f7fd ff50 	bl	800340c <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005570:	f7fd ff4c 	bl	800340c <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e173      	b.n	800586a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005582:	4b0b      	ldr	r3, [pc, #44]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 8005584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0f0      	beq.n	8005570 <HAL_RCC_OscConfig+0x234>
 800558e:	e01b      	b.n	80055c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005590:	4b09      	ldr	r3, [pc, #36]	@ (80055b8 <HAL_RCC_OscConfig+0x27c>)
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005596:	f7fd ff39 	bl	800340c <HAL_GetTick>
 800559a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800559c:	e00e      	b.n	80055bc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800559e:	f7fd ff35 	bl	800340c <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d907      	bls.n	80055bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e15c      	b.n	800586a <HAL_RCC_OscConfig+0x52e>
 80055b0:	40023800 	.word	0x40023800
 80055b4:	42470000 	.word	0x42470000
 80055b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055bc:	4b8a      	ldr	r3, [pc, #552]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 80055be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1ea      	bne.n	800559e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 8097 	beq.w	8005704 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055d6:	2300      	movs	r3, #0
 80055d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055da:	4b83      	ldr	r3, [pc, #524]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 80055dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10f      	bne.n	8005606 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055e6:	2300      	movs	r3, #0
 80055e8:	60bb      	str	r3, [r7, #8]
 80055ea:	4b7f      	ldr	r3, [pc, #508]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 80055ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ee:	4a7e      	ldr	r2, [pc, #504]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 80055f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80055f6:	4b7c      	ldr	r3, [pc, #496]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 80055f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055fe:	60bb      	str	r3, [r7, #8]
 8005600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005602:	2301      	movs	r3, #1
 8005604:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005606:	4b79      	ldr	r3, [pc, #484]	@ (80057ec <HAL_RCC_OscConfig+0x4b0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800560e:	2b00      	cmp	r3, #0
 8005610:	d118      	bne.n	8005644 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005612:	4b76      	ldr	r3, [pc, #472]	@ (80057ec <HAL_RCC_OscConfig+0x4b0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a75      	ldr	r2, [pc, #468]	@ (80057ec <HAL_RCC_OscConfig+0x4b0>)
 8005618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800561c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800561e:	f7fd fef5 	bl	800340c <HAL_GetTick>
 8005622:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005624:	e008      	b.n	8005638 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005626:	f7fd fef1 	bl	800340c <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e118      	b.n	800586a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005638:	4b6c      	ldr	r3, [pc, #432]	@ (80057ec <HAL_RCC_OscConfig+0x4b0>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0f0      	beq.n	8005626 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d106      	bne.n	800565a <HAL_RCC_OscConfig+0x31e>
 800564c:	4b66      	ldr	r3, [pc, #408]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 800564e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005650:	4a65      	ldr	r2, [pc, #404]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	6713      	str	r3, [r2, #112]	@ 0x70
 8005658:	e01c      	b.n	8005694 <HAL_RCC_OscConfig+0x358>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	2b05      	cmp	r3, #5
 8005660:	d10c      	bne.n	800567c <HAL_RCC_OscConfig+0x340>
 8005662:	4b61      	ldr	r3, [pc, #388]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 8005664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005666:	4a60      	ldr	r2, [pc, #384]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 8005668:	f043 0304 	orr.w	r3, r3, #4
 800566c:	6713      	str	r3, [r2, #112]	@ 0x70
 800566e:	4b5e      	ldr	r3, [pc, #376]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005672:	4a5d      	ldr	r2, [pc, #372]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 8005674:	f043 0301 	orr.w	r3, r3, #1
 8005678:	6713      	str	r3, [r2, #112]	@ 0x70
 800567a:	e00b      	b.n	8005694 <HAL_RCC_OscConfig+0x358>
 800567c:	4b5a      	ldr	r3, [pc, #360]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 800567e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005680:	4a59      	ldr	r2, [pc, #356]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 8005682:	f023 0301 	bic.w	r3, r3, #1
 8005686:	6713      	str	r3, [r2, #112]	@ 0x70
 8005688:	4b57      	ldr	r3, [pc, #348]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 800568a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800568c:	4a56      	ldr	r2, [pc, #344]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 800568e:	f023 0304 	bic.w	r3, r3, #4
 8005692:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d015      	beq.n	80056c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569c:	f7fd feb6 	bl	800340c <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a2:	e00a      	b.n	80056ba <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a4:	f7fd feb2 	bl	800340c <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e0d7      	b.n	800586a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ba:	4b4b      	ldr	r3, [pc, #300]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 80056bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0ee      	beq.n	80056a4 <HAL_RCC_OscConfig+0x368>
 80056c6:	e014      	b.n	80056f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c8:	f7fd fea0 	bl	800340c <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ce:	e00a      	b.n	80056e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d0:	f7fd fe9c 	bl	800340c <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056de:	4293      	cmp	r3, r2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e0c1      	b.n	800586a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056e6:	4b40      	ldr	r3, [pc, #256]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 80056e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1ee      	bne.n	80056d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056f2:	7dfb      	ldrb	r3, [r7, #23]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d105      	bne.n	8005704 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056f8:	4b3b      	ldr	r3, [pc, #236]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 80056fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fc:	4a3a      	ldr	r2, [pc, #232]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 80056fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005702:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 80ad 	beq.w	8005868 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800570e:	4b36      	ldr	r3, [pc, #216]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 030c 	and.w	r3, r3, #12
 8005716:	2b08      	cmp	r3, #8
 8005718:	d060      	beq.n	80057dc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	2b02      	cmp	r3, #2
 8005720:	d145      	bne.n	80057ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005722:	4b33      	ldr	r3, [pc, #204]	@ (80057f0 <HAL_RCC_OscConfig+0x4b4>)
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005728:	f7fd fe70 	bl	800340c <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005730:	f7fd fe6c 	bl	800340c <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e093      	b.n	800586a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005742:	4b29      	ldr	r3, [pc, #164]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1f0      	bne.n	8005730 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69da      	ldr	r2, [r3, #28]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575c:	019b      	lsls	r3, r3, #6
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005764:	085b      	lsrs	r3, r3, #1
 8005766:	3b01      	subs	r3, #1
 8005768:	041b      	lsls	r3, r3, #16
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005770:	061b      	lsls	r3, r3, #24
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005778:	071b      	lsls	r3, r3, #28
 800577a:	491b      	ldr	r1, [pc, #108]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 800577c:	4313      	orrs	r3, r2
 800577e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005780:	4b1b      	ldr	r3, [pc, #108]	@ (80057f0 <HAL_RCC_OscConfig+0x4b4>)
 8005782:	2201      	movs	r2, #1
 8005784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005786:	f7fd fe41 	bl	800340c <HAL_GetTick>
 800578a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800578c:	e008      	b.n	80057a0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800578e:	f7fd fe3d 	bl	800340c <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d901      	bls.n	80057a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e064      	b.n	800586a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a0:	4b11      	ldr	r3, [pc, #68]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0f0      	beq.n	800578e <HAL_RCC_OscConfig+0x452>
 80057ac:	e05c      	b.n	8005868 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ae:	4b10      	ldr	r3, [pc, #64]	@ (80057f0 <HAL_RCC_OscConfig+0x4b4>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b4:	f7fd fe2a 	bl	800340c <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057bc:	f7fd fe26 	bl	800340c <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e04d      	b.n	800586a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ce:	4b06      	ldr	r3, [pc, #24]	@ (80057e8 <HAL_RCC_OscConfig+0x4ac>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1f0      	bne.n	80057bc <HAL_RCC_OscConfig+0x480>
 80057da:	e045      	b.n	8005868 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d107      	bne.n	80057f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e040      	b.n	800586a <HAL_RCC_OscConfig+0x52e>
 80057e8:	40023800 	.word	0x40023800
 80057ec:	40007000 	.word	0x40007000
 80057f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005874 <HAL_RCC_OscConfig+0x538>)
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d030      	beq.n	8005864 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800580c:	429a      	cmp	r2, r3
 800580e:	d129      	bne.n	8005864 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800581a:	429a      	cmp	r2, r3
 800581c:	d122      	bne.n	8005864 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005824:	4013      	ands	r3, r2
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800582a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800582c:	4293      	cmp	r3, r2
 800582e:	d119      	bne.n	8005864 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583a:	085b      	lsrs	r3, r3, #1
 800583c:	3b01      	subs	r3, #1
 800583e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005840:	429a      	cmp	r2, r3
 8005842:	d10f      	bne.n	8005864 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800584e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005850:	429a      	cmp	r2, r3
 8005852:	d107      	bne.n	8005864 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005860:	429a      	cmp	r2, r3
 8005862:	d001      	beq.n	8005868 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	40023800 	.word	0x40023800

08005878 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e042      	b.n	8005910 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d106      	bne.n	80058a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fd fbf0 	bl	8003084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2224      	movs	r2, #36	@ 0x24
 80058a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f82b 	bl	8005918 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691a      	ldr	r2, [r3, #16]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	695a      	ldr	r2, [r3, #20]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2220      	movs	r2, #32
 8005904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800591c:	b0c0      	sub	sp, #256	@ 0x100
 800591e:	af00      	add	r7, sp, #0
 8005920:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005934:	68d9      	ldr	r1, [r3, #12]
 8005936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	ea40 0301 	orr.w	r3, r0, r1
 8005940:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	431a      	orrs	r2, r3
 8005950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	431a      	orrs	r2, r3
 8005958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	4313      	orrs	r3, r2
 8005960:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005970:	f021 010c 	bic.w	r1, r1, #12
 8005974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800597e:	430b      	orrs	r3, r1
 8005980:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800598e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005992:	6999      	ldr	r1, [r3, #24]
 8005994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	ea40 0301 	orr.w	r3, r0, r1
 800599e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	4b8f      	ldr	r3, [pc, #572]	@ (8005be4 <UART_SetConfig+0x2cc>)
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d005      	beq.n	80059b8 <UART_SetConfig+0xa0>
 80059ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	4b8d      	ldr	r3, [pc, #564]	@ (8005be8 <UART_SetConfig+0x2d0>)
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d104      	bne.n	80059c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059b8:	f7ff fa7c 	bl	8004eb4 <HAL_RCC_GetPCLK2Freq>
 80059bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80059c0:	e003      	b.n	80059ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059c2:	f7ff fa63 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 80059c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059d4:	f040 810c 	bne.w	8005bf0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059dc:	2200      	movs	r2, #0
 80059de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80059e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80059ea:	4622      	mov	r2, r4
 80059ec:	462b      	mov	r3, r5
 80059ee:	1891      	adds	r1, r2, r2
 80059f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80059f2:	415b      	adcs	r3, r3
 80059f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80059fa:	4621      	mov	r1, r4
 80059fc:	eb12 0801 	adds.w	r8, r2, r1
 8005a00:	4629      	mov	r1, r5
 8005a02:	eb43 0901 	adc.w	r9, r3, r1
 8005a06:	f04f 0200 	mov.w	r2, #0
 8005a0a:	f04f 0300 	mov.w	r3, #0
 8005a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a1a:	4690      	mov	r8, r2
 8005a1c:	4699      	mov	r9, r3
 8005a1e:	4623      	mov	r3, r4
 8005a20:	eb18 0303 	adds.w	r3, r8, r3
 8005a24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a28:	462b      	mov	r3, r5
 8005a2a:	eb49 0303 	adc.w	r3, r9, r3
 8005a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a46:	460b      	mov	r3, r1
 8005a48:	18db      	adds	r3, r3, r3
 8005a4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	eb42 0303 	adc.w	r3, r2, r3
 8005a52:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a5c:	f7fb f914 	bl	8000c88 <__aeabi_uldivmod>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4b61      	ldr	r3, [pc, #388]	@ (8005bec <UART_SetConfig+0x2d4>)
 8005a66:	fba3 2302 	umull	r2, r3, r3, r2
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	011c      	lsls	r4, r3, #4
 8005a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a80:	4642      	mov	r2, r8
 8005a82:	464b      	mov	r3, r9
 8005a84:	1891      	adds	r1, r2, r2
 8005a86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a88:	415b      	adcs	r3, r3
 8005a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a90:	4641      	mov	r1, r8
 8005a92:	eb12 0a01 	adds.w	sl, r2, r1
 8005a96:	4649      	mov	r1, r9
 8005a98:	eb43 0b01 	adc.w	fp, r3, r1
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005aa8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005aac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ab0:	4692      	mov	sl, r2
 8005ab2:	469b      	mov	fp, r3
 8005ab4:	4643      	mov	r3, r8
 8005ab6:	eb1a 0303 	adds.w	r3, sl, r3
 8005aba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005abe:	464b      	mov	r3, r9
 8005ac0:	eb4b 0303 	adc.w	r3, fp, r3
 8005ac4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ad4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ad8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005adc:	460b      	mov	r3, r1
 8005ade:	18db      	adds	r3, r3, r3
 8005ae0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	eb42 0303 	adc.w	r3, r2, r3
 8005ae8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005aea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005aee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005af2:	f7fb f8c9 	bl	8000c88 <__aeabi_uldivmod>
 8005af6:	4602      	mov	r2, r0
 8005af8:	460b      	mov	r3, r1
 8005afa:	4611      	mov	r1, r2
 8005afc:	4b3b      	ldr	r3, [pc, #236]	@ (8005bec <UART_SetConfig+0x2d4>)
 8005afe:	fba3 2301 	umull	r2, r3, r3, r1
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	2264      	movs	r2, #100	@ 0x64
 8005b06:	fb02 f303 	mul.w	r3, r2, r3
 8005b0a:	1acb      	subs	r3, r1, r3
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b12:	4b36      	ldr	r3, [pc, #216]	@ (8005bec <UART_SetConfig+0x2d4>)
 8005b14:	fba3 2302 	umull	r2, r3, r3, r2
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b20:	441c      	add	r4, r3
 8005b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b34:	4642      	mov	r2, r8
 8005b36:	464b      	mov	r3, r9
 8005b38:	1891      	adds	r1, r2, r2
 8005b3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b3c:	415b      	adcs	r3, r3
 8005b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b44:	4641      	mov	r1, r8
 8005b46:	1851      	adds	r1, r2, r1
 8005b48:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	414b      	adcs	r3, r1
 8005b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b50:	f04f 0200 	mov.w	r2, #0
 8005b54:	f04f 0300 	mov.w	r3, #0
 8005b58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b5c:	4659      	mov	r1, fp
 8005b5e:	00cb      	lsls	r3, r1, #3
 8005b60:	4651      	mov	r1, sl
 8005b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b66:	4651      	mov	r1, sl
 8005b68:	00ca      	lsls	r2, r1, #3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4603      	mov	r3, r0
 8005b70:	4642      	mov	r2, r8
 8005b72:	189b      	adds	r3, r3, r2
 8005b74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b78:	464b      	mov	r3, r9
 8005b7a:	460a      	mov	r2, r1
 8005b7c:	eb42 0303 	adc.w	r3, r2, r3
 8005b80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b98:	460b      	mov	r3, r1
 8005b9a:	18db      	adds	r3, r3, r3
 8005b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	eb42 0303 	adc.w	r3, r2, r3
 8005ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ba6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005baa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005bae:	f7fb f86b 	bl	8000c88 <__aeabi_uldivmod>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bec <UART_SetConfig+0x2d4>)
 8005bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bbc:	095b      	lsrs	r3, r3, #5
 8005bbe:	2164      	movs	r1, #100	@ 0x64
 8005bc0:	fb01 f303 	mul.w	r3, r1, r3
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	3332      	adds	r3, #50	@ 0x32
 8005bca:	4a08      	ldr	r2, [pc, #32]	@ (8005bec <UART_SetConfig+0x2d4>)
 8005bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd0:	095b      	lsrs	r3, r3, #5
 8005bd2:	f003 0207 	and.w	r2, r3, #7
 8005bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4422      	add	r2, r4
 8005bde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005be0:	e106      	b.n	8005df0 <UART_SetConfig+0x4d8>
 8005be2:	bf00      	nop
 8005be4:	40011000 	.word	0x40011000
 8005be8:	40011400 	.word	0x40011400
 8005bec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005bfa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005bfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c02:	4642      	mov	r2, r8
 8005c04:	464b      	mov	r3, r9
 8005c06:	1891      	adds	r1, r2, r2
 8005c08:	6239      	str	r1, [r7, #32]
 8005c0a:	415b      	adcs	r3, r3
 8005c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c12:	4641      	mov	r1, r8
 8005c14:	1854      	adds	r4, r2, r1
 8005c16:	4649      	mov	r1, r9
 8005c18:	eb43 0501 	adc.w	r5, r3, r1
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	00eb      	lsls	r3, r5, #3
 8005c26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c2a:	00e2      	lsls	r2, r4, #3
 8005c2c:	4614      	mov	r4, r2
 8005c2e:	461d      	mov	r5, r3
 8005c30:	4643      	mov	r3, r8
 8005c32:	18e3      	adds	r3, r4, r3
 8005c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c38:	464b      	mov	r3, r9
 8005c3a:	eb45 0303 	adc.w	r3, r5, r3
 8005c3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c52:	f04f 0200 	mov.w	r2, #0
 8005c56:	f04f 0300 	mov.w	r3, #0
 8005c5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c5e:	4629      	mov	r1, r5
 8005c60:	008b      	lsls	r3, r1, #2
 8005c62:	4621      	mov	r1, r4
 8005c64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c68:	4621      	mov	r1, r4
 8005c6a:	008a      	lsls	r2, r1, #2
 8005c6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c70:	f7fb f80a 	bl	8000c88 <__aeabi_uldivmod>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4b60      	ldr	r3, [pc, #384]	@ (8005dfc <UART_SetConfig+0x4e4>)
 8005c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	011c      	lsls	r4, r3, #4
 8005c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c94:	4642      	mov	r2, r8
 8005c96:	464b      	mov	r3, r9
 8005c98:	1891      	adds	r1, r2, r2
 8005c9a:	61b9      	str	r1, [r7, #24]
 8005c9c:	415b      	adcs	r3, r3
 8005c9e:	61fb      	str	r3, [r7, #28]
 8005ca0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ca4:	4641      	mov	r1, r8
 8005ca6:	1851      	adds	r1, r2, r1
 8005ca8:	6139      	str	r1, [r7, #16]
 8005caa:	4649      	mov	r1, r9
 8005cac:	414b      	adcs	r3, r1
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	f04f 0200 	mov.w	r2, #0
 8005cb4:	f04f 0300 	mov.w	r3, #0
 8005cb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cbc:	4659      	mov	r1, fp
 8005cbe:	00cb      	lsls	r3, r1, #3
 8005cc0:	4651      	mov	r1, sl
 8005cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cc6:	4651      	mov	r1, sl
 8005cc8:	00ca      	lsls	r2, r1, #3
 8005cca:	4610      	mov	r0, r2
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4603      	mov	r3, r0
 8005cd0:	4642      	mov	r2, r8
 8005cd2:	189b      	adds	r3, r3, r2
 8005cd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005cd8:	464b      	mov	r3, r9
 8005cda:	460a      	mov	r2, r1
 8005cdc:	eb42 0303 	adc.w	r3, r2, r3
 8005ce0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005cf0:	f04f 0200 	mov.w	r2, #0
 8005cf4:	f04f 0300 	mov.w	r3, #0
 8005cf8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005cfc:	4649      	mov	r1, r9
 8005cfe:	008b      	lsls	r3, r1, #2
 8005d00:	4641      	mov	r1, r8
 8005d02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d06:	4641      	mov	r1, r8
 8005d08:	008a      	lsls	r2, r1, #2
 8005d0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d0e:	f7fa ffbb 	bl	8000c88 <__aeabi_uldivmod>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	4611      	mov	r1, r2
 8005d18:	4b38      	ldr	r3, [pc, #224]	@ (8005dfc <UART_SetConfig+0x4e4>)
 8005d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	2264      	movs	r2, #100	@ 0x64
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	1acb      	subs	r3, r1, r3
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	3332      	adds	r3, #50	@ 0x32
 8005d2c:	4a33      	ldr	r2, [pc, #204]	@ (8005dfc <UART_SetConfig+0x4e4>)
 8005d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d32:	095b      	lsrs	r3, r3, #5
 8005d34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d38:	441c      	add	r4, r3
 8005d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d3e:	2200      	movs	r2, #0
 8005d40:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d42:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d48:	4642      	mov	r2, r8
 8005d4a:	464b      	mov	r3, r9
 8005d4c:	1891      	adds	r1, r2, r2
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	415b      	adcs	r3, r3
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d58:	4641      	mov	r1, r8
 8005d5a:	1851      	adds	r1, r2, r1
 8005d5c:	6039      	str	r1, [r7, #0]
 8005d5e:	4649      	mov	r1, r9
 8005d60:	414b      	adcs	r3, r1
 8005d62:	607b      	str	r3, [r7, #4]
 8005d64:	f04f 0200 	mov.w	r2, #0
 8005d68:	f04f 0300 	mov.w	r3, #0
 8005d6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d70:	4659      	mov	r1, fp
 8005d72:	00cb      	lsls	r3, r1, #3
 8005d74:	4651      	mov	r1, sl
 8005d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d7a:	4651      	mov	r1, sl
 8005d7c:	00ca      	lsls	r2, r1, #3
 8005d7e:	4610      	mov	r0, r2
 8005d80:	4619      	mov	r1, r3
 8005d82:	4603      	mov	r3, r0
 8005d84:	4642      	mov	r2, r8
 8005d86:	189b      	adds	r3, r3, r2
 8005d88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d8a:	464b      	mov	r3, r9
 8005d8c:	460a      	mov	r2, r1
 8005d8e:	eb42 0303 	adc.w	r3, r2, r3
 8005d92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005da0:	f04f 0200 	mov.w	r2, #0
 8005da4:	f04f 0300 	mov.w	r3, #0
 8005da8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005dac:	4649      	mov	r1, r9
 8005dae:	008b      	lsls	r3, r1, #2
 8005db0:	4641      	mov	r1, r8
 8005db2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005db6:	4641      	mov	r1, r8
 8005db8:	008a      	lsls	r2, r1, #2
 8005dba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005dbe:	f7fa ff63 	bl	8000c88 <__aeabi_uldivmod>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005dfc <UART_SetConfig+0x4e4>)
 8005dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dcc:	095b      	lsrs	r3, r3, #5
 8005dce:	2164      	movs	r1, #100	@ 0x64
 8005dd0:	fb01 f303 	mul.w	r3, r1, r3
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	3332      	adds	r3, #50	@ 0x32
 8005dda:	4a08      	ldr	r2, [pc, #32]	@ (8005dfc <UART_SetConfig+0x4e4>)
 8005ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8005de0:	095b      	lsrs	r3, r3, #5
 8005de2:	f003 020f 	and.w	r2, r3, #15
 8005de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4422      	add	r2, r4
 8005dee:	609a      	str	r2, [r3, #8]
}
 8005df0:	bf00      	nop
 8005df2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005df6:	46bd      	mov	sp, r7
 8005df8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dfc:	51eb851f 	.word	0x51eb851f

08005e00 <malloc>:
 8005e00:	4b02      	ldr	r3, [pc, #8]	@ (8005e0c <malloc+0xc>)
 8005e02:	4601      	mov	r1, r0
 8005e04:	6818      	ldr	r0, [r3, #0]
 8005e06:	f000 b82d 	b.w	8005e64 <_malloc_r>
 8005e0a:	bf00      	nop
 8005e0c:	20000018 	.word	0x20000018

08005e10 <free>:
 8005e10:	4b02      	ldr	r3, [pc, #8]	@ (8005e1c <free+0xc>)
 8005e12:	4601      	mov	r1, r0
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	f001 be07 	b.w	8007a28 <_free_r>
 8005e1a:	bf00      	nop
 8005e1c:	20000018 	.word	0x20000018

08005e20 <sbrk_aligned>:
 8005e20:	b570      	push	{r4, r5, r6, lr}
 8005e22:	4e0f      	ldr	r6, [pc, #60]	@ (8005e60 <sbrk_aligned+0x40>)
 8005e24:	460c      	mov	r4, r1
 8005e26:	6831      	ldr	r1, [r6, #0]
 8005e28:	4605      	mov	r5, r0
 8005e2a:	b911      	cbnz	r1, 8005e32 <sbrk_aligned+0x12>
 8005e2c:	f000 ff60 	bl	8006cf0 <_sbrk_r>
 8005e30:	6030      	str	r0, [r6, #0]
 8005e32:	4621      	mov	r1, r4
 8005e34:	4628      	mov	r0, r5
 8005e36:	f000 ff5b 	bl	8006cf0 <_sbrk_r>
 8005e3a:	1c43      	adds	r3, r0, #1
 8005e3c:	d103      	bne.n	8005e46 <sbrk_aligned+0x26>
 8005e3e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005e42:	4620      	mov	r0, r4
 8005e44:	bd70      	pop	{r4, r5, r6, pc}
 8005e46:	1cc4      	adds	r4, r0, #3
 8005e48:	f024 0403 	bic.w	r4, r4, #3
 8005e4c:	42a0      	cmp	r0, r4
 8005e4e:	d0f8      	beq.n	8005e42 <sbrk_aligned+0x22>
 8005e50:	1a21      	subs	r1, r4, r0
 8005e52:	4628      	mov	r0, r5
 8005e54:	f000 ff4c 	bl	8006cf0 <_sbrk_r>
 8005e58:	3001      	adds	r0, #1
 8005e5a:	d1f2      	bne.n	8005e42 <sbrk_aligned+0x22>
 8005e5c:	e7ef      	b.n	8005e3e <sbrk_aligned+0x1e>
 8005e5e:	bf00      	nop
 8005e60:	2000033c 	.word	0x2000033c

08005e64 <_malloc_r>:
 8005e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e68:	1ccd      	adds	r5, r1, #3
 8005e6a:	f025 0503 	bic.w	r5, r5, #3
 8005e6e:	3508      	adds	r5, #8
 8005e70:	2d0c      	cmp	r5, #12
 8005e72:	bf38      	it	cc
 8005e74:	250c      	movcc	r5, #12
 8005e76:	2d00      	cmp	r5, #0
 8005e78:	4606      	mov	r6, r0
 8005e7a:	db01      	blt.n	8005e80 <_malloc_r+0x1c>
 8005e7c:	42a9      	cmp	r1, r5
 8005e7e:	d904      	bls.n	8005e8a <_malloc_r+0x26>
 8005e80:	230c      	movs	r3, #12
 8005e82:	6033      	str	r3, [r6, #0]
 8005e84:	2000      	movs	r0, #0
 8005e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f60 <_malloc_r+0xfc>
 8005e8e:	f000 f869 	bl	8005f64 <__malloc_lock>
 8005e92:	f8d8 3000 	ldr.w	r3, [r8]
 8005e96:	461c      	mov	r4, r3
 8005e98:	bb44      	cbnz	r4, 8005eec <_malloc_r+0x88>
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	f7ff ffbf 	bl	8005e20 <sbrk_aligned>
 8005ea2:	1c43      	adds	r3, r0, #1
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	d158      	bne.n	8005f5a <_malloc_r+0xf6>
 8005ea8:	f8d8 4000 	ldr.w	r4, [r8]
 8005eac:	4627      	mov	r7, r4
 8005eae:	2f00      	cmp	r7, #0
 8005eb0:	d143      	bne.n	8005f3a <_malloc_r+0xd6>
 8005eb2:	2c00      	cmp	r4, #0
 8005eb4:	d04b      	beq.n	8005f4e <_malloc_r+0xea>
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	4639      	mov	r1, r7
 8005eba:	4630      	mov	r0, r6
 8005ebc:	eb04 0903 	add.w	r9, r4, r3
 8005ec0:	f000 ff16 	bl	8006cf0 <_sbrk_r>
 8005ec4:	4581      	cmp	r9, r0
 8005ec6:	d142      	bne.n	8005f4e <_malloc_r+0xea>
 8005ec8:	6821      	ldr	r1, [r4, #0]
 8005eca:	1a6d      	subs	r5, r5, r1
 8005ecc:	4629      	mov	r1, r5
 8005ece:	4630      	mov	r0, r6
 8005ed0:	f7ff ffa6 	bl	8005e20 <sbrk_aligned>
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	d03a      	beq.n	8005f4e <_malloc_r+0xea>
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	442b      	add	r3, r5
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	f8d8 3000 	ldr.w	r3, [r8]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	bb62      	cbnz	r2, 8005f40 <_malloc_r+0xdc>
 8005ee6:	f8c8 7000 	str.w	r7, [r8]
 8005eea:	e00f      	b.n	8005f0c <_malloc_r+0xa8>
 8005eec:	6822      	ldr	r2, [r4, #0]
 8005eee:	1b52      	subs	r2, r2, r5
 8005ef0:	d420      	bmi.n	8005f34 <_malloc_r+0xd0>
 8005ef2:	2a0b      	cmp	r2, #11
 8005ef4:	d917      	bls.n	8005f26 <_malloc_r+0xc2>
 8005ef6:	1961      	adds	r1, r4, r5
 8005ef8:	42a3      	cmp	r3, r4
 8005efa:	6025      	str	r5, [r4, #0]
 8005efc:	bf18      	it	ne
 8005efe:	6059      	strne	r1, [r3, #4]
 8005f00:	6863      	ldr	r3, [r4, #4]
 8005f02:	bf08      	it	eq
 8005f04:	f8c8 1000 	streq.w	r1, [r8]
 8005f08:	5162      	str	r2, [r4, r5]
 8005f0a:	604b      	str	r3, [r1, #4]
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	f000 f82f 	bl	8005f70 <__malloc_unlock>
 8005f12:	f104 000b 	add.w	r0, r4, #11
 8005f16:	1d23      	adds	r3, r4, #4
 8005f18:	f020 0007 	bic.w	r0, r0, #7
 8005f1c:	1ac2      	subs	r2, r0, r3
 8005f1e:	bf1c      	itt	ne
 8005f20:	1a1b      	subne	r3, r3, r0
 8005f22:	50a3      	strne	r3, [r4, r2]
 8005f24:	e7af      	b.n	8005e86 <_malloc_r+0x22>
 8005f26:	6862      	ldr	r2, [r4, #4]
 8005f28:	42a3      	cmp	r3, r4
 8005f2a:	bf0c      	ite	eq
 8005f2c:	f8c8 2000 	streq.w	r2, [r8]
 8005f30:	605a      	strne	r2, [r3, #4]
 8005f32:	e7eb      	b.n	8005f0c <_malloc_r+0xa8>
 8005f34:	4623      	mov	r3, r4
 8005f36:	6864      	ldr	r4, [r4, #4]
 8005f38:	e7ae      	b.n	8005e98 <_malloc_r+0x34>
 8005f3a:	463c      	mov	r4, r7
 8005f3c:	687f      	ldr	r7, [r7, #4]
 8005f3e:	e7b6      	b.n	8005eae <_malloc_r+0x4a>
 8005f40:	461a      	mov	r2, r3
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	42a3      	cmp	r3, r4
 8005f46:	d1fb      	bne.n	8005f40 <_malloc_r+0xdc>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	6053      	str	r3, [r2, #4]
 8005f4c:	e7de      	b.n	8005f0c <_malloc_r+0xa8>
 8005f4e:	230c      	movs	r3, #12
 8005f50:	6033      	str	r3, [r6, #0]
 8005f52:	4630      	mov	r0, r6
 8005f54:	f000 f80c 	bl	8005f70 <__malloc_unlock>
 8005f58:	e794      	b.n	8005e84 <_malloc_r+0x20>
 8005f5a:	6005      	str	r5, [r0, #0]
 8005f5c:	e7d6      	b.n	8005f0c <_malloc_r+0xa8>
 8005f5e:	bf00      	nop
 8005f60:	20000340 	.word	0x20000340

08005f64 <__malloc_lock>:
 8005f64:	4801      	ldr	r0, [pc, #4]	@ (8005f6c <__malloc_lock+0x8>)
 8005f66:	f000 bf10 	b.w	8006d8a <__retarget_lock_acquire_recursive>
 8005f6a:	bf00      	nop
 8005f6c:	20000484 	.word	0x20000484

08005f70 <__malloc_unlock>:
 8005f70:	4801      	ldr	r0, [pc, #4]	@ (8005f78 <__malloc_unlock+0x8>)
 8005f72:	f000 bf0b 	b.w	8006d8c <__retarget_lock_release_recursive>
 8005f76:	bf00      	nop
 8005f78:	20000484 	.word	0x20000484

08005f7c <__cvt>:
 8005f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f80:	ec57 6b10 	vmov	r6, r7, d0
 8005f84:	2f00      	cmp	r7, #0
 8005f86:	460c      	mov	r4, r1
 8005f88:	4619      	mov	r1, r3
 8005f8a:	463b      	mov	r3, r7
 8005f8c:	bfbb      	ittet	lt
 8005f8e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005f92:	461f      	movlt	r7, r3
 8005f94:	2300      	movge	r3, #0
 8005f96:	232d      	movlt	r3, #45	@ 0x2d
 8005f98:	700b      	strb	r3, [r1, #0]
 8005f9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f9c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005fa0:	4691      	mov	r9, r2
 8005fa2:	f023 0820 	bic.w	r8, r3, #32
 8005fa6:	bfbc      	itt	lt
 8005fa8:	4632      	movlt	r2, r6
 8005faa:	4616      	movlt	r6, r2
 8005fac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005fb0:	d005      	beq.n	8005fbe <__cvt+0x42>
 8005fb2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005fb6:	d100      	bne.n	8005fba <__cvt+0x3e>
 8005fb8:	3401      	adds	r4, #1
 8005fba:	2102      	movs	r1, #2
 8005fbc:	e000      	b.n	8005fc0 <__cvt+0x44>
 8005fbe:	2103      	movs	r1, #3
 8005fc0:	ab03      	add	r3, sp, #12
 8005fc2:	9301      	str	r3, [sp, #4]
 8005fc4:	ab02      	add	r3, sp, #8
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	ec47 6b10 	vmov	d0, r6, r7
 8005fcc:	4653      	mov	r3, sl
 8005fce:	4622      	mov	r2, r4
 8005fd0:	f000 ff66 	bl	8006ea0 <_dtoa_r>
 8005fd4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005fd8:	4605      	mov	r5, r0
 8005fda:	d119      	bne.n	8006010 <__cvt+0x94>
 8005fdc:	f019 0f01 	tst.w	r9, #1
 8005fe0:	d00e      	beq.n	8006000 <__cvt+0x84>
 8005fe2:	eb00 0904 	add.w	r9, r0, r4
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	2300      	movs	r3, #0
 8005fea:	4630      	mov	r0, r6
 8005fec:	4639      	mov	r1, r7
 8005fee:	f7fa fd8b 	bl	8000b08 <__aeabi_dcmpeq>
 8005ff2:	b108      	cbz	r0, 8005ff8 <__cvt+0x7c>
 8005ff4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ff8:	2230      	movs	r2, #48	@ 0x30
 8005ffa:	9b03      	ldr	r3, [sp, #12]
 8005ffc:	454b      	cmp	r3, r9
 8005ffe:	d31e      	bcc.n	800603e <__cvt+0xc2>
 8006000:	9b03      	ldr	r3, [sp, #12]
 8006002:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006004:	1b5b      	subs	r3, r3, r5
 8006006:	4628      	mov	r0, r5
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	b004      	add	sp, #16
 800600c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006010:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006014:	eb00 0904 	add.w	r9, r0, r4
 8006018:	d1e5      	bne.n	8005fe6 <__cvt+0x6a>
 800601a:	7803      	ldrb	r3, [r0, #0]
 800601c:	2b30      	cmp	r3, #48	@ 0x30
 800601e:	d10a      	bne.n	8006036 <__cvt+0xba>
 8006020:	2200      	movs	r2, #0
 8006022:	2300      	movs	r3, #0
 8006024:	4630      	mov	r0, r6
 8006026:	4639      	mov	r1, r7
 8006028:	f7fa fd6e 	bl	8000b08 <__aeabi_dcmpeq>
 800602c:	b918      	cbnz	r0, 8006036 <__cvt+0xba>
 800602e:	f1c4 0401 	rsb	r4, r4, #1
 8006032:	f8ca 4000 	str.w	r4, [sl]
 8006036:	f8da 3000 	ldr.w	r3, [sl]
 800603a:	4499      	add	r9, r3
 800603c:	e7d3      	b.n	8005fe6 <__cvt+0x6a>
 800603e:	1c59      	adds	r1, r3, #1
 8006040:	9103      	str	r1, [sp, #12]
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	e7d9      	b.n	8005ffa <__cvt+0x7e>

08006046 <__exponent>:
 8006046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006048:	2900      	cmp	r1, #0
 800604a:	bfba      	itte	lt
 800604c:	4249      	neglt	r1, r1
 800604e:	232d      	movlt	r3, #45	@ 0x2d
 8006050:	232b      	movge	r3, #43	@ 0x2b
 8006052:	2909      	cmp	r1, #9
 8006054:	7002      	strb	r2, [r0, #0]
 8006056:	7043      	strb	r3, [r0, #1]
 8006058:	dd29      	ble.n	80060ae <__exponent+0x68>
 800605a:	f10d 0307 	add.w	r3, sp, #7
 800605e:	461d      	mov	r5, r3
 8006060:	270a      	movs	r7, #10
 8006062:	461a      	mov	r2, r3
 8006064:	fbb1 f6f7 	udiv	r6, r1, r7
 8006068:	fb07 1416 	mls	r4, r7, r6, r1
 800606c:	3430      	adds	r4, #48	@ 0x30
 800606e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006072:	460c      	mov	r4, r1
 8006074:	2c63      	cmp	r4, #99	@ 0x63
 8006076:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800607a:	4631      	mov	r1, r6
 800607c:	dcf1      	bgt.n	8006062 <__exponent+0x1c>
 800607e:	3130      	adds	r1, #48	@ 0x30
 8006080:	1e94      	subs	r4, r2, #2
 8006082:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006086:	1c41      	adds	r1, r0, #1
 8006088:	4623      	mov	r3, r4
 800608a:	42ab      	cmp	r3, r5
 800608c:	d30a      	bcc.n	80060a4 <__exponent+0x5e>
 800608e:	f10d 0309 	add.w	r3, sp, #9
 8006092:	1a9b      	subs	r3, r3, r2
 8006094:	42ac      	cmp	r4, r5
 8006096:	bf88      	it	hi
 8006098:	2300      	movhi	r3, #0
 800609a:	3302      	adds	r3, #2
 800609c:	4403      	add	r3, r0
 800609e:	1a18      	subs	r0, r3, r0
 80060a0:	b003      	add	sp, #12
 80060a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80060a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80060ac:	e7ed      	b.n	800608a <__exponent+0x44>
 80060ae:	2330      	movs	r3, #48	@ 0x30
 80060b0:	3130      	adds	r1, #48	@ 0x30
 80060b2:	7083      	strb	r3, [r0, #2]
 80060b4:	70c1      	strb	r1, [r0, #3]
 80060b6:	1d03      	adds	r3, r0, #4
 80060b8:	e7f1      	b.n	800609e <__exponent+0x58>
	...

080060bc <_printf_float>:
 80060bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c0:	b08d      	sub	sp, #52	@ 0x34
 80060c2:	460c      	mov	r4, r1
 80060c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80060c8:	4616      	mov	r6, r2
 80060ca:	461f      	mov	r7, r3
 80060cc:	4605      	mov	r5, r0
 80060ce:	f000 fdd7 	bl	8006c80 <_localeconv_r>
 80060d2:	6803      	ldr	r3, [r0, #0]
 80060d4:	9304      	str	r3, [sp, #16]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fa f8ea 	bl	80002b0 <strlen>
 80060dc:	2300      	movs	r3, #0
 80060de:	930a      	str	r3, [sp, #40]	@ 0x28
 80060e0:	f8d8 3000 	ldr.w	r3, [r8]
 80060e4:	9005      	str	r0, [sp, #20]
 80060e6:	3307      	adds	r3, #7
 80060e8:	f023 0307 	bic.w	r3, r3, #7
 80060ec:	f103 0208 	add.w	r2, r3, #8
 80060f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80060f4:	f8d4 b000 	ldr.w	fp, [r4]
 80060f8:	f8c8 2000 	str.w	r2, [r8]
 80060fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006100:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006104:	9307      	str	r3, [sp, #28]
 8006106:	f8cd 8018 	str.w	r8, [sp, #24]
 800610a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800610e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006112:	4b9c      	ldr	r3, [pc, #624]	@ (8006384 <_printf_float+0x2c8>)
 8006114:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006118:	f7fa fd28 	bl	8000b6c <__aeabi_dcmpun>
 800611c:	bb70      	cbnz	r0, 800617c <_printf_float+0xc0>
 800611e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006122:	4b98      	ldr	r3, [pc, #608]	@ (8006384 <_printf_float+0x2c8>)
 8006124:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006128:	f7fa fd02 	bl	8000b30 <__aeabi_dcmple>
 800612c:	bb30      	cbnz	r0, 800617c <_printf_float+0xc0>
 800612e:	2200      	movs	r2, #0
 8006130:	2300      	movs	r3, #0
 8006132:	4640      	mov	r0, r8
 8006134:	4649      	mov	r1, r9
 8006136:	f7fa fcf1 	bl	8000b1c <__aeabi_dcmplt>
 800613a:	b110      	cbz	r0, 8006142 <_printf_float+0x86>
 800613c:	232d      	movs	r3, #45	@ 0x2d
 800613e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006142:	4a91      	ldr	r2, [pc, #580]	@ (8006388 <_printf_float+0x2cc>)
 8006144:	4b91      	ldr	r3, [pc, #580]	@ (800638c <_printf_float+0x2d0>)
 8006146:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800614a:	bf94      	ite	ls
 800614c:	4690      	movls	r8, r2
 800614e:	4698      	movhi	r8, r3
 8006150:	2303      	movs	r3, #3
 8006152:	6123      	str	r3, [r4, #16]
 8006154:	f02b 0304 	bic.w	r3, fp, #4
 8006158:	6023      	str	r3, [r4, #0]
 800615a:	f04f 0900 	mov.w	r9, #0
 800615e:	9700      	str	r7, [sp, #0]
 8006160:	4633      	mov	r3, r6
 8006162:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006164:	4621      	mov	r1, r4
 8006166:	4628      	mov	r0, r5
 8006168:	f000 f9d2 	bl	8006510 <_printf_common>
 800616c:	3001      	adds	r0, #1
 800616e:	f040 808d 	bne.w	800628c <_printf_float+0x1d0>
 8006172:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006176:	b00d      	add	sp, #52	@ 0x34
 8006178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617c:	4642      	mov	r2, r8
 800617e:	464b      	mov	r3, r9
 8006180:	4640      	mov	r0, r8
 8006182:	4649      	mov	r1, r9
 8006184:	f7fa fcf2 	bl	8000b6c <__aeabi_dcmpun>
 8006188:	b140      	cbz	r0, 800619c <_printf_float+0xe0>
 800618a:	464b      	mov	r3, r9
 800618c:	2b00      	cmp	r3, #0
 800618e:	bfbc      	itt	lt
 8006190:	232d      	movlt	r3, #45	@ 0x2d
 8006192:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006196:	4a7e      	ldr	r2, [pc, #504]	@ (8006390 <_printf_float+0x2d4>)
 8006198:	4b7e      	ldr	r3, [pc, #504]	@ (8006394 <_printf_float+0x2d8>)
 800619a:	e7d4      	b.n	8006146 <_printf_float+0x8a>
 800619c:	6863      	ldr	r3, [r4, #4]
 800619e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80061a2:	9206      	str	r2, [sp, #24]
 80061a4:	1c5a      	adds	r2, r3, #1
 80061a6:	d13b      	bne.n	8006220 <_printf_float+0x164>
 80061a8:	2306      	movs	r3, #6
 80061aa:	6063      	str	r3, [r4, #4]
 80061ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80061b0:	2300      	movs	r3, #0
 80061b2:	6022      	str	r2, [r4, #0]
 80061b4:	9303      	str	r3, [sp, #12]
 80061b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80061b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80061bc:	ab09      	add	r3, sp, #36	@ 0x24
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	6861      	ldr	r1, [r4, #4]
 80061c2:	ec49 8b10 	vmov	d0, r8, r9
 80061c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80061ca:	4628      	mov	r0, r5
 80061cc:	f7ff fed6 	bl	8005f7c <__cvt>
 80061d0:	9b06      	ldr	r3, [sp, #24]
 80061d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80061d4:	2b47      	cmp	r3, #71	@ 0x47
 80061d6:	4680      	mov	r8, r0
 80061d8:	d129      	bne.n	800622e <_printf_float+0x172>
 80061da:	1cc8      	adds	r0, r1, #3
 80061dc:	db02      	blt.n	80061e4 <_printf_float+0x128>
 80061de:	6863      	ldr	r3, [r4, #4]
 80061e0:	4299      	cmp	r1, r3
 80061e2:	dd41      	ble.n	8006268 <_printf_float+0x1ac>
 80061e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80061e8:	fa5f fa8a 	uxtb.w	sl, sl
 80061ec:	3901      	subs	r1, #1
 80061ee:	4652      	mov	r2, sl
 80061f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80061f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80061f6:	f7ff ff26 	bl	8006046 <__exponent>
 80061fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061fc:	1813      	adds	r3, r2, r0
 80061fe:	2a01      	cmp	r2, #1
 8006200:	4681      	mov	r9, r0
 8006202:	6123      	str	r3, [r4, #16]
 8006204:	dc02      	bgt.n	800620c <_printf_float+0x150>
 8006206:	6822      	ldr	r2, [r4, #0]
 8006208:	07d2      	lsls	r2, r2, #31
 800620a:	d501      	bpl.n	8006210 <_printf_float+0x154>
 800620c:	3301      	adds	r3, #1
 800620e:	6123      	str	r3, [r4, #16]
 8006210:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0a2      	beq.n	800615e <_printf_float+0xa2>
 8006218:	232d      	movs	r3, #45	@ 0x2d
 800621a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800621e:	e79e      	b.n	800615e <_printf_float+0xa2>
 8006220:	9a06      	ldr	r2, [sp, #24]
 8006222:	2a47      	cmp	r2, #71	@ 0x47
 8006224:	d1c2      	bne.n	80061ac <_printf_float+0xf0>
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1c0      	bne.n	80061ac <_printf_float+0xf0>
 800622a:	2301      	movs	r3, #1
 800622c:	e7bd      	b.n	80061aa <_printf_float+0xee>
 800622e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006232:	d9db      	bls.n	80061ec <_printf_float+0x130>
 8006234:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006238:	d118      	bne.n	800626c <_printf_float+0x1b0>
 800623a:	2900      	cmp	r1, #0
 800623c:	6863      	ldr	r3, [r4, #4]
 800623e:	dd0b      	ble.n	8006258 <_printf_float+0x19c>
 8006240:	6121      	str	r1, [r4, #16]
 8006242:	b913      	cbnz	r3, 800624a <_printf_float+0x18e>
 8006244:	6822      	ldr	r2, [r4, #0]
 8006246:	07d0      	lsls	r0, r2, #31
 8006248:	d502      	bpl.n	8006250 <_printf_float+0x194>
 800624a:	3301      	adds	r3, #1
 800624c:	440b      	add	r3, r1
 800624e:	6123      	str	r3, [r4, #16]
 8006250:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006252:	f04f 0900 	mov.w	r9, #0
 8006256:	e7db      	b.n	8006210 <_printf_float+0x154>
 8006258:	b913      	cbnz	r3, 8006260 <_printf_float+0x1a4>
 800625a:	6822      	ldr	r2, [r4, #0]
 800625c:	07d2      	lsls	r2, r2, #31
 800625e:	d501      	bpl.n	8006264 <_printf_float+0x1a8>
 8006260:	3302      	adds	r3, #2
 8006262:	e7f4      	b.n	800624e <_printf_float+0x192>
 8006264:	2301      	movs	r3, #1
 8006266:	e7f2      	b.n	800624e <_printf_float+0x192>
 8006268:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800626c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800626e:	4299      	cmp	r1, r3
 8006270:	db05      	blt.n	800627e <_printf_float+0x1c2>
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	6121      	str	r1, [r4, #16]
 8006276:	07d8      	lsls	r0, r3, #31
 8006278:	d5ea      	bpl.n	8006250 <_printf_float+0x194>
 800627a:	1c4b      	adds	r3, r1, #1
 800627c:	e7e7      	b.n	800624e <_printf_float+0x192>
 800627e:	2900      	cmp	r1, #0
 8006280:	bfd4      	ite	le
 8006282:	f1c1 0202 	rsble	r2, r1, #2
 8006286:	2201      	movgt	r2, #1
 8006288:	4413      	add	r3, r2
 800628a:	e7e0      	b.n	800624e <_printf_float+0x192>
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	055a      	lsls	r2, r3, #21
 8006290:	d407      	bmi.n	80062a2 <_printf_float+0x1e6>
 8006292:	6923      	ldr	r3, [r4, #16]
 8006294:	4642      	mov	r2, r8
 8006296:	4631      	mov	r1, r6
 8006298:	4628      	mov	r0, r5
 800629a:	47b8      	blx	r7
 800629c:	3001      	adds	r0, #1
 800629e:	d12b      	bne.n	80062f8 <_printf_float+0x23c>
 80062a0:	e767      	b.n	8006172 <_printf_float+0xb6>
 80062a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80062a6:	f240 80dd 	bls.w	8006464 <_printf_float+0x3a8>
 80062aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80062ae:	2200      	movs	r2, #0
 80062b0:	2300      	movs	r3, #0
 80062b2:	f7fa fc29 	bl	8000b08 <__aeabi_dcmpeq>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	d033      	beq.n	8006322 <_printf_float+0x266>
 80062ba:	4a37      	ldr	r2, [pc, #220]	@ (8006398 <_printf_float+0x2dc>)
 80062bc:	2301      	movs	r3, #1
 80062be:	4631      	mov	r1, r6
 80062c0:	4628      	mov	r0, r5
 80062c2:	47b8      	blx	r7
 80062c4:	3001      	adds	r0, #1
 80062c6:	f43f af54 	beq.w	8006172 <_printf_float+0xb6>
 80062ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80062ce:	4543      	cmp	r3, r8
 80062d0:	db02      	blt.n	80062d8 <_printf_float+0x21c>
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	07d8      	lsls	r0, r3, #31
 80062d6:	d50f      	bpl.n	80062f8 <_printf_float+0x23c>
 80062d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062dc:	4631      	mov	r1, r6
 80062de:	4628      	mov	r0, r5
 80062e0:	47b8      	blx	r7
 80062e2:	3001      	adds	r0, #1
 80062e4:	f43f af45 	beq.w	8006172 <_printf_float+0xb6>
 80062e8:	f04f 0900 	mov.w	r9, #0
 80062ec:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80062f0:	f104 0a1a 	add.w	sl, r4, #26
 80062f4:	45c8      	cmp	r8, r9
 80062f6:	dc09      	bgt.n	800630c <_printf_float+0x250>
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	079b      	lsls	r3, r3, #30
 80062fc:	f100 8103 	bmi.w	8006506 <_printf_float+0x44a>
 8006300:	68e0      	ldr	r0, [r4, #12]
 8006302:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006304:	4298      	cmp	r0, r3
 8006306:	bfb8      	it	lt
 8006308:	4618      	movlt	r0, r3
 800630a:	e734      	b.n	8006176 <_printf_float+0xba>
 800630c:	2301      	movs	r3, #1
 800630e:	4652      	mov	r2, sl
 8006310:	4631      	mov	r1, r6
 8006312:	4628      	mov	r0, r5
 8006314:	47b8      	blx	r7
 8006316:	3001      	adds	r0, #1
 8006318:	f43f af2b 	beq.w	8006172 <_printf_float+0xb6>
 800631c:	f109 0901 	add.w	r9, r9, #1
 8006320:	e7e8      	b.n	80062f4 <_printf_float+0x238>
 8006322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006324:	2b00      	cmp	r3, #0
 8006326:	dc39      	bgt.n	800639c <_printf_float+0x2e0>
 8006328:	4a1b      	ldr	r2, [pc, #108]	@ (8006398 <_printf_float+0x2dc>)
 800632a:	2301      	movs	r3, #1
 800632c:	4631      	mov	r1, r6
 800632e:	4628      	mov	r0, r5
 8006330:	47b8      	blx	r7
 8006332:	3001      	adds	r0, #1
 8006334:	f43f af1d 	beq.w	8006172 <_printf_float+0xb6>
 8006338:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800633c:	ea59 0303 	orrs.w	r3, r9, r3
 8006340:	d102      	bne.n	8006348 <_printf_float+0x28c>
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	07d9      	lsls	r1, r3, #31
 8006346:	d5d7      	bpl.n	80062f8 <_printf_float+0x23c>
 8006348:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800634c:	4631      	mov	r1, r6
 800634e:	4628      	mov	r0, r5
 8006350:	47b8      	blx	r7
 8006352:	3001      	adds	r0, #1
 8006354:	f43f af0d 	beq.w	8006172 <_printf_float+0xb6>
 8006358:	f04f 0a00 	mov.w	sl, #0
 800635c:	f104 0b1a 	add.w	fp, r4, #26
 8006360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006362:	425b      	negs	r3, r3
 8006364:	4553      	cmp	r3, sl
 8006366:	dc01      	bgt.n	800636c <_printf_float+0x2b0>
 8006368:	464b      	mov	r3, r9
 800636a:	e793      	b.n	8006294 <_printf_float+0x1d8>
 800636c:	2301      	movs	r3, #1
 800636e:	465a      	mov	r2, fp
 8006370:	4631      	mov	r1, r6
 8006372:	4628      	mov	r0, r5
 8006374:	47b8      	blx	r7
 8006376:	3001      	adds	r0, #1
 8006378:	f43f aefb 	beq.w	8006172 <_printf_float+0xb6>
 800637c:	f10a 0a01 	add.w	sl, sl, #1
 8006380:	e7ee      	b.n	8006360 <_printf_float+0x2a4>
 8006382:	bf00      	nop
 8006384:	7fefffff 	.word	0x7fefffff
 8006388:	0800a164 	.word	0x0800a164
 800638c:	0800a168 	.word	0x0800a168
 8006390:	0800a16c 	.word	0x0800a16c
 8006394:	0800a170 	.word	0x0800a170
 8006398:	0800a174 	.word	0x0800a174
 800639c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800639e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80063a2:	4553      	cmp	r3, sl
 80063a4:	bfa8      	it	ge
 80063a6:	4653      	movge	r3, sl
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	4699      	mov	r9, r3
 80063ac:	dc36      	bgt.n	800641c <_printf_float+0x360>
 80063ae:	f04f 0b00 	mov.w	fp, #0
 80063b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063b6:	f104 021a 	add.w	r2, r4, #26
 80063ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063bc:	9306      	str	r3, [sp, #24]
 80063be:	eba3 0309 	sub.w	r3, r3, r9
 80063c2:	455b      	cmp	r3, fp
 80063c4:	dc31      	bgt.n	800642a <_printf_float+0x36e>
 80063c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063c8:	459a      	cmp	sl, r3
 80063ca:	dc3a      	bgt.n	8006442 <_printf_float+0x386>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	07da      	lsls	r2, r3, #31
 80063d0:	d437      	bmi.n	8006442 <_printf_float+0x386>
 80063d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063d4:	ebaa 0903 	sub.w	r9, sl, r3
 80063d8:	9b06      	ldr	r3, [sp, #24]
 80063da:	ebaa 0303 	sub.w	r3, sl, r3
 80063de:	4599      	cmp	r9, r3
 80063e0:	bfa8      	it	ge
 80063e2:	4699      	movge	r9, r3
 80063e4:	f1b9 0f00 	cmp.w	r9, #0
 80063e8:	dc33      	bgt.n	8006452 <_printf_float+0x396>
 80063ea:	f04f 0800 	mov.w	r8, #0
 80063ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063f2:	f104 0b1a 	add.w	fp, r4, #26
 80063f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063f8:	ebaa 0303 	sub.w	r3, sl, r3
 80063fc:	eba3 0309 	sub.w	r3, r3, r9
 8006400:	4543      	cmp	r3, r8
 8006402:	f77f af79 	ble.w	80062f8 <_printf_float+0x23c>
 8006406:	2301      	movs	r3, #1
 8006408:	465a      	mov	r2, fp
 800640a:	4631      	mov	r1, r6
 800640c:	4628      	mov	r0, r5
 800640e:	47b8      	blx	r7
 8006410:	3001      	adds	r0, #1
 8006412:	f43f aeae 	beq.w	8006172 <_printf_float+0xb6>
 8006416:	f108 0801 	add.w	r8, r8, #1
 800641a:	e7ec      	b.n	80063f6 <_printf_float+0x33a>
 800641c:	4642      	mov	r2, r8
 800641e:	4631      	mov	r1, r6
 8006420:	4628      	mov	r0, r5
 8006422:	47b8      	blx	r7
 8006424:	3001      	adds	r0, #1
 8006426:	d1c2      	bne.n	80063ae <_printf_float+0x2f2>
 8006428:	e6a3      	b.n	8006172 <_printf_float+0xb6>
 800642a:	2301      	movs	r3, #1
 800642c:	4631      	mov	r1, r6
 800642e:	4628      	mov	r0, r5
 8006430:	9206      	str	r2, [sp, #24]
 8006432:	47b8      	blx	r7
 8006434:	3001      	adds	r0, #1
 8006436:	f43f ae9c 	beq.w	8006172 <_printf_float+0xb6>
 800643a:	9a06      	ldr	r2, [sp, #24]
 800643c:	f10b 0b01 	add.w	fp, fp, #1
 8006440:	e7bb      	b.n	80063ba <_printf_float+0x2fe>
 8006442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006446:	4631      	mov	r1, r6
 8006448:	4628      	mov	r0, r5
 800644a:	47b8      	blx	r7
 800644c:	3001      	adds	r0, #1
 800644e:	d1c0      	bne.n	80063d2 <_printf_float+0x316>
 8006450:	e68f      	b.n	8006172 <_printf_float+0xb6>
 8006452:	9a06      	ldr	r2, [sp, #24]
 8006454:	464b      	mov	r3, r9
 8006456:	4442      	add	r2, r8
 8006458:	4631      	mov	r1, r6
 800645a:	4628      	mov	r0, r5
 800645c:	47b8      	blx	r7
 800645e:	3001      	adds	r0, #1
 8006460:	d1c3      	bne.n	80063ea <_printf_float+0x32e>
 8006462:	e686      	b.n	8006172 <_printf_float+0xb6>
 8006464:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006468:	f1ba 0f01 	cmp.w	sl, #1
 800646c:	dc01      	bgt.n	8006472 <_printf_float+0x3b6>
 800646e:	07db      	lsls	r3, r3, #31
 8006470:	d536      	bpl.n	80064e0 <_printf_float+0x424>
 8006472:	2301      	movs	r3, #1
 8006474:	4642      	mov	r2, r8
 8006476:	4631      	mov	r1, r6
 8006478:	4628      	mov	r0, r5
 800647a:	47b8      	blx	r7
 800647c:	3001      	adds	r0, #1
 800647e:	f43f ae78 	beq.w	8006172 <_printf_float+0xb6>
 8006482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006486:	4631      	mov	r1, r6
 8006488:	4628      	mov	r0, r5
 800648a:	47b8      	blx	r7
 800648c:	3001      	adds	r0, #1
 800648e:	f43f ae70 	beq.w	8006172 <_printf_float+0xb6>
 8006492:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006496:	2200      	movs	r2, #0
 8006498:	2300      	movs	r3, #0
 800649a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800649e:	f7fa fb33 	bl	8000b08 <__aeabi_dcmpeq>
 80064a2:	b9c0      	cbnz	r0, 80064d6 <_printf_float+0x41a>
 80064a4:	4653      	mov	r3, sl
 80064a6:	f108 0201 	add.w	r2, r8, #1
 80064aa:	4631      	mov	r1, r6
 80064ac:	4628      	mov	r0, r5
 80064ae:	47b8      	blx	r7
 80064b0:	3001      	adds	r0, #1
 80064b2:	d10c      	bne.n	80064ce <_printf_float+0x412>
 80064b4:	e65d      	b.n	8006172 <_printf_float+0xb6>
 80064b6:	2301      	movs	r3, #1
 80064b8:	465a      	mov	r2, fp
 80064ba:	4631      	mov	r1, r6
 80064bc:	4628      	mov	r0, r5
 80064be:	47b8      	blx	r7
 80064c0:	3001      	adds	r0, #1
 80064c2:	f43f ae56 	beq.w	8006172 <_printf_float+0xb6>
 80064c6:	f108 0801 	add.w	r8, r8, #1
 80064ca:	45d0      	cmp	r8, sl
 80064cc:	dbf3      	blt.n	80064b6 <_printf_float+0x3fa>
 80064ce:	464b      	mov	r3, r9
 80064d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80064d4:	e6df      	b.n	8006296 <_printf_float+0x1da>
 80064d6:	f04f 0800 	mov.w	r8, #0
 80064da:	f104 0b1a 	add.w	fp, r4, #26
 80064de:	e7f4      	b.n	80064ca <_printf_float+0x40e>
 80064e0:	2301      	movs	r3, #1
 80064e2:	4642      	mov	r2, r8
 80064e4:	e7e1      	b.n	80064aa <_printf_float+0x3ee>
 80064e6:	2301      	movs	r3, #1
 80064e8:	464a      	mov	r2, r9
 80064ea:	4631      	mov	r1, r6
 80064ec:	4628      	mov	r0, r5
 80064ee:	47b8      	blx	r7
 80064f0:	3001      	adds	r0, #1
 80064f2:	f43f ae3e 	beq.w	8006172 <_printf_float+0xb6>
 80064f6:	f108 0801 	add.w	r8, r8, #1
 80064fa:	68e3      	ldr	r3, [r4, #12]
 80064fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80064fe:	1a5b      	subs	r3, r3, r1
 8006500:	4543      	cmp	r3, r8
 8006502:	dcf0      	bgt.n	80064e6 <_printf_float+0x42a>
 8006504:	e6fc      	b.n	8006300 <_printf_float+0x244>
 8006506:	f04f 0800 	mov.w	r8, #0
 800650a:	f104 0919 	add.w	r9, r4, #25
 800650e:	e7f4      	b.n	80064fa <_printf_float+0x43e>

08006510 <_printf_common>:
 8006510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006514:	4616      	mov	r6, r2
 8006516:	4698      	mov	r8, r3
 8006518:	688a      	ldr	r2, [r1, #8]
 800651a:	690b      	ldr	r3, [r1, #16]
 800651c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006520:	4293      	cmp	r3, r2
 8006522:	bfb8      	it	lt
 8006524:	4613      	movlt	r3, r2
 8006526:	6033      	str	r3, [r6, #0]
 8006528:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800652c:	4607      	mov	r7, r0
 800652e:	460c      	mov	r4, r1
 8006530:	b10a      	cbz	r2, 8006536 <_printf_common+0x26>
 8006532:	3301      	adds	r3, #1
 8006534:	6033      	str	r3, [r6, #0]
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	0699      	lsls	r1, r3, #26
 800653a:	bf42      	ittt	mi
 800653c:	6833      	ldrmi	r3, [r6, #0]
 800653e:	3302      	addmi	r3, #2
 8006540:	6033      	strmi	r3, [r6, #0]
 8006542:	6825      	ldr	r5, [r4, #0]
 8006544:	f015 0506 	ands.w	r5, r5, #6
 8006548:	d106      	bne.n	8006558 <_printf_common+0x48>
 800654a:	f104 0a19 	add.w	sl, r4, #25
 800654e:	68e3      	ldr	r3, [r4, #12]
 8006550:	6832      	ldr	r2, [r6, #0]
 8006552:	1a9b      	subs	r3, r3, r2
 8006554:	42ab      	cmp	r3, r5
 8006556:	dc26      	bgt.n	80065a6 <_printf_common+0x96>
 8006558:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800655c:	6822      	ldr	r2, [r4, #0]
 800655e:	3b00      	subs	r3, #0
 8006560:	bf18      	it	ne
 8006562:	2301      	movne	r3, #1
 8006564:	0692      	lsls	r2, r2, #26
 8006566:	d42b      	bmi.n	80065c0 <_printf_common+0xb0>
 8006568:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800656c:	4641      	mov	r1, r8
 800656e:	4638      	mov	r0, r7
 8006570:	47c8      	blx	r9
 8006572:	3001      	adds	r0, #1
 8006574:	d01e      	beq.n	80065b4 <_printf_common+0xa4>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	6922      	ldr	r2, [r4, #16]
 800657a:	f003 0306 	and.w	r3, r3, #6
 800657e:	2b04      	cmp	r3, #4
 8006580:	bf02      	ittt	eq
 8006582:	68e5      	ldreq	r5, [r4, #12]
 8006584:	6833      	ldreq	r3, [r6, #0]
 8006586:	1aed      	subeq	r5, r5, r3
 8006588:	68a3      	ldr	r3, [r4, #8]
 800658a:	bf0c      	ite	eq
 800658c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006590:	2500      	movne	r5, #0
 8006592:	4293      	cmp	r3, r2
 8006594:	bfc4      	itt	gt
 8006596:	1a9b      	subgt	r3, r3, r2
 8006598:	18ed      	addgt	r5, r5, r3
 800659a:	2600      	movs	r6, #0
 800659c:	341a      	adds	r4, #26
 800659e:	42b5      	cmp	r5, r6
 80065a0:	d11a      	bne.n	80065d8 <_printf_common+0xc8>
 80065a2:	2000      	movs	r0, #0
 80065a4:	e008      	b.n	80065b8 <_printf_common+0xa8>
 80065a6:	2301      	movs	r3, #1
 80065a8:	4652      	mov	r2, sl
 80065aa:	4641      	mov	r1, r8
 80065ac:	4638      	mov	r0, r7
 80065ae:	47c8      	blx	r9
 80065b0:	3001      	adds	r0, #1
 80065b2:	d103      	bne.n	80065bc <_printf_common+0xac>
 80065b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065bc:	3501      	adds	r5, #1
 80065be:	e7c6      	b.n	800654e <_printf_common+0x3e>
 80065c0:	18e1      	adds	r1, r4, r3
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	2030      	movs	r0, #48	@ 0x30
 80065c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065ca:	4422      	add	r2, r4
 80065cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065d4:	3302      	adds	r3, #2
 80065d6:	e7c7      	b.n	8006568 <_printf_common+0x58>
 80065d8:	2301      	movs	r3, #1
 80065da:	4622      	mov	r2, r4
 80065dc:	4641      	mov	r1, r8
 80065de:	4638      	mov	r0, r7
 80065e0:	47c8      	blx	r9
 80065e2:	3001      	adds	r0, #1
 80065e4:	d0e6      	beq.n	80065b4 <_printf_common+0xa4>
 80065e6:	3601      	adds	r6, #1
 80065e8:	e7d9      	b.n	800659e <_printf_common+0x8e>
	...

080065ec <_printf_i>:
 80065ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065f0:	7e0f      	ldrb	r7, [r1, #24]
 80065f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065f4:	2f78      	cmp	r7, #120	@ 0x78
 80065f6:	4691      	mov	r9, r2
 80065f8:	4680      	mov	r8, r0
 80065fa:	460c      	mov	r4, r1
 80065fc:	469a      	mov	sl, r3
 80065fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006602:	d807      	bhi.n	8006614 <_printf_i+0x28>
 8006604:	2f62      	cmp	r7, #98	@ 0x62
 8006606:	d80a      	bhi.n	800661e <_printf_i+0x32>
 8006608:	2f00      	cmp	r7, #0
 800660a:	f000 80d2 	beq.w	80067b2 <_printf_i+0x1c6>
 800660e:	2f58      	cmp	r7, #88	@ 0x58
 8006610:	f000 80b9 	beq.w	8006786 <_printf_i+0x19a>
 8006614:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006618:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800661c:	e03a      	b.n	8006694 <_printf_i+0xa8>
 800661e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006622:	2b15      	cmp	r3, #21
 8006624:	d8f6      	bhi.n	8006614 <_printf_i+0x28>
 8006626:	a101      	add	r1, pc, #4	@ (adr r1, 800662c <_printf_i+0x40>)
 8006628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800662c:	08006685 	.word	0x08006685
 8006630:	08006699 	.word	0x08006699
 8006634:	08006615 	.word	0x08006615
 8006638:	08006615 	.word	0x08006615
 800663c:	08006615 	.word	0x08006615
 8006640:	08006615 	.word	0x08006615
 8006644:	08006699 	.word	0x08006699
 8006648:	08006615 	.word	0x08006615
 800664c:	08006615 	.word	0x08006615
 8006650:	08006615 	.word	0x08006615
 8006654:	08006615 	.word	0x08006615
 8006658:	08006799 	.word	0x08006799
 800665c:	080066c3 	.word	0x080066c3
 8006660:	08006753 	.word	0x08006753
 8006664:	08006615 	.word	0x08006615
 8006668:	08006615 	.word	0x08006615
 800666c:	080067bb 	.word	0x080067bb
 8006670:	08006615 	.word	0x08006615
 8006674:	080066c3 	.word	0x080066c3
 8006678:	08006615 	.word	0x08006615
 800667c:	08006615 	.word	0x08006615
 8006680:	0800675b 	.word	0x0800675b
 8006684:	6833      	ldr	r3, [r6, #0]
 8006686:	1d1a      	adds	r2, r3, #4
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	6032      	str	r2, [r6, #0]
 800668c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006690:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006694:	2301      	movs	r3, #1
 8006696:	e09d      	b.n	80067d4 <_printf_i+0x1e8>
 8006698:	6833      	ldr	r3, [r6, #0]
 800669a:	6820      	ldr	r0, [r4, #0]
 800669c:	1d19      	adds	r1, r3, #4
 800669e:	6031      	str	r1, [r6, #0]
 80066a0:	0606      	lsls	r6, r0, #24
 80066a2:	d501      	bpl.n	80066a8 <_printf_i+0xbc>
 80066a4:	681d      	ldr	r5, [r3, #0]
 80066a6:	e003      	b.n	80066b0 <_printf_i+0xc4>
 80066a8:	0645      	lsls	r5, r0, #25
 80066aa:	d5fb      	bpl.n	80066a4 <_printf_i+0xb8>
 80066ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066b0:	2d00      	cmp	r5, #0
 80066b2:	da03      	bge.n	80066bc <_printf_i+0xd0>
 80066b4:	232d      	movs	r3, #45	@ 0x2d
 80066b6:	426d      	negs	r5, r5
 80066b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066bc:	4859      	ldr	r0, [pc, #356]	@ (8006824 <_printf_i+0x238>)
 80066be:	230a      	movs	r3, #10
 80066c0:	e011      	b.n	80066e6 <_printf_i+0xfa>
 80066c2:	6821      	ldr	r1, [r4, #0]
 80066c4:	6833      	ldr	r3, [r6, #0]
 80066c6:	0608      	lsls	r0, r1, #24
 80066c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80066cc:	d402      	bmi.n	80066d4 <_printf_i+0xe8>
 80066ce:	0649      	lsls	r1, r1, #25
 80066d0:	bf48      	it	mi
 80066d2:	b2ad      	uxthmi	r5, r5
 80066d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80066d6:	4853      	ldr	r0, [pc, #332]	@ (8006824 <_printf_i+0x238>)
 80066d8:	6033      	str	r3, [r6, #0]
 80066da:	bf14      	ite	ne
 80066dc:	230a      	movne	r3, #10
 80066de:	2308      	moveq	r3, #8
 80066e0:	2100      	movs	r1, #0
 80066e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066e6:	6866      	ldr	r6, [r4, #4]
 80066e8:	60a6      	str	r6, [r4, #8]
 80066ea:	2e00      	cmp	r6, #0
 80066ec:	bfa2      	ittt	ge
 80066ee:	6821      	ldrge	r1, [r4, #0]
 80066f0:	f021 0104 	bicge.w	r1, r1, #4
 80066f4:	6021      	strge	r1, [r4, #0]
 80066f6:	b90d      	cbnz	r5, 80066fc <_printf_i+0x110>
 80066f8:	2e00      	cmp	r6, #0
 80066fa:	d04b      	beq.n	8006794 <_printf_i+0x1a8>
 80066fc:	4616      	mov	r6, r2
 80066fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006702:	fb03 5711 	mls	r7, r3, r1, r5
 8006706:	5dc7      	ldrb	r7, [r0, r7]
 8006708:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800670c:	462f      	mov	r7, r5
 800670e:	42bb      	cmp	r3, r7
 8006710:	460d      	mov	r5, r1
 8006712:	d9f4      	bls.n	80066fe <_printf_i+0x112>
 8006714:	2b08      	cmp	r3, #8
 8006716:	d10b      	bne.n	8006730 <_printf_i+0x144>
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	07df      	lsls	r7, r3, #31
 800671c:	d508      	bpl.n	8006730 <_printf_i+0x144>
 800671e:	6923      	ldr	r3, [r4, #16]
 8006720:	6861      	ldr	r1, [r4, #4]
 8006722:	4299      	cmp	r1, r3
 8006724:	bfde      	ittt	le
 8006726:	2330      	movle	r3, #48	@ 0x30
 8006728:	f806 3c01 	strble.w	r3, [r6, #-1]
 800672c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006730:	1b92      	subs	r2, r2, r6
 8006732:	6122      	str	r2, [r4, #16]
 8006734:	f8cd a000 	str.w	sl, [sp]
 8006738:	464b      	mov	r3, r9
 800673a:	aa03      	add	r2, sp, #12
 800673c:	4621      	mov	r1, r4
 800673e:	4640      	mov	r0, r8
 8006740:	f7ff fee6 	bl	8006510 <_printf_common>
 8006744:	3001      	adds	r0, #1
 8006746:	d14a      	bne.n	80067de <_printf_i+0x1f2>
 8006748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800674c:	b004      	add	sp, #16
 800674e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	f043 0320 	orr.w	r3, r3, #32
 8006758:	6023      	str	r3, [r4, #0]
 800675a:	4833      	ldr	r0, [pc, #204]	@ (8006828 <_printf_i+0x23c>)
 800675c:	2778      	movs	r7, #120	@ 0x78
 800675e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006762:	6823      	ldr	r3, [r4, #0]
 8006764:	6831      	ldr	r1, [r6, #0]
 8006766:	061f      	lsls	r7, r3, #24
 8006768:	f851 5b04 	ldr.w	r5, [r1], #4
 800676c:	d402      	bmi.n	8006774 <_printf_i+0x188>
 800676e:	065f      	lsls	r7, r3, #25
 8006770:	bf48      	it	mi
 8006772:	b2ad      	uxthmi	r5, r5
 8006774:	6031      	str	r1, [r6, #0]
 8006776:	07d9      	lsls	r1, r3, #31
 8006778:	bf44      	itt	mi
 800677a:	f043 0320 	orrmi.w	r3, r3, #32
 800677e:	6023      	strmi	r3, [r4, #0]
 8006780:	b11d      	cbz	r5, 800678a <_printf_i+0x19e>
 8006782:	2310      	movs	r3, #16
 8006784:	e7ac      	b.n	80066e0 <_printf_i+0xf4>
 8006786:	4827      	ldr	r0, [pc, #156]	@ (8006824 <_printf_i+0x238>)
 8006788:	e7e9      	b.n	800675e <_printf_i+0x172>
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	f023 0320 	bic.w	r3, r3, #32
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	e7f6      	b.n	8006782 <_printf_i+0x196>
 8006794:	4616      	mov	r6, r2
 8006796:	e7bd      	b.n	8006714 <_printf_i+0x128>
 8006798:	6833      	ldr	r3, [r6, #0]
 800679a:	6825      	ldr	r5, [r4, #0]
 800679c:	6961      	ldr	r1, [r4, #20]
 800679e:	1d18      	adds	r0, r3, #4
 80067a0:	6030      	str	r0, [r6, #0]
 80067a2:	062e      	lsls	r6, r5, #24
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	d501      	bpl.n	80067ac <_printf_i+0x1c0>
 80067a8:	6019      	str	r1, [r3, #0]
 80067aa:	e002      	b.n	80067b2 <_printf_i+0x1c6>
 80067ac:	0668      	lsls	r0, r5, #25
 80067ae:	d5fb      	bpl.n	80067a8 <_printf_i+0x1bc>
 80067b0:	8019      	strh	r1, [r3, #0]
 80067b2:	2300      	movs	r3, #0
 80067b4:	6123      	str	r3, [r4, #16]
 80067b6:	4616      	mov	r6, r2
 80067b8:	e7bc      	b.n	8006734 <_printf_i+0x148>
 80067ba:	6833      	ldr	r3, [r6, #0]
 80067bc:	1d1a      	adds	r2, r3, #4
 80067be:	6032      	str	r2, [r6, #0]
 80067c0:	681e      	ldr	r6, [r3, #0]
 80067c2:	6862      	ldr	r2, [r4, #4]
 80067c4:	2100      	movs	r1, #0
 80067c6:	4630      	mov	r0, r6
 80067c8:	f7f9 fd22 	bl	8000210 <memchr>
 80067cc:	b108      	cbz	r0, 80067d2 <_printf_i+0x1e6>
 80067ce:	1b80      	subs	r0, r0, r6
 80067d0:	6060      	str	r0, [r4, #4]
 80067d2:	6863      	ldr	r3, [r4, #4]
 80067d4:	6123      	str	r3, [r4, #16]
 80067d6:	2300      	movs	r3, #0
 80067d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067dc:	e7aa      	b.n	8006734 <_printf_i+0x148>
 80067de:	6923      	ldr	r3, [r4, #16]
 80067e0:	4632      	mov	r2, r6
 80067e2:	4649      	mov	r1, r9
 80067e4:	4640      	mov	r0, r8
 80067e6:	47d0      	blx	sl
 80067e8:	3001      	adds	r0, #1
 80067ea:	d0ad      	beq.n	8006748 <_printf_i+0x15c>
 80067ec:	6823      	ldr	r3, [r4, #0]
 80067ee:	079b      	lsls	r3, r3, #30
 80067f0:	d413      	bmi.n	800681a <_printf_i+0x22e>
 80067f2:	68e0      	ldr	r0, [r4, #12]
 80067f4:	9b03      	ldr	r3, [sp, #12]
 80067f6:	4298      	cmp	r0, r3
 80067f8:	bfb8      	it	lt
 80067fa:	4618      	movlt	r0, r3
 80067fc:	e7a6      	b.n	800674c <_printf_i+0x160>
 80067fe:	2301      	movs	r3, #1
 8006800:	4632      	mov	r2, r6
 8006802:	4649      	mov	r1, r9
 8006804:	4640      	mov	r0, r8
 8006806:	47d0      	blx	sl
 8006808:	3001      	adds	r0, #1
 800680a:	d09d      	beq.n	8006748 <_printf_i+0x15c>
 800680c:	3501      	adds	r5, #1
 800680e:	68e3      	ldr	r3, [r4, #12]
 8006810:	9903      	ldr	r1, [sp, #12]
 8006812:	1a5b      	subs	r3, r3, r1
 8006814:	42ab      	cmp	r3, r5
 8006816:	dcf2      	bgt.n	80067fe <_printf_i+0x212>
 8006818:	e7eb      	b.n	80067f2 <_printf_i+0x206>
 800681a:	2500      	movs	r5, #0
 800681c:	f104 0619 	add.w	r6, r4, #25
 8006820:	e7f5      	b.n	800680e <_printf_i+0x222>
 8006822:	bf00      	nop
 8006824:	0800a176 	.word	0x0800a176
 8006828:	0800a187 	.word	0x0800a187

0800682c <std>:
 800682c:	2300      	movs	r3, #0
 800682e:	b510      	push	{r4, lr}
 8006830:	4604      	mov	r4, r0
 8006832:	e9c0 3300 	strd	r3, r3, [r0]
 8006836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800683a:	6083      	str	r3, [r0, #8]
 800683c:	8181      	strh	r1, [r0, #12]
 800683e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006840:	81c2      	strh	r2, [r0, #14]
 8006842:	6183      	str	r3, [r0, #24]
 8006844:	4619      	mov	r1, r3
 8006846:	2208      	movs	r2, #8
 8006848:	305c      	adds	r0, #92	@ 0x5c
 800684a:	f000 fa11 	bl	8006c70 <memset>
 800684e:	4b0d      	ldr	r3, [pc, #52]	@ (8006884 <std+0x58>)
 8006850:	6263      	str	r3, [r4, #36]	@ 0x24
 8006852:	4b0d      	ldr	r3, [pc, #52]	@ (8006888 <std+0x5c>)
 8006854:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006856:	4b0d      	ldr	r3, [pc, #52]	@ (800688c <std+0x60>)
 8006858:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800685a:	4b0d      	ldr	r3, [pc, #52]	@ (8006890 <std+0x64>)
 800685c:	6323      	str	r3, [r4, #48]	@ 0x30
 800685e:	4b0d      	ldr	r3, [pc, #52]	@ (8006894 <std+0x68>)
 8006860:	6224      	str	r4, [r4, #32]
 8006862:	429c      	cmp	r4, r3
 8006864:	d006      	beq.n	8006874 <std+0x48>
 8006866:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800686a:	4294      	cmp	r4, r2
 800686c:	d002      	beq.n	8006874 <std+0x48>
 800686e:	33d0      	adds	r3, #208	@ 0xd0
 8006870:	429c      	cmp	r4, r3
 8006872:	d105      	bne.n	8006880 <std+0x54>
 8006874:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800687c:	f000 ba84 	b.w	8006d88 <__retarget_lock_init_recursive>
 8006880:	bd10      	pop	{r4, pc}
 8006882:	bf00      	nop
 8006884:	08006aa1 	.word	0x08006aa1
 8006888:	08006ac3 	.word	0x08006ac3
 800688c:	08006afb 	.word	0x08006afb
 8006890:	08006b1f 	.word	0x08006b1f
 8006894:	20000344 	.word	0x20000344

08006898 <stdio_exit_handler>:
 8006898:	4a02      	ldr	r2, [pc, #8]	@ (80068a4 <stdio_exit_handler+0xc>)
 800689a:	4903      	ldr	r1, [pc, #12]	@ (80068a8 <stdio_exit_handler+0x10>)
 800689c:	4803      	ldr	r0, [pc, #12]	@ (80068ac <stdio_exit_handler+0x14>)
 800689e:	f000 b869 	b.w	8006974 <_fwalk_sglue>
 80068a2:	bf00      	nop
 80068a4:	2000000c 	.word	0x2000000c
 80068a8:	0800854d 	.word	0x0800854d
 80068ac:	2000001c 	.word	0x2000001c

080068b0 <cleanup_stdio>:
 80068b0:	6841      	ldr	r1, [r0, #4]
 80068b2:	4b0c      	ldr	r3, [pc, #48]	@ (80068e4 <cleanup_stdio+0x34>)
 80068b4:	4299      	cmp	r1, r3
 80068b6:	b510      	push	{r4, lr}
 80068b8:	4604      	mov	r4, r0
 80068ba:	d001      	beq.n	80068c0 <cleanup_stdio+0x10>
 80068bc:	f001 fe46 	bl	800854c <_fflush_r>
 80068c0:	68a1      	ldr	r1, [r4, #8]
 80068c2:	4b09      	ldr	r3, [pc, #36]	@ (80068e8 <cleanup_stdio+0x38>)
 80068c4:	4299      	cmp	r1, r3
 80068c6:	d002      	beq.n	80068ce <cleanup_stdio+0x1e>
 80068c8:	4620      	mov	r0, r4
 80068ca:	f001 fe3f 	bl	800854c <_fflush_r>
 80068ce:	68e1      	ldr	r1, [r4, #12]
 80068d0:	4b06      	ldr	r3, [pc, #24]	@ (80068ec <cleanup_stdio+0x3c>)
 80068d2:	4299      	cmp	r1, r3
 80068d4:	d004      	beq.n	80068e0 <cleanup_stdio+0x30>
 80068d6:	4620      	mov	r0, r4
 80068d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068dc:	f001 be36 	b.w	800854c <_fflush_r>
 80068e0:	bd10      	pop	{r4, pc}
 80068e2:	bf00      	nop
 80068e4:	20000344 	.word	0x20000344
 80068e8:	200003ac 	.word	0x200003ac
 80068ec:	20000414 	.word	0x20000414

080068f0 <global_stdio_init.part.0>:
 80068f0:	b510      	push	{r4, lr}
 80068f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006920 <global_stdio_init.part.0+0x30>)
 80068f4:	4c0b      	ldr	r4, [pc, #44]	@ (8006924 <global_stdio_init.part.0+0x34>)
 80068f6:	4a0c      	ldr	r2, [pc, #48]	@ (8006928 <global_stdio_init.part.0+0x38>)
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	4620      	mov	r0, r4
 80068fc:	2200      	movs	r2, #0
 80068fe:	2104      	movs	r1, #4
 8006900:	f7ff ff94 	bl	800682c <std>
 8006904:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006908:	2201      	movs	r2, #1
 800690a:	2109      	movs	r1, #9
 800690c:	f7ff ff8e 	bl	800682c <std>
 8006910:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006914:	2202      	movs	r2, #2
 8006916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800691a:	2112      	movs	r1, #18
 800691c:	f7ff bf86 	b.w	800682c <std>
 8006920:	2000047c 	.word	0x2000047c
 8006924:	20000344 	.word	0x20000344
 8006928:	08006899 	.word	0x08006899

0800692c <__sfp_lock_acquire>:
 800692c:	4801      	ldr	r0, [pc, #4]	@ (8006934 <__sfp_lock_acquire+0x8>)
 800692e:	f000 ba2c 	b.w	8006d8a <__retarget_lock_acquire_recursive>
 8006932:	bf00      	nop
 8006934:	20000485 	.word	0x20000485

08006938 <__sfp_lock_release>:
 8006938:	4801      	ldr	r0, [pc, #4]	@ (8006940 <__sfp_lock_release+0x8>)
 800693a:	f000 ba27 	b.w	8006d8c <__retarget_lock_release_recursive>
 800693e:	bf00      	nop
 8006940:	20000485 	.word	0x20000485

08006944 <__sinit>:
 8006944:	b510      	push	{r4, lr}
 8006946:	4604      	mov	r4, r0
 8006948:	f7ff fff0 	bl	800692c <__sfp_lock_acquire>
 800694c:	6a23      	ldr	r3, [r4, #32]
 800694e:	b11b      	cbz	r3, 8006958 <__sinit+0x14>
 8006950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006954:	f7ff bff0 	b.w	8006938 <__sfp_lock_release>
 8006958:	4b04      	ldr	r3, [pc, #16]	@ (800696c <__sinit+0x28>)
 800695a:	6223      	str	r3, [r4, #32]
 800695c:	4b04      	ldr	r3, [pc, #16]	@ (8006970 <__sinit+0x2c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1f5      	bne.n	8006950 <__sinit+0xc>
 8006964:	f7ff ffc4 	bl	80068f0 <global_stdio_init.part.0>
 8006968:	e7f2      	b.n	8006950 <__sinit+0xc>
 800696a:	bf00      	nop
 800696c:	080068b1 	.word	0x080068b1
 8006970:	2000047c 	.word	0x2000047c

08006974 <_fwalk_sglue>:
 8006974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006978:	4607      	mov	r7, r0
 800697a:	4688      	mov	r8, r1
 800697c:	4614      	mov	r4, r2
 800697e:	2600      	movs	r6, #0
 8006980:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006984:	f1b9 0901 	subs.w	r9, r9, #1
 8006988:	d505      	bpl.n	8006996 <_fwalk_sglue+0x22>
 800698a:	6824      	ldr	r4, [r4, #0]
 800698c:	2c00      	cmp	r4, #0
 800698e:	d1f7      	bne.n	8006980 <_fwalk_sglue+0xc>
 8006990:	4630      	mov	r0, r6
 8006992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006996:	89ab      	ldrh	r3, [r5, #12]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d907      	bls.n	80069ac <_fwalk_sglue+0x38>
 800699c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069a0:	3301      	adds	r3, #1
 80069a2:	d003      	beq.n	80069ac <_fwalk_sglue+0x38>
 80069a4:	4629      	mov	r1, r5
 80069a6:	4638      	mov	r0, r7
 80069a8:	47c0      	blx	r8
 80069aa:	4306      	orrs	r6, r0
 80069ac:	3568      	adds	r5, #104	@ 0x68
 80069ae:	e7e9      	b.n	8006984 <_fwalk_sglue+0x10>

080069b0 <iprintf>:
 80069b0:	b40f      	push	{r0, r1, r2, r3}
 80069b2:	b507      	push	{r0, r1, r2, lr}
 80069b4:	4906      	ldr	r1, [pc, #24]	@ (80069d0 <iprintf+0x20>)
 80069b6:	ab04      	add	r3, sp, #16
 80069b8:	6808      	ldr	r0, [r1, #0]
 80069ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80069be:	6881      	ldr	r1, [r0, #8]
 80069c0:	9301      	str	r3, [sp, #4]
 80069c2:	f001 fc27 	bl	8008214 <_vfiprintf_r>
 80069c6:	b003      	add	sp, #12
 80069c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80069cc:	b004      	add	sp, #16
 80069ce:	4770      	bx	lr
 80069d0:	20000018 	.word	0x20000018

080069d4 <putchar>:
 80069d4:	4b02      	ldr	r3, [pc, #8]	@ (80069e0 <putchar+0xc>)
 80069d6:	4601      	mov	r1, r0
 80069d8:	6818      	ldr	r0, [r3, #0]
 80069da:	6882      	ldr	r2, [r0, #8]
 80069dc:	f001 be40 	b.w	8008660 <_putc_r>
 80069e0:	20000018 	.word	0x20000018

080069e4 <_puts_r>:
 80069e4:	6a03      	ldr	r3, [r0, #32]
 80069e6:	b570      	push	{r4, r5, r6, lr}
 80069e8:	6884      	ldr	r4, [r0, #8]
 80069ea:	4605      	mov	r5, r0
 80069ec:	460e      	mov	r6, r1
 80069ee:	b90b      	cbnz	r3, 80069f4 <_puts_r+0x10>
 80069f0:	f7ff ffa8 	bl	8006944 <__sinit>
 80069f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069f6:	07db      	lsls	r3, r3, #31
 80069f8:	d405      	bmi.n	8006a06 <_puts_r+0x22>
 80069fa:	89a3      	ldrh	r3, [r4, #12]
 80069fc:	0598      	lsls	r0, r3, #22
 80069fe:	d402      	bmi.n	8006a06 <_puts_r+0x22>
 8006a00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a02:	f000 f9c2 	bl	8006d8a <__retarget_lock_acquire_recursive>
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	0719      	lsls	r1, r3, #28
 8006a0a:	d502      	bpl.n	8006a12 <_puts_r+0x2e>
 8006a0c:	6923      	ldr	r3, [r4, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d135      	bne.n	8006a7e <_puts_r+0x9a>
 8006a12:	4621      	mov	r1, r4
 8006a14:	4628      	mov	r0, r5
 8006a16:	f000 f8c5 	bl	8006ba4 <__swsetup_r>
 8006a1a:	b380      	cbz	r0, 8006a7e <_puts_r+0x9a>
 8006a1c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006a20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a22:	07da      	lsls	r2, r3, #31
 8006a24:	d405      	bmi.n	8006a32 <_puts_r+0x4e>
 8006a26:	89a3      	ldrh	r3, [r4, #12]
 8006a28:	059b      	lsls	r3, r3, #22
 8006a2a:	d402      	bmi.n	8006a32 <_puts_r+0x4e>
 8006a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a2e:	f000 f9ad 	bl	8006d8c <__retarget_lock_release_recursive>
 8006a32:	4628      	mov	r0, r5
 8006a34:	bd70      	pop	{r4, r5, r6, pc}
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	da04      	bge.n	8006a44 <_puts_r+0x60>
 8006a3a:	69a2      	ldr	r2, [r4, #24]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	dc17      	bgt.n	8006a70 <_puts_r+0x8c>
 8006a40:	290a      	cmp	r1, #10
 8006a42:	d015      	beq.n	8006a70 <_puts_r+0x8c>
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	6022      	str	r2, [r4, #0]
 8006a4a:	7019      	strb	r1, [r3, #0]
 8006a4c:	68a3      	ldr	r3, [r4, #8]
 8006a4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a52:	3b01      	subs	r3, #1
 8006a54:	60a3      	str	r3, [r4, #8]
 8006a56:	2900      	cmp	r1, #0
 8006a58:	d1ed      	bne.n	8006a36 <_puts_r+0x52>
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	da11      	bge.n	8006a82 <_puts_r+0x9e>
 8006a5e:	4622      	mov	r2, r4
 8006a60:	210a      	movs	r1, #10
 8006a62:	4628      	mov	r0, r5
 8006a64:	f000 f85f 	bl	8006b26 <__swbuf_r>
 8006a68:	3001      	adds	r0, #1
 8006a6a:	d0d7      	beq.n	8006a1c <_puts_r+0x38>
 8006a6c:	250a      	movs	r5, #10
 8006a6e:	e7d7      	b.n	8006a20 <_puts_r+0x3c>
 8006a70:	4622      	mov	r2, r4
 8006a72:	4628      	mov	r0, r5
 8006a74:	f000 f857 	bl	8006b26 <__swbuf_r>
 8006a78:	3001      	adds	r0, #1
 8006a7a:	d1e7      	bne.n	8006a4c <_puts_r+0x68>
 8006a7c:	e7ce      	b.n	8006a1c <_puts_r+0x38>
 8006a7e:	3e01      	subs	r6, #1
 8006a80:	e7e4      	b.n	8006a4c <_puts_r+0x68>
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	1c5a      	adds	r2, r3, #1
 8006a86:	6022      	str	r2, [r4, #0]
 8006a88:	220a      	movs	r2, #10
 8006a8a:	701a      	strb	r2, [r3, #0]
 8006a8c:	e7ee      	b.n	8006a6c <_puts_r+0x88>
	...

08006a90 <puts>:
 8006a90:	4b02      	ldr	r3, [pc, #8]	@ (8006a9c <puts+0xc>)
 8006a92:	4601      	mov	r1, r0
 8006a94:	6818      	ldr	r0, [r3, #0]
 8006a96:	f7ff bfa5 	b.w	80069e4 <_puts_r>
 8006a9a:	bf00      	nop
 8006a9c:	20000018 	.word	0x20000018

08006aa0 <__sread>:
 8006aa0:	b510      	push	{r4, lr}
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aa8:	f000 f910 	bl	8006ccc <_read_r>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	bfab      	itete	ge
 8006ab0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ab2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ab4:	181b      	addge	r3, r3, r0
 8006ab6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006aba:	bfac      	ite	ge
 8006abc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006abe:	81a3      	strhlt	r3, [r4, #12]
 8006ac0:	bd10      	pop	{r4, pc}

08006ac2 <__swrite>:
 8006ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac6:	461f      	mov	r7, r3
 8006ac8:	898b      	ldrh	r3, [r1, #12]
 8006aca:	05db      	lsls	r3, r3, #23
 8006acc:	4605      	mov	r5, r0
 8006ace:	460c      	mov	r4, r1
 8006ad0:	4616      	mov	r6, r2
 8006ad2:	d505      	bpl.n	8006ae0 <__swrite+0x1e>
 8006ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ad8:	2302      	movs	r3, #2
 8006ada:	2200      	movs	r2, #0
 8006adc:	f000 f8e4 	bl	8006ca8 <_lseek_r>
 8006ae0:	89a3      	ldrh	r3, [r4, #12]
 8006ae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ae6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006aea:	81a3      	strh	r3, [r4, #12]
 8006aec:	4632      	mov	r2, r6
 8006aee:	463b      	mov	r3, r7
 8006af0:	4628      	mov	r0, r5
 8006af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006af6:	f000 b90b 	b.w	8006d10 <_write_r>

08006afa <__sseek>:
 8006afa:	b510      	push	{r4, lr}
 8006afc:	460c      	mov	r4, r1
 8006afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b02:	f000 f8d1 	bl	8006ca8 <_lseek_r>
 8006b06:	1c43      	adds	r3, r0, #1
 8006b08:	89a3      	ldrh	r3, [r4, #12]
 8006b0a:	bf15      	itete	ne
 8006b0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b16:	81a3      	strheq	r3, [r4, #12]
 8006b18:	bf18      	it	ne
 8006b1a:	81a3      	strhne	r3, [r4, #12]
 8006b1c:	bd10      	pop	{r4, pc}

08006b1e <__sclose>:
 8006b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b22:	f000 b8b1 	b.w	8006c88 <_close_r>

08006b26 <__swbuf_r>:
 8006b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b28:	460e      	mov	r6, r1
 8006b2a:	4614      	mov	r4, r2
 8006b2c:	4605      	mov	r5, r0
 8006b2e:	b118      	cbz	r0, 8006b38 <__swbuf_r+0x12>
 8006b30:	6a03      	ldr	r3, [r0, #32]
 8006b32:	b90b      	cbnz	r3, 8006b38 <__swbuf_r+0x12>
 8006b34:	f7ff ff06 	bl	8006944 <__sinit>
 8006b38:	69a3      	ldr	r3, [r4, #24]
 8006b3a:	60a3      	str	r3, [r4, #8]
 8006b3c:	89a3      	ldrh	r3, [r4, #12]
 8006b3e:	071a      	lsls	r2, r3, #28
 8006b40:	d501      	bpl.n	8006b46 <__swbuf_r+0x20>
 8006b42:	6923      	ldr	r3, [r4, #16]
 8006b44:	b943      	cbnz	r3, 8006b58 <__swbuf_r+0x32>
 8006b46:	4621      	mov	r1, r4
 8006b48:	4628      	mov	r0, r5
 8006b4a:	f000 f82b 	bl	8006ba4 <__swsetup_r>
 8006b4e:	b118      	cbz	r0, 8006b58 <__swbuf_r+0x32>
 8006b50:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006b54:	4638      	mov	r0, r7
 8006b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	6922      	ldr	r2, [r4, #16]
 8006b5c:	1a98      	subs	r0, r3, r2
 8006b5e:	6963      	ldr	r3, [r4, #20]
 8006b60:	b2f6      	uxtb	r6, r6
 8006b62:	4283      	cmp	r3, r0
 8006b64:	4637      	mov	r7, r6
 8006b66:	dc05      	bgt.n	8006b74 <__swbuf_r+0x4e>
 8006b68:	4621      	mov	r1, r4
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	f001 fcee 	bl	800854c <_fflush_r>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	d1ed      	bne.n	8006b50 <__swbuf_r+0x2a>
 8006b74:	68a3      	ldr	r3, [r4, #8]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	60a3      	str	r3, [r4, #8]
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	6022      	str	r2, [r4, #0]
 8006b80:	701e      	strb	r6, [r3, #0]
 8006b82:	6962      	ldr	r2, [r4, #20]
 8006b84:	1c43      	adds	r3, r0, #1
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d004      	beq.n	8006b94 <__swbuf_r+0x6e>
 8006b8a:	89a3      	ldrh	r3, [r4, #12]
 8006b8c:	07db      	lsls	r3, r3, #31
 8006b8e:	d5e1      	bpl.n	8006b54 <__swbuf_r+0x2e>
 8006b90:	2e0a      	cmp	r6, #10
 8006b92:	d1df      	bne.n	8006b54 <__swbuf_r+0x2e>
 8006b94:	4621      	mov	r1, r4
 8006b96:	4628      	mov	r0, r5
 8006b98:	f001 fcd8 	bl	800854c <_fflush_r>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	d0d9      	beq.n	8006b54 <__swbuf_r+0x2e>
 8006ba0:	e7d6      	b.n	8006b50 <__swbuf_r+0x2a>
	...

08006ba4 <__swsetup_r>:
 8006ba4:	b538      	push	{r3, r4, r5, lr}
 8006ba6:	4b29      	ldr	r3, [pc, #164]	@ (8006c4c <__swsetup_r+0xa8>)
 8006ba8:	4605      	mov	r5, r0
 8006baa:	6818      	ldr	r0, [r3, #0]
 8006bac:	460c      	mov	r4, r1
 8006bae:	b118      	cbz	r0, 8006bb8 <__swsetup_r+0x14>
 8006bb0:	6a03      	ldr	r3, [r0, #32]
 8006bb2:	b90b      	cbnz	r3, 8006bb8 <__swsetup_r+0x14>
 8006bb4:	f7ff fec6 	bl	8006944 <__sinit>
 8006bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bbc:	0719      	lsls	r1, r3, #28
 8006bbe:	d422      	bmi.n	8006c06 <__swsetup_r+0x62>
 8006bc0:	06da      	lsls	r2, r3, #27
 8006bc2:	d407      	bmi.n	8006bd4 <__swsetup_r+0x30>
 8006bc4:	2209      	movs	r2, #9
 8006bc6:	602a      	str	r2, [r5, #0]
 8006bc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bcc:	81a3      	strh	r3, [r4, #12]
 8006bce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bd2:	e033      	b.n	8006c3c <__swsetup_r+0x98>
 8006bd4:	0758      	lsls	r0, r3, #29
 8006bd6:	d512      	bpl.n	8006bfe <__swsetup_r+0x5a>
 8006bd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bda:	b141      	cbz	r1, 8006bee <__swsetup_r+0x4a>
 8006bdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006be0:	4299      	cmp	r1, r3
 8006be2:	d002      	beq.n	8006bea <__swsetup_r+0x46>
 8006be4:	4628      	mov	r0, r5
 8006be6:	f000 ff1f 	bl	8007a28 <_free_r>
 8006bea:	2300      	movs	r3, #0
 8006bec:	6363      	str	r3, [r4, #52]	@ 0x34
 8006bee:	89a3      	ldrh	r3, [r4, #12]
 8006bf0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006bf4:	81a3      	strh	r3, [r4, #12]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	6063      	str	r3, [r4, #4]
 8006bfa:	6923      	ldr	r3, [r4, #16]
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	89a3      	ldrh	r3, [r4, #12]
 8006c00:	f043 0308 	orr.w	r3, r3, #8
 8006c04:	81a3      	strh	r3, [r4, #12]
 8006c06:	6923      	ldr	r3, [r4, #16]
 8006c08:	b94b      	cbnz	r3, 8006c1e <__swsetup_r+0x7a>
 8006c0a:	89a3      	ldrh	r3, [r4, #12]
 8006c0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c14:	d003      	beq.n	8006c1e <__swsetup_r+0x7a>
 8006c16:	4621      	mov	r1, r4
 8006c18:	4628      	mov	r0, r5
 8006c1a:	f001 fce5 	bl	80085e8 <__smakebuf_r>
 8006c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c22:	f013 0201 	ands.w	r2, r3, #1
 8006c26:	d00a      	beq.n	8006c3e <__swsetup_r+0x9a>
 8006c28:	2200      	movs	r2, #0
 8006c2a:	60a2      	str	r2, [r4, #8]
 8006c2c:	6962      	ldr	r2, [r4, #20]
 8006c2e:	4252      	negs	r2, r2
 8006c30:	61a2      	str	r2, [r4, #24]
 8006c32:	6922      	ldr	r2, [r4, #16]
 8006c34:	b942      	cbnz	r2, 8006c48 <__swsetup_r+0xa4>
 8006c36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006c3a:	d1c5      	bne.n	8006bc8 <__swsetup_r+0x24>
 8006c3c:	bd38      	pop	{r3, r4, r5, pc}
 8006c3e:	0799      	lsls	r1, r3, #30
 8006c40:	bf58      	it	pl
 8006c42:	6962      	ldrpl	r2, [r4, #20]
 8006c44:	60a2      	str	r2, [r4, #8]
 8006c46:	e7f4      	b.n	8006c32 <__swsetup_r+0x8e>
 8006c48:	2000      	movs	r0, #0
 8006c4a:	e7f7      	b.n	8006c3c <__swsetup_r+0x98>
 8006c4c:	20000018 	.word	0x20000018

08006c50 <memcmp>:
 8006c50:	b510      	push	{r4, lr}
 8006c52:	3901      	subs	r1, #1
 8006c54:	4402      	add	r2, r0
 8006c56:	4290      	cmp	r0, r2
 8006c58:	d101      	bne.n	8006c5e <memcmp+0xe>
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	e005      	b.n	8006c6a <memcmp+0x1a>
 8006c5e:	7803      	ldrb	r3, [r0, #0]
 8006c60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006c64:	42a3      	cmp	r3, r4
 8006c66:	d001      	beq.n	8006c6c <memcmp+0x1c>
 8006c68:	1b18      	subs	r0, r3, r4
 8006c6a:	bd10      	pop	{r4, pc}
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	e7f2      	b.n	8006c56 <memcmp+0x6>

08006c70 <memset>:
 8006c70:	4402      	add	r2, r0
 8006c72:	4603      	mov	r3, r0
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d100      	bne.n	8006c7a <memset+0xa>
 8006c78:	4770      	bx	lr
 8006c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c7e:	e7f9      	b.n	8006c74 <memset+0x4>

08006c80 <_localeconv_r>:
 8006c80:	4800      	ldr	r0, [pc, #0]	@ (8006c84 <_localeconv_r+0x4>)
 8006c82:	4770      	bx	lr
 8006c84:	20000158 	.word	0x20000158

08006c88 <_close_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	4d06      	ldr	r5, [pc, #24]	@ (8006ca4 <_close_r+0x1c>)
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	4604      	mov	r4, r0
 8006c90:	4608      	mov	r0, r1
 8006c92:	602b      	str	r3, [r5, #0]
 8006c94:	f7fc faad 	bl	80031f2 <_close>
 8006c98:	1c43      	adds	r3, r0, #1
 8006c9a:	d102      	bne.n	8006ca2 <_close_r+0x1a>
 8006c9c:	682b      	ldr	r3, [r5, #0]
 8006c9e:	b103      	cbz	r3, 8006ca2 <_close_r+0x1a>
 8006ca0:	6023      	str	r3, [r4, #0]
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
 8006ca4:	20000480 	.word	0x20000480

08006ca8 <_lseek_r>:
 8006ca8:	b538      	push	{r3, r4, r5, lr}
 8006caa:	4d07      	ldr	r5, [pc, #28]	@ (8006cc8 <_lseek_r+0x20>)
 8006cac:	4604      	mov	r4, r0
 8006cae:	4608      	mov	r0, r1
 8006cb0:	4611      	mov	r1, r2
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	602a      	str	r2, [r5, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f7fc fac2 	bl	8003240 <_lseek>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d102      	bne.n	8006cc6 <_lseek_r+0x1e>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	b103      	cbz	r3, 8006cc6 <_lseek_r+0x1e>
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	bd38      	pop	{r3, r4, r5, pc}
 8006cc8:	20000480 	.word	0x20000480

08006ccc <_read_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	4d07      	ldr	r5, [pc, #28]	@ (8006cec <_read_r+0x20>)
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	4608      	mov	r0, r1
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	602a      	str	r2, [r5, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f7fc fa6c 	bl	80031b8 <_read>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	d102      	bne.n	8006cea <_read_r+0x1e>
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	b103      	cbz	r3, 8006cea <_read_r+0x1e>
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	20000480 	.word	0x20000480

08006cf0 <_sbrk_r>:
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	4d06      	ldr	r5, [pc, #24]	@ (8006d0c <_sbrk_r+0x1c>)
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	4608      	mov	r0, r1
 8006cfa:	602b      	str	r3, [r5, #0]
 8006cfc:	f7fc faae 	bl	800325c <_sbrk>
 8006d00:	1c43      	adds	r3, r0, #1
 8006d02:	d102      	bne.n	8006d0a <_sbrk_r+0x1a>
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	b103      	cbz	r3, 8006d0a <_sbrk_r+0x1a>
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	bd38      	pop	{r3, r4, r5, pc}
 8006d0c:	20000480 	.word	0x20000480

08006d10 <_write_r>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	4d07      	ldr	r5, [pc, #28]	@ (8006d30 <_write_r+0x20>)
 8006d14:	4604      	mov	r4, r0
 8006d16:	4608      	mov	r0, r1
 8006d18:	4611      	mov	r1, r2
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	602a      	str	r2, [r5, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f7fb ff0b 	bl	8002b3a <_write>
 8006d24:	1c43      	adds	r3, r0, #1
 8006d26:	d102      	bne.n	8006d2e <_write_r+0x1e>
 8006d28:	682b      	ldr	r3, [r5, #0]
 8006d2a:	b103      	cbz	r3, 8006d2e <_write_r+0x1e>
 8006d2c:	6023      	str	r3, [r4, #0]
 8006d2e:	bd38      	pop	{r3, r4, r5, pc}
 8006d30:	20000480 	.word	0x20000480

08006d34 <__errno>:
 8006d34:	4b01      	ldr	r3, [pc, #4]	@ (8006d3c <__errno+0x8>)
 8006d36:	6818      	ldr	r0, [r3, #0]
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	20000018 	.word	0x20000018

08006d40 <__libc_init_array>:
 8006d40:	b570      	push	{r4, r5, r6, lr}
 8006d42:	4d0d      	ldr	r5, [pc, #52]	@ (8006d78 <__libc_init_array+0x38>)
 8006d44:	4c0d      	ldr	r4, [pc, #52]	@ (8006d7c <__libc_init_array+0x3c>)
 8006d46:	1b64      	subs	r4, r4, r5
 8006d48:	10a4      	asrs	r4, r4, #2
 8006d4a:	2600      	movs	r6, #0
 8006d4c:	42a6      	cmp	r6, r4
 8006d4e:	d109      	bne.n	8006d64 <__libc_init_array+0x24>
 8006d50:	4d0b      	ldr	r5, [pc, #44]	@ (8006d80 <__libc_init_array+0x40>)
 8006d52:	4c0c      	ldr	r4, [pc, #48]	@ (8006d84 <__libc_init_array+0x44>)
 8006d54:	f002 fb20 	bl	8009398 <_init>
 8006d58:	1b64      	subs	r4, r4, r5
 8006d5a:	10a4      	asrs	r4, r4, #2
 8006d5c:	2600      	movs	r6, #0
 8006d5e:	42a6      	cmp	r6, r4
 8006d60:	d105      	bne.n	8006d6e <__libc_init_array+0x2e>
 8006d62:	bd70      	pop	{r4, r5, r6, pc}
 8006d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d68:	4798      	blx	r3
 8006d6a:	3601      	adds	r6, #1
 8006d6c:	e7ee      	b.n	8006d4c <__libc_init_array+0xc>
 8006d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d72:	4798      	blx	r3
 8006d74:	3601      	adds	r6, #1
 8006d76:	e7f2      	b.n	8006d5e <__libc_init_array+0x1e>
 8006d78:	0800a550 	.word	0x0800a550
 8006d7c:	0800a550 	.word	0x0800a550
 8006d80:	0800a550 	.word	0x0800a550
 8006d84:	0800a554 	.word	0x0800a554

08006d88 <__retarget_lock_init_recursive>:
 8006d88:	4770      	bx	lr

08006d8a <__retarget_lock_acquire_recursive>:
 8006d8a:	4770      	bx	lr

08006d8c <__retarget_lock_release_recursive>:
 8006d8c:	4770      	bx	lr

08006d8e <quorem>:
 8006d8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d92:	6903      	ldr	r3, [r0, #16]
 8006d94:	690c      	ldr	r4, [r1, #16]
 8006d96:	42a3      	cmp	r3, r4
 8006d98:	4607      	mov	r7, r0
 8006d9a:	db7e      	blt.n	8006e9a <quorem+0x10c>
 8006d9c:	3c01      	subs	r4, #1
 8006d9e:	f101 0814 	add.w	r8, r1, #20
 8006da2:	00a3      	lsls	r3, r4, #2
 8006da4:	f100 0514 	add.w	r5, r0, #20
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dae:	9301      	str	r3, [sp, #4]
 8006db0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006db4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006db8:	3301      	adds	r3, #1
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006dc0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006dc4:	d32e      	bcc.n	8006e24 <quorem+0x96>
 8006dc6:	f04f 0a00 	mov.w	sl, #0
 8006dca:	46c4      	mov	ip, r8
 8006dcc:	46ae      	mov	lr, r5
 8006dce:	46d3      	mov	fp, sl
 8006dd0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006dd4:	b298      	uxth	r0, r3
 8006dd6:	fb06 a000 	mla	r0, r6, r0, sl
 8006dda:	0c02      	lsrs	r2, r0, #16
 8006ddc:	0c1b      	lsrs	r3, r3, #16
 8006dde:	fb06 2303 	mla	r3, r6, r3, r2
 8006de2:	f8de 2000 	ldr.w	r2, [lr]
 8006de6:	b280      	uxth	r0, r0
 8006de8:	b292      	uxth	r2, r2
 8006dea:	1a12      	subs	r2, r2, r0
 8006dec:	445a      	add	r2, fp
 8006dee:	f8de 0000 	ldr.w	r0, [lr]
 8006df2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006dfc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006e00:	b292      	uxth	r2, r2
 8006e02:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006e06:	45e1      	cmp	r9, ip
 8006e08:	f84e 2b04 	str.w	r2, [lr], #4
 8006e0c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006e10:	d2de      	bcs.n	8006dd0 <quorem+0x42>
 8006e12:	9b00      	ldr	r3, [sp, #0]
 8006e14:	58eb      	ldr	r3, [r5, r3]
 8006e16:	b92b      	cbnz	r3, 8006e24 <quorem+0x96>
 8006e18:	9b01      	ldr	r3, [sp, #4]
 8006e1a:	3b04      	subs	r3, #4
 8006e1c:	429d      	cmp	r5, r3
 8006e1e:	461a      	mov	r2, r3
 8006e20:	d32f      	bcc.n	8006e82 <quorem+0xf4>
 8006e22:	613c      	str	r4, [r7, #16]
 8006e24:	4638      	mov	r0, r7
 8006e26:	f001 f8c3 	bl	8007fb0 <__mcmp>
 8006e2a:	2800      	cmp	r0, #0
 8006e2c:	db25      	blt.n	8006e7a <quorem+0xec>
 8006e2e:	4629      	mov	r1, r5
 8006e30:	2000      	movs	r0, #0
 8006e32:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e36:	f8d1 c000 	ldr.w	ip, [r1]
 8006e3a:	fa1f fe82 	uxth.w	lr, r2
 8006e3e:	fa1f f38c 	uxth.w	r3, ip
 8006e42:	eba3 030e 	sub.w	r3, r3, lr
 8006e46:	4403      	add	r3, r0
 8006e48:	0c12      	lsrs	r2, r2, #16
 8006e4a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006e4e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e58:	45c1      	cmp	r9, r8
 8006e5a:	f841 3b04 	str.w	r3, [r1], #4
 8006e5e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e62:	d2e6      	bcs.n	8006e32 <quorem+0xa4>
 8006e64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e6c:	b922      	cbnz	r2, 8006e78 <quorem+0xea>
 8006e6e:	3b04      	subs	r3, #4
 8006e70:	429d      	cmp	r5, r3
 8006e72:	461a      	mov	r2, r3
 8006e74:	d30b      	bcc.n	8006e8e <quorem+0x100>
 8006e76:	613c      	str	r4, [r7, #16]
 8006e78:	3601      	adds	r6, #1
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	b003      	add	sp, #12
 8006e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e82:	6812      	ldr	r2, [r2, #0]
 8006e84:	3b04      	subs	r3, #4
 8006e86:	2a00      	cmp	r2, #0
 8006e88:	d1cb      	bne.n	8006e22 <quorem+0x94>
 8006e8a:	3c01      	subs	r4, #1
 8006e8c:	e7c6      	b.n	8006e1c <quorem+0x8e>
 8006e8e:	6812      	ldr	r2, [r2, #0]
 8006e90:	3b04      	subs	r3, #4
 8006e92:	2a00      	cmp	r2, #0
 8006e94:	d1ef      	bne.n	8006e76 <quorem+0xe8>
 8006e96:	3c01      	subs	r4, #1
 8006e98:	e7ea      	b.n	8006e70 <quorem+0xe2>
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	e7ee      	b.n	8006e7c <quorem+0xee>
	...

08006ea0 <_dtoa_r>:
 8006ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea4:	69c7      	ldr	r7, [r0, #28]
 8006ea6:	b099      	sub	sp, #100	@ 0x64
 8006ea8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006eac:	ec55 4b10 	vmov	r4, r5, d0
 8006eb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006eb2:	9109      	str	r1, [sp, #36]	@ 0x24
 8006eb4:	4683      	mov	fp, r0
 8006eb6:	920e      	str	r2, [sp, #56]	@ 0x38
 8006eb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006eba:	b97f      	cbnz	r7, 8006edc <_dtoa_r+0x3c>
 8006ebc:	2010      	movs	r0, #16
 8006ebe:	f7fe ff9f 	bl	8005e00 <malloc>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	f8cb 001c 	str.w	r0, [fp, #28]
 8006ec8:	b920      	cbnz	r0, 8006ed4 <_dtoa_r+0x34>
 8006eca:	4ba7      	ldr	r3, [pc, #668]	@ (8007168 <_dtoa_r+0x2c8>)
 8006ecc:	21ef      	movs	r1, #239	@ 0xef
 8006ece:	48a7      	ldr	r0, [pc, #668]	@ (800716c <_dtoa_r+0x2cc>)
 8006ed0:	f001 fc2a 	bl	8008728 <__assert_func>
 8006ed4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006ed8:	6007      	str	r7, [r0, #0]
 8006eda:	60c7      	str	r7, [r0, #12]
 8006edc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ee0:	6819      	ldr	r1, [r3, #0]
 8006ee2:	b159      	cbz	r1, 8006efc <_dtoa_r+0x5c>
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	604a      	str	r2, [r1, #4]
 8006ee8:	2301      	movs	r3, #1
 8006eea:	4093      	lsls	r3, r2
 8006eec:	608b      	str	r3, [r1, #8]
 8006eee:	4658      	mov	r0, fp
 8006ef0:	f000 fe24 	bl	8007b3c <_Bfree>
 8006ef4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	1e2b      	subs	r3, r5, #0
 8006efe:	bfb9      	ittee	lt
 8006f00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006f04:	9303      	strlt	r3, [sp, #12]
 8006f06:	2300      	movge	r3, #0
 8006f08:	6033      	strge	r3, [r6, #0]
 8006f0a:	9f03      	ldr	r7, [sp, #12]
 8006f0c:	4b98      	ldr	r3, [pc, #608]	@ (8007170 <_dtoa_r+0x2d0>)
 8006f0e:	bfbc      	itt	lt
 8006f10:	2201      	movlt	r2, #1
 8006f12:	6032      	strlt	r2, [r6, #0]
 8006f14:	43bb      	bics	r3, r7
 8006f16:	d112      	bne.n	8006f3e <_dtoa_r+0x9e>
 8006f18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006f1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f24:	4323      	orrs	r3, r4
 8006f26:	f000 854d 	beq.w	80079c4 <_dtoa_r+0xb24>
 8006f2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007184 <_dtoa_r+0x2e4>
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 854f 	beq.w	80079d4 <_dtoa_r+0xb34>
 8006f36:	f10a 0303 	add.w	r3, sl, #3
 8006f3a:	f000 bd49 	b.w	80079d0 <_dtoa_r+0xb30>
 8006f3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f42:	2200      	movs	r2, #0
 8006f44:	ec51 0b17 	vmov	r0, r1, d7
 8006f48:	2300      	movs	r3, #0
 8006f4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006f4e:	f7f9 fddb 	bl	8000b08 <__aeabi_dcmpeq>
 8006f52:	4680      	mov	r8, r0
 8006f54:	b158      	cbz	r0, 8006f6e <_dtoa_r+0xce>
 8006f56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006f58:	2301      	movs	r3, #1
 8006f5a:	6013      	str	r3, [r2, #0]
 8006f5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f5e:	b113      	cbz	r3, 8006f66 <_dtoa_r+0xc6>
 8006f60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006f62:	4b84      	ldr	r3, [pc, #528]	@ (8007174 <_dtoa_r+0x2d4>)
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007188 <_dtoa_r+0x2e8>
 8006f6a:	f000 bd33 	b.w	80079d4 <_dtoa_r+0xb34>
 8006f6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006f72:	aa16      	add	r2, sp, #88	@ 0x58
 8006f74:	a917      	add	r1, sp, #92	@ 0x5c
 8006f76:	4658      	mov	r0, fp
 8006f78:	f001 f8ca 	bl	8008110 <__d2b>
 8006f7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006f80:	4681      	mov	r9, r0
 8006f82:	2e00      	cmp	r6, #0
 8006f84:	d077      	beq.n	8007076 <_dtoa_r+0x1d6>
 8006f86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006f98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006f9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	4b74      	ldr	r3, [pc, #464]	@ (8007178 <_dtoa_r+0x2d8>)
 8006fa6:	f7f9 f98f 	bl	80002c8 <__aeabi_dsub>
 8006faa:	a369      	add	r3, pc, #420	@ (adr r3, 8007150 <_dtoa_r+0x2b0>)
 8006fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb0:	f7f9 fb42 	bl	8000638 <__aeabi_dmul>
 8006fb4:	a368      	add	r3, pc, #416	@ (adr r3, 8007158 <_dtoa_r+0x2b8>)
 8006fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fba:	f7f9 f987 	bl	80002cc <__adddf3>
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	460d      	mov	r5, r1
 8006fc4:	f7f9 face 	bl	8000564 <__aeabi_i2d>
 8006fc8:	a365      	add	r3, pc, #404	@ (adr r3, 8007160 <_dtoa_r+0x2c0>)
 8006fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fce:	f7f9 fb33 	bl	8000638 <__aeabi_dmul>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	4629      	mov	r1, r5
 8006fda:	f7f9 f977 	bl	80002cc <__adddf3>
 8006fde:	4604      	mov	r4, r0
 8006fe0:	460d      	mov	r5, r1
 8006fe2:	f7f9 fdd9 	bl	8000b98 <__aeabi_d2iz>
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	4607      	mov	r7, r0
 8006fea:	2300      	movs	r3, #0
 8006fec:	4620      	mov	r0, r4
 8006fee:	4629      	mov	r1, r5
 8006ff0:	f7f9 fd94 	bl	8000b1c <__aeabi_dcmplt>
 8006ff4:	b140      	cbz	r0, 8007008 <_dtoa_r+0x168>
 8006ff6:	4638      	mov	r0, r7
 8006ff8:	f7f9 fab4 	bl	8000564 <__aeabi_i2d>
 8006ffc:	4622      	mov	r2, r4
 8006ffe:	462b      	mov	r3, r5
 8007000:	f7f9 fd82 	bl	8000b08 <__aeabi_dcmpeq>
 8007004:	b900      	cbnz	r0, 8007008 <_dtoa_r+0x168>
 8007006:	3f01      	subs	r7, #1
 8007008:	2f16      	cmp	r7, #22
 800700a:	d851      	bhi.n	80070b0 <_dtoa_r+0x210>
 800700c:	4b5b      	ldr	r3, [pc, #364]	@ (800717c <_dtoa_r+0x2dc>)
 800700e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800701a:	f7f9 fd7f 	bl	8000b1c <__aeabi_dcmplt>
 800701e:	2800      	cmp	r0, #0
 8007020:	d048      	beq.n	80070b4 <_dtoa_r+0x214>
 8007022:	3f01      	subs	r7, #1
 8007024:	2300      	movs	r3, #0
 8007026:	9312      	str	r3, [sp, #72]	@ 0x48
 8007028:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800702a:	1b9b      	subs	r3, r3, r6
 800702c:	1e5a      	subs	r2, r3, #1
 800702e:	bf44      	itt	mi
 8007030:	f1c3 0801 	rsbmi	r8, r3, #1
 8007034:	2300      	movmi	r3, #0
 8007036:	9208      	str	r2, [sp, #32]
 8007038:	bf54      	ite	pl
 800703a:	f04f 0800 	movpl.w	r8, #0
 800703e:	9308      	strmi	r3, [sp, #32]
 8007040:	2f00      	cmp	r7, #0
 8007042:	db39      	blt.n	80070b8 <_dtoa_r+0x218>
 8007044:	9b08      	ldr	r3, [sp, #32]
 8007046:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007048:	443b      	add	r3, r7
 800704a:	9308      	str	r3, [sp, #32]
 800704c:	2300      	movs	r3, #0
 800704e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007052:	2b09      	cmp	r3, #9
 8007054:	d864      	bhi.n	8007120 <_dtoa_r+0x280>
 8007056:	2b05      	cmp	r3, #5
 8007058:	bfc4      	itt	gt
 800705a:	3b04      	subgt	r3, #4
 800705c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800705e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007060:	f1a3 0302 	sub.w	r3, r3, #2
 8007064:	bfcc      	ite	gt
 8007066:	2400      	movgt	r4, #0
 8007068:	2401      	movle	r4, #1
 800706a:	2b03      	cmp	r3, #3
 800706c:	d863      	bhi.n	8007136 <_dtoa_r+0x296>
 800706e:	e8df f003 	tbb	[pc, r3]
 8007072:	372a      	.short	0x372a
 8007074:	5535      	.short	0x5535
 8007076:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800707a:	441e      	add	r6, r3
 800707c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007080:	2b20      	cmp	r3, #32
 8007082:	bfc1      	itttt	gt
 8007084:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007088:	409f      	lslgt	r7, r3
 800708a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800708e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007092:	bfd6      	itet	le
 8007094:	f1c3 0320 	rsble	r3, r3, #32
 8007098:	ea47 0003 	orrgt.w	r0, r7, r3
 800709c:	fa04 f003 	lslle.w	r0, r4, r3
 80070a0:	f7f9 fa50 	bl	8000544 <__aeabi_ui2d>
 80070a4:	2201      	movs	r2, #1
 80070a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80070aa:	3e01      	subs	r6, #1
 80070ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80070ae:	e777      	b.n	8006fa0 <_dtoa_r+0x100>
 80070b0:	2301      	movs	r3, #1
 80070b2:	e7b8      	b.n	8007026 <_dtoa_r+0x186>
 80070b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80070b6:	e7b7      	b.n	8007028 <_dtoa_r+0x188>
 80070b8:	427b      	negs	r3, r7
 80070ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80070bc:	2300      	movs	r3, #0
 80070be:	eba8 0807 	sub.w	r8, r8, r7
 80070c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80070c4:	e7c4      	b.n	8007050 <_dtoa_r+0x1b0>
 80070c6:	2300      	movs	r3, #0
 80070c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	dc35      	bgt.n	800713c <_dtoa_r+0x29c>
 80070d0:	2301      	movs	r3, #1
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	9307      	str	r3, [sp, #28]
 80070d6:	461a      	mov	r2, r3
 80070d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80070da:	e00b      	b.n	80070f4 <_dtoa_r+0x254>
 80070dc:	2301      	movs	r3, #1
 80070de:	e7f3      	b.n	80070c8 <_dtoa_r+0x228>
 80070e0:	2300      	movs	r3, #0
 80070e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070e6:	18fb      	adds	r3, r7, r3
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	3301      	adds	r3, #1
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	9307      	str	r3, [sp, #28]
 80070f0:	bfb8      	it	lt
 80070f2:	2301      	movlt	r3, #1
 80070f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80070f8:	2100      	movs	r1, #0
 80070fa:	2204      	movs	r2, #4
 80070fc:	f102 0514 	add.w	r5, r2, #20
 8007100:	429d      	cmp	r5, r3
 8007102:	d91f      	bls.n	8007144 <_dtoa_r+0x2a4>
 8007104:	6041      	str	r1, [r0, #4]
 8007106:	4658      	mov	r0, fp
 8007108:	f000 fcd8 	bl	8007abc <_Balloc>
 800710c:	4682      	mov	sl, r0
 800710e:	2800      	cmp	r0, #0
 8007110:	d13c      	bne.n	800718c <_dtoa_r+0x2ec>
 8007112:	4b1b      	ldr	r3, [pc, #108]	@ (8007180 <_dtoa_r+0x2e0>)
 8007114:	4602      	mov	r2, r0
 8007116:	f240 11af 	movw	r1, #431	@ 0x1af
 800711a:	e6d8      	b.n	8006ece <_dtoa_r+0x2e>
 800711c:	2301      	movs	r3, #1
 800711e:	e7e0      	b.n	80070e2 <_dtoa_r+0x242>
 8007120:	2401      	movs	r4, #1
 8007122:	2300      	movs	r3, #0
 8007124:	9309      	str	r3, [sp, #36]	@ 0x24
 8007126:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007128:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	9307      	str	r3, [sp, #28]
 8007130:	2200      	movs	r2, #0
 8007132:	2312      	movs	r3, #18
 8007134:	e7d0      	b.n	80070d8 <_dtoa_r+0x238>
 8007136:	2301      	movs	r3, #1
 8007138:	930b      	str	r3, [sp, #44]	@ 0x2c
 800713a:	e7f5      	b.n	8007128 <_dtoa_r+0x288>
 800713c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	9307      	str	r3, [sp, #28]
 8007142:	e7d7      	b.n	80070f4 <_dtoa_r+0x254>
 8007144:	3101      	adds	r1, #1
 8007146:	0052      	lsls	r2, r2, #1
 8007148:	e7d8      	b.n	80070fc <_dtoa_r+0x25c>
 800714a:	bf00      	nop
 800714c:	f3af 8000 	nop.w
 8007150:	636f4361 	.word	0x636f4361
 8007154:	3fd287a7 	.word	0x3fd287a7
 8007158:	8b60c8b3 	.word	0x8b60c8b3
 800715c:	3fc68a28 	.word	0x3fc68a28
 8007160:	509f79fb 	.word	0x509f79fb
 8007164:	3fd34413 	.word	0x3fd34413
 8007168:	0800a1a5 	.word	0x0800a1a5
 800716c:	0800a1bc 	.word	0x0800a1bc
 8007170:	7ff00000 	.word	0x7ff00000
 8007174:	0800a175 	.word	0x0800a175
 8007178:	3ff80000 	.word	0x3ff80000
 800717c:	0800a2b8 	.word	0x0800a2b8
 8007180:	0800a214 	.word	0x0800a214
 8007184:	0800a1a1 	.word	0x0800a1a1
 8007188:	0800a174 	.word	0x0800a174
 800718c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007190:	6018      	str	r0, [r3, #0]
 8007192:	9b07      	ldr	r3, [sp, #28]
 8007194:	2b0e      	cmp	r3, #14
 8007196:	f200 80a4 	bhi.w	80072e2 <_dtoa_r+0x442>
 800719a:	2c00      	cmp	r4, #0
 800719c:	f000 80a1 	beq.w	80072e2 <_dtoa_r+0x442>
 80071a0:	2f00      	cmp	r7, #0
 80071a2:	dd33      	ble.n	800720c <_dtoa_r+0x36c>
 80071a4:	4bad      	ldr	r3, [pc, #692]	@ (800745c <_dtoa_r+0x5bc>)
 80071a6:	f007 020f 	and.w	r2, r7, #15
 80071aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071ae:	ed93 7b00 	vldr	d7, [r3]
 80071b2:	05f8      	lsls	r0, r7, #23
 80071b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80071b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80071bc:	d516      	bpl.n	80071ec <_dtoa_r+0x34c>
 80071be:	4ba8      	ldr	r3, [pc, #672]	@ (8007460 <_dtoa_r+0x5c0>)
 80071c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071c8:	f7f9 fb60 	bl	800088c <__aeabi_ddiv>
 80071cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071d0:	f004 040f 	and.w	r4, r4, #15
 80071d4:	2603      	movs	r6, #3
 80071d6:	4da2      	ldr	r5, [pc, #648]	@ (8007460 <_dtoa_r+0x5c0>)
 80071d8:	b954      	cbnz	r4, 80071f0 <_dtoa_r+0x350>
 80071da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071e2:	f7f9 fb53 	bl	800088c <__aeabi_ddiv>
 80071e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071ea:	e028      	b.n	800723e <_dtoa_r+0x39e>
 80071ec:	2602      	movs	r6, #2
 80071ee:	e7f2      	b.n	80071d6 <_dtoa_r+0x336>
 80071f0:	07e1      	lsls	r1, r4, #31
 80071f2:	d508      	bpl.n	8007206 <_dtoa_r+0x366>
 80071f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071fc:	f7f9 fa1c 	bl	8000638 <__aeabi_dmul>
 8007200:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007204:	3601      	adds	r6, #1
 8007206:	1064      	asrs	r4, r4, #1
 8007208:	3508      	adds	r5, #8
 800720a:	e7e5      	b.n	80071d8 <_dtoa_r+0x338>
 800720c:	f000 80d2 	beq.w	80073b4 <_dtoa_r+0x514>
 8007210:	427c      	negs	r4, r7
 8007212:	4b92      	ldr	r3, [pc, #584]	@ (800745c <_dtoa_r+0x5bc>)
 8007214:	4d92      	ldr	r5, [pc, #584]	@ (8007460 <_dtoa_r+0x5c0>)
 8007216:	f004 020f 	and.w	r2, r4, #15
 800721a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800721e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007222:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007226:	f7f9 fa07 	bl	8000638 <__aeabi_dmul>
 800722a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800722e:	1124      	asrs	r4, r4, #4
 8007230:	2300      	movs	r3, #0
 8007232:	2602      	movs	r6, #2
 8007234:	2c00      	cmp	r4, #0
 8007236:	f040 80b2 	bne.w	800739e <_dtoa_r+0x4fe>
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1d3      	bne.n	80071e6 <_dtoa_r+0x346>
 800723e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007240:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 80b7 	beq.w	80073b8 <_dtoa_r+0x518>
 800724a:	4b86      	ldr	r3, [pc, #536]	@ (8007464 <_dtoa_r+0x5c4>)
 800724c:	2200      	movs	r2, #0
 800724e:	4620      	mov	r0, r4
 8007250:	4629      	mov	r1, r5
 8007252:	f7f9 fc63 	bl	8000b1c <__aeabi_dcmplt>
 8007256:	2800      	cmp	r0, #0
 8007258:	f000 80ae 	beq.w	80073b8 <_dtoa_r+0x518>
 800725c:	9b07      	ldr	r3, [sp, #28]
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 80aa 	beq.w	80073b8 <_dtoa_r+0x518>
 8007264:	9b00      	ldr	r3, [sp, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	dd37      	ble.n	80072da <_dtoa_r+0x43a>
 800726a:	1e7b      	subs	r3, r7, #1
 800726c:	9304      	str	r3, [sp, #16]
 800726e:	4620      	mov	r0, r4
 8007270:	4b7d      	ldr	r3, [pc, #500]	@ (8007468 <_dtoa_r+0x5c8>)
 8007272:	2200      	movs	r2, #0
 8007274:	4629      	mov	r1, r5
 8007276:	f7f9 f9df 	bl	8000638 <__aeabi_dmul>
 800727a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800727e:	9c00      	ldr	r4, [sp, #0]
 8007280:	3601      	adds	r6, #1
 8007282:	4630      	mov	r0, r6
 8007284:	f7f9 f96e 	bl	8000564 <__aeabi_i2d>
 8007288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800728c:	f7f9 f9d4 	bl	8000638 <__aeabi_dmul>
 8007290:	4b76      	ldr	r3, [pc, #472]	@ (800746c <_dtoa_r+0x5cc>)
 8007292:	2200      	movs	r2, #0
 8007294:	f7f9 f81a 	bl	80002cc <__adddf3>
 8007298:	4605      	mov	r5, r0
 800729a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800729e:	2c00      	cmp	r4, #0
 80072a0:	f040 808d 	bne.w	80073be <_dtoa_r+0x51e>
 80072a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072a8:	4b71      	ldr	r3, [pc, #452]	@ (8007470 <_dtoa_r+0x5d0>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	f7f9 f80c 	bl	80002c8 <__aeabi_dsub>
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072b8:	462a      	mov	r2, r5
 80072ba:	4633      	mov	r3, r6
 80072bc:	f7f9 fc4c 	bl	8000b58 <__aeabi_dcmpgt>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	f040 828b 	bne.w	80077dc <_dtoa_r+0x93c>
 80072c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072ca:	462a      	mov	r2, r5
 80072cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80072d0:	f7f9 fc24 	bl	8000b1c <__aeabi_dcmplt>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	f040 8128 	bne.w	800752a <_dtoa_r+0x68a>
 80072da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80072de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80072e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f2c0 815a 	blt.w	800759e <_dtoa_r+0x6fe>
 80072ea:	2f0e      	cmp	r7, #14
 80072ec:	f300 8157 	bgt.w	800759e <_dtoa_r+0x6fe>
 80072f0:	4b5a      	ldr	r3, [pc, #360]	@ (800745c <_dtoa_r+0x5bc>)
 80072f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80072f6:	ed93 7b00 	vldr	d7, [r3]
 80072fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	ed8d 7b00 	vstr	d7, [sp]
 8007302:	da03      	bge.n	800730c <_dtoa_r+0x46c>
 8007304:	9b07      	ldr	r3, [sp, #28]
 8007306:	2b00      	cmp	r3, #0
 8007308:	f340 8101 	ble.w	800750e <_dtoa_r+0x66e>
 800730c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007310:	4656      	mov	r6, sl
 8007312:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007316:	4620      	mov	r0, r4
 8007318:	4629      	mov	r1, r5
 800731a:	f7f9 fab7 	bl	800088c <__aeabi_ddiv>
 800731e:	f7f9 fc3b 	bl	8000b98 <__aeabi_d2iz>
 8007322:	4680      	mov	r8, r0
 8007324:	f7f9 f91e 	bl	8000564 <__aeabi_i2d>
 8007328:	e9dd 2300 	ldrd	r2, r3, [sp]
 800732c:	f7f9 f984 	bl	8000638 <__aeabi_dmul>
 8007330:	4602      	mov	r2, r0
 8007332:	460b      	mov	r3, r1
 8007334:	4620      	mov	r0, r4
 8007336:	4629      	mov	r1, r5
 8007338:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800733c:	f7f8 ffc4 	bl	80002c8 <__aeabi_dsub>
 8007340:	f806 4b01 	strb.w	r4, [r6], #1
 8007344:	9d07      	ldr	r5, [sp, #28]
 8007346:	eba6 040a 	sub.w	r4, r6, sl
 800734a:	42a5      	cmp	r5, r4
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	f040 8117 	bne.w	8007582 <_dtoa_r+0x6e2>
 8007354:	f7f8 ffba 	bl	80002cc <__adddf3>
 8007358:	e9dd 2300 	ldrd	r2, r3, [sp]
 800735c:	4604      	mov	r4, r0
 800735e:	460d      	mov	r5, r1
 8007360:	f7f9 fbfa 	bl	8000b58 <__aeabi_dcmpgt>
 8007364:	2800      	cmp	r0, #0
 8007366:	f040 80f9 	bne.w	800755c <_dtoa_r+0x6bc>
 800736a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800736e:	4620      	mov	r0, r4
 8007370:	4629      	mov	r1, r5
 8007372:	f7f9 fbc9 	bl	8000b08 <__aeabi_dcmpeq>
 8007376:	b118      	cbz	r0, 8007380 <_dtoa_r+0x4e0>
 8007378:	f018 0f01 	tst.w	r8, #1
 800737c:	f040 80ee 	bne.w	800755c <_dtoa_r+0x6bc>
 8007380:	4649      	mov	r1, r9
 8007382:	4658      	mov	r0, fp
 8007384:	f000 fbda 	bl	8007b3c <_Bfree>
 8007388:	2300      	movs	r3, #0
 800738a:	7033      	strb	r3, [r6, #0]
 800738c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800738e:	3701      	adds	r7, #1
 8007390:	601f      	str	r7, [r3, #0]
 8007392:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 831d 	beq.w	80079d4 <_dtoa_r+0xb34>
 800739a:	601e      	str	r6, [r3, #0]
 800739c:	e31a      	b.n	80079d4 <_dtoa_r+0xb34>
 800739e:	07e2      	lsls	r2, r4, #31
 80073a0:	d505      	bpl.n	80073ae <_dtoa_r+0x50e>
 80073a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073a6:	f7f9 f947 	bl	8000638 <__aeabi_dmul>
 80073aa:	3601      	adds	r6, #1
 80073ac:	2301      	movs	r3, #1
 80073ae:	1064      	asrs	r4, r4, #1
 80073b0:	3508      	adds	r5, #8
 80073b2:	e73f      	b.n	8007234 <_dtoa_r+0x394>
 80073b4:	2602      	movs	r6, #2
 80073b6:	e742      	b.n	800723e <_dtoa_r+0x39e>
 80073b8:	9c07      	ldr	r4, [sp, #28]
 80073ba:	9704      	str	r7, [sp, #16]
 80073bc:	e761      	b.n	8007282 <_dtoa_r+0x3e2>
 80073be:	4b27      	ldr	r3, [pc, #156]	@ (800745c <_dtoa_r+0x5bc>)
 80073c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80073c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80073ca:	4454      	add	r4, sl
 80073cc:	2900      	cmp	r1, #0
 80073ce:	d053      	beq.n	8007478 <_dtoa_r+0x5d8>
 80073d0:	4928      	ldr	r1, [pc, #160]	@ (8007474 <_dtoa_r+0x5d4>)
 80073d2:	2000      	movs	r0, #0
 80073d4:	f7f9 fa5a 	bl	800088c <__aeabi_ddiv>
 80073d8:	4633      	mov	r3, r6
 80073da:	462a      	mov	r2, r5
 80073dc:	f7f8 ff74 	bl	80002c8 <__aeabi_dsub>
 80073e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073e4:	4656      	mov	r6, sl
 80073e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073ea:	f7f9 fbd5 	bl	8000b98 <__aeabi_d2iz>
 80073ee:	4605      	mov	r5, r0
 80073f0:	f7f9 f8b8 	bl	8000564 <__aeabi_i2d>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073fc:	f7f8 ff64 	bl	80002c8 <__aeabi_dsub>
 8007400:	3530      	adds	r5, #48	@ 0x30
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800740a:	f806 5b01 	strb.w	r5, [r6], #1
 800740e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007412:	f7f9 fb83 	bl	8000b1c <__aeabi_dcmplt>
 8007416:	2800      	cmp	r0, #0
 8007418:	d171      	bne.n	80074fe <_dtoa_r+0x65e>
 800741a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800741e:	4911      	ldr	r1, [pc, #68]	@ (8007464 <_dtoa_r+0x5c4>)
 8007420:	2000      	movs	r0, #0
 8007422:	f7f8 ff51 	bl	80002c8 <__aeabi_dsub>
 8007426:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800742a:	f7f9 fb77 	bl	8000b1c <__aeabi_dcmplt>
 800742e:	2800      	cmp	r0, #0
 8007430:	f040 8095 	bne.w	800755e <_dtoa_r+0x6be>
 8007434:	42a6      	cmp	r6, r4
 8007436:	f43f af50 	beq.w	80072da <_dtoa_r+0x43a>
 800743a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800743e:	4b0a      	ldr	r3, [pc, #40]	@ (8007468 <_dtoa_r+0x5c8>)
 8007440:	2200      	movs	r2, #0
 8007442:	f7f9 f8f9 	bl	8000638 <__aeabi_dmul>
 8007446:	4b08      	ldr	r3, [pc, #32]	@ (8007468 <_dtoa_r+0x5c8>)
 8007448:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800744c:	2200      	movs	r2, #0
 800744e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007452:	f7f9 f8f1 	bl	8000638 <__aeabi_dmul>
 8007456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800745a:	e7c4      	b.n	80073e6 <_dtoa_r+0x546>
 800745c:	0800a2b8 	.word	0x0800a2b8
 8007460:	0800a290 	.word	0x0800a290
 8007464:	3ff00000 	.word	0x3ff00000
 8007468:	40240000 	.word	0x40240000
 800746c:	401c0000 	.word	0x401c0000
 8007470:	40140000 	.word	0x40140000
 8007474:	3fe00000 	.word	0x3fe00000
 8007478:	4631      	mov	r1, r6
 800747a:	4628      	mov	r0, r5
 800747c:	f7f9 f8dc 	bl	8000638 <__aeabi_dmul>
 8007480:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007484:	9415      	str	r4, [sp, #84]	@ 0x54
 8007486:	4656      	mov	r6, sl
 8007488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800748c:	f7f9 fb84 	bl	8000b98 <__aeabi_d2iz>
 8007490:	4605      	mov	r5, r0
 8007492:	f7f9 f867 	bl	8000564 <__aeabi_i2d>
 8007496:	4602      	mov	r2, r0
 8007498:	460b      	mov	r3, r1
 800749a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800749e:	f7f8 ff13 	bl	80002c8 <__aeabi_dsub>
 80074a2:	3530      	adds	r5, #48	@ 0x30
 80074a4:	f806 5b01 	strb.w	r5, [r6], #1
 80074a8:	4602      	mov	r2, r0
 80074aa:	460b      	mov	r3, r1
 80074ac:	42a6      	cmp	r6, r4
 80074ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074b2:	f04f 0200 	mov.w	r2, #0
 80074b6:	d124      	bne.n	8007502 <_dtoa_r+0x662>
 80074b8:	4bac      	ldr	r3, [pc, #688]	@ (800776c <_dtoa_r+0x8cc>)
 80074ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80074be:	f7f8 ff05 	bl	80002cc <__adddf3>
 80074c2:	4602      	mov	r2, r0
 80074c4:	460b      	mov	r3, r1
 80074c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074ca:	f7f9 fb45 	bl	8000b58 <__aeabi_dcmpgt>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	d145      	bne.n	800755e <_dtoa_r+0x6be>
 80074d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80074d6:	49a5      	ldr	r1, [pc, #660]	@ (800776c <_dtoa_r+0x8cc>)
 80074d8:	2000      	movs	r0, #0
 80074da:	f7f8 fef5 	bl	80002c8 <__aeabi_dsub>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074e6:	f7f9 fb19 	bl	8000b1c <__aeabi_dcmplt>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	f43f aef5 	beq.w	80072da <_dtoa_r+0x43a>
 80074f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80074f2:	1e73      	subs	r3, r6, #1
 80074f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80074f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80074fa:	2b30      	cmp	r3, #48	@ 0x30
 80074fc:	d0f8      	beq.n	80074f0 <_dtoa_r+0x650>
 80074fe:	9f04      	ldr	r7, [sp, #16]
 8007500:	e73e      	b.n	8007380 <_dtoa_r+0x4e0>
 8007502:	4b9b      	ldr	r3, [pc, #620]	@ (8007770 <_dtoa_r+0x8d0>)
 8007504:	f7f9 f898 	bl	8000638 <__aeabi_dmul>
 8007508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800750c:	e7bc      	b.n	8007488 <_dtoa_r+0x5e8>
 800750e:	d10c      	bne.n	800752a <_dtoa_r+0x68a>
 8007510:	4b98      	ldr	r3, [pc, #608]	@ (8007774 <_dtoa_r+0x8d4>)
 8007512:	2200      	movs	r2, #0
 8007514:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007518:	f7f9 f88e 	bl	8000638 <__aeabi_dmul>
 800751c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007520:	f7f9 fb10 	bl	8000b44 <__aeabi_dcmpge>
 8007524:	2800      	cmp	r0, #0
 8007526:	f000 8157 	beq.w	80077d8 <_dtoa_r+0x938>
 800752a:	2400      	movs	r4, #0
 800752c:	4625      	mov	r5, r4
 800752e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007530:	43db      	mvns	r3, r3
 8007532:	9304      	str	r3, [sp, #16]
 8007534:	4656      	mov	r6, sl
 8007536:	2700      	movs	r7, #0
 8007538:	4621      	mov	r1, r4
 800753a:	4658      	mov	r0, fp
 800753c:	f000 fafe 	bl	8007b3c <_Bfree>
 8007540:	2d00      	cmp	r5, #0
 8007542:	d0dc      	beq.n	80074fe <_dtoa_r+0x65e>
 8007544:	b12f      	cbz	r7, 8007552 <_dtoa_r+0x6b2>
 8007546:	42af      	cmp	r7, r5
 8007548:	d003      	beq.n	8007552 <_dtoa_r+0x6b2>
 800754a:	4639      	mov	r1, r7
 800754c:	4658      	mov	r0, fp
 800754e:	f000 faf5 	bl	8007b3c <_Bfree>
 8007552:	4629      	mov	r1, r5
 8007554:	4658      	mov	r0, fp
 8007556:	f000 faf1 	bl	8007b3c <_Bfree>
 800755a:	e7d0      	b.n	80074fe <_dtoa_r+0x65e>
 800755c:	9704      	str	r7, [sp, #16]
 800755e:	4633      	mov	r3, r6
 8007560:	461e      	mov	r6, r3
 8007562:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007566:	2a39      	cmp	r2, #57	@ 0x39
 8007568:	d107      	bne.n	800757a <_dtoa_r+0x6da>
 800756a:	459a      	cmp	sl, r3
 800756c:	d1f8      	bne.n	8007560 <_dtoa_r+0x6c0>
 800756e:	9a04      	ldr	r2, [sp, #16]
 8007570:	3201      	adds	r2, #1
 8007572:	9204      	str	r2, [sp, #16]
 8007574:	2230      	movs	r2, #48	@ 0x30
 8007576:	f88a 2000 	strb.w	r2, [sl]
 800757a:	781a      	ldrb	r2, [r3, #0]
 800757c:	3201      	adds	r2, #1
 800757e:	701a      	strb	r2, [r3, #0]
 8007580:	e7bd      	b.n	80074fe <_dtoa_r+0x65e>
 8007582:	4b7b      	ldr	r3, [pc, #492]	@ (8007770 <_dtoa_r+0x8d0>)
 8007584:	2200      	movs	r2, #0
 8007586:	f7f9 f857 	bl	8000638 <__aeabi_dmul>
 800758a:	2200      	movs	r2, #0
 800758c:	2300      	movs	r3, #0
 800758e:	4604      	mov	r4, r0
 8007590:	460d      	mov	r5, r1
 8007592:	f7f9 fab9 	bl	8000b08 <__aeabi_dcmpeq>
 8007596:	2800      	cmp	r0, #0
 8007598:	f43f aebb 	beq.w	8007312 <_dtoa_r+0x472>
 800759c:	e6f0      	b.n	8007380 <_dtoa_r+0x4e0>
 800759e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80075a0:	2a00      	cmp	r2, #0
 80075a2:	f000 80db 	beq.w	800775c <_dtoa_r+0x8bc>
 80075a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075a8:	2a01      	cmp	r2, #1
 80075aa:	f300 80bf 	bgt.w	800772c <_dtoa_r+0x88c>
 80075ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80075b0:	2a00      	cmp	r2, #0
 80075b2:	f000 80b7 	beq.w	8007724 <_dtoa_r+0x884>
 80075b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80075ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80075bc:	4646      	mov	r6, r8
 80075be:	9a08      	ldr	r2, [sp, #32]
 80075c0:	2101      	movs	r1, #1
 80075c2:	441a      	add	r2, r3
 80075c4:	4658      	mov	r0, fp
 80075c6:	4498      	add	r8, r3
 80075c8:	9208      	str	r2, [sp, #32]
 80075ca:	f000 fb6b 	bl	8007ca4 <__i2b>
 80075ce:	4605      	mov	r5, r0
 80075d0:	b15e      	cbz	r6, 80075ea <_dtoa_r+0x74a>
 80075d2:	9b08      	ldr	r3, [sp, #32]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	dd08      	ble.n	80075ea <_dtoa_r+0x74a>
 80075d8:	42b3      	cmp	r3, r6
 80075da:	9a08      	ldr	r2, [sp, #32]
 80075dc:	bfa8      	it	ge
 80075de:	4633      	movge	r3, r6
 80075e0:	eba8 0803 	sub.w	r8, r8, r3
 80075e4:	1af6      	subs	r6, r6, r3
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	9308      	str	r3, [sp, #32]
 80075ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075ec:	b1f3      	cbz	r3, 800762c <_dtoa_r+0x78c>
 80075ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 80b7 	beq.w	8007764 <_dtoa_r+0x8c4>
 80075f6:	b18c      	cbz	r4, 800761c <_dtoa_r+0x77c>
 80075f8:	4629      	mov	r1, r5
 80075fa:	4622      	mov	r2, r4
 80075fc:	4658      	mov	r0, fp
 80075fe:	f000 fc11 	bl	8007e24 <__pow5mult>
 8007602:	464a      	mov	r2, r9
 8007604:	4601      	mov	r1, r0
 8007606:	4605      	mov	r5, r0
 8007608:	4658      	mov	r0, fp
 800760a:	f000 fb61 	bl	8007cd0 <__multiply>
 800760e:	4649      	mov	r1, r9
 8007610:	9004      	str	r0, [sp, #16]
 8007612:	4658      	mov	r0, fp
 8007614:	f000 fa92 	bl	8007b3c <_Bfree>
 8007618:	9b04      	ldr	r3, [sp, #16]
 800761a:	4699      	mov	r9, r3
 800761c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800761e:	1b1a      	subs	r2, r3, r4
 8007620:	d004      	beq.n	800762c <_dtoa_r+0x78c>
 8007622:	4649      	mov	r1, r9
 8007624:	4658      	mov	r0, fp
 8007626:	f000 fbfd 	bl	8007e24 <__pow5mult>
 800762a:	4681      	mov	r9, r0
 800762c:	2101      	movs	r1, #1
 800762e:	4658      	mov	r0, fp
 8007630:	f000 fb38 	bl	8007ca4 <__i2b>
 8007634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007636:	4604      	mov	r4, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 81cf 	beq.w	80079dc <_dtoa_r+0xb3c>
 800763e:	461a      	mov	r2, r3
 8007640:	4601      	mov	r1, r0
 8007642:	4658      	mov	r0, fp
 8007644:	f000 fbee 	bl	8007e24 <__pow5mult>
 8007648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800764a:	2b01      	cmp	r3, #1
 800764c:	4604      	mov	r4, r0
 800764e:	f300 8095 	bgt.w	800777c <_dtoa_r+0x8dc>
 8007652:	9b02      	ldr	r3, [sp, #8]
 8007654:	2b00      	cmp	r3, #0
 8007656:	f040 8087 	bne.w	8007768 <_dtoa_r+0x8c8>
 800765a:	9b03      	ldr	r3, [sp, #12]
 800765c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007660:	2b00      	cmp	r3, #0
 8007662:	f040 8089 	bne.w	8007778 <_dtoa_r+0x8d8>
 8007666:	9b03      	ldr	r3, [sp, #12]
 8007668:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800766c:	0d1b      	lsrs	r3, r3, #20
 800766e:	051b      	lsls	r3, r3, #20
 8007670:	b12b      	cbz	r3, 800767e <_dtoa_r+0x7de>
 8007672:	9b08      	ldr	r3, [sp, #32]
 8007674:	3301      	adds	r3, #1
 8007676:	9308      	str	r3, [sp, #32]
 8007678:	f108 0801 	add.w	r8, r8, #1
 800767c:	2301      	movs	r3, #1
 800767e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007682:	2b00      	cmp	r3, #0
 8007684:	f000 81b0 	beq.w	80079e8 <_dtoa_r+0xb48>
 8007688:	6923      	ldr	r3, [r4, #16]
 800768a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800768e:	6918      	ldr	r0, [r3, #16]
 8007690:	f000 fabc 	bl	8007c0c <__hi0bits>
 8007694:	f1c0 0020 	rsb	r0, r0, #32
 8007698:	9b08      	ldr	r3, [sp, #32]
 800769a:	4418      	add	r0, r3
 800769c:	f010 001f 	ands.w	r0, r0, #31
 80076a0:	d077      	beq.n	8007792 <_dtoa_r+0x8f2>
 80076a2:	f1c0 0320 	rsb	r3, r0, #32
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	dd6b      	ble.n	8007782 <_dtoa_r+0x8e2>
 80076aa:	9b08      	ldr	r3, [sp, #32]
 80076ac:	f1c0 001c 	rsb	r0, r0, #28
 80076b0:	4403      	add	r3, r0
 80076b2:	4480      	add	r8, r0
 80076b4:	4406      	add	r6, r0
 80076b6:	9308      	str	r3, [sp, #32]
 80076b8:	f1b8 0f00 	cmp.w	r8, #0
 80076bc:	dd05      	ble.n	80076ca <_dtoa_r+0x82a>
 80076be:	4649      	mov	r1, r9
 80076c0:	4642      	mov	r2, r8
 80076c2:	4658      	mov	r0, fp
 80076c4:	f000 fc08 	bl	8007ed8 <__lshift>
 80076c8:	4681      	mov	r9, r0
 80076ca:	9b08      	ldr	r3, [sp, #32]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	dd05      	ble.n	80076dc <_dtoa_r+0x83c>
 80076d0:	4621      	mov	r1, r4
 80076d2:	461a      	mov	r2, r3
 80076d4:	4658      	mov	r0, fp
 80076d6:	f000 fbff 	bl	8007ed8 <__lshift>
 80076da:	4604      	mov	r4, r0
 80076dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d059      	beq.n	8007796 <_dtoa_r+0x8f6>
 80076e2:	4621      	mov	r1, r4
 80076e4:	4648      	mov	r0, r9
 80076e6:	f000 fc63 	bl	8007fb0 <__mcmp>
 80076ea:	2800      	cmp	r0, #0
 80076ec:	da53      	bge.n	8007796 <_dtoa_r+0x8f6>
 80076ee:	1e7b      	subs	r3, r7, #1
 80076f0:	9304      	str	r3, [sp, #16]
 80076f2:	4649      	mov	r1, r9
 80076f4:	2300      	movs	r3, #0
 80076f6:	220a      	movs	r2, #10
 80076f8:	4658      	mov	r0, fp
 80076fa:	f000 fa41 	bl	8007b80 <__multadd>
 80076fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007700:	4681      	mov	r9, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 8172 	beq.w	80079ec <_dtoa_r+0xb4c>
 8007708:	2300      	movs	r3, #0
 800770a:	4629      	mov	r1, r5
 800770c:	220a      	movs	r2, #10
 800770e:	4658      	mov	r0, fp
 8007710:	f000 fa36 	bl	8007b80 <__multadd>
 8007714:	9b00      	ldr	r3, [sp, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	4605      	mov	r5, r0
 800771a:	dc67      	bgt.n	80077ec <_dtoa_r+0x94c>
 800771c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800771e:	2b02      	cmp	r3, #2
 8007720:	dc41      	bgt.n	80077a6 <_dtoa_r+0x906>
 8007722:	e063      	b.n	80077ec <_dtoa_r+0x94c>
 8007724:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007726:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800772a:	e746      	b.n	80075ba <_dtoa_r+0x71a>
 800772c:	9b07      	ldr	r3, [sp, #28]
 800772e:	1e5c      	subs	r4, r3, #1
 8007730:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007732:	42a3      	cmp	r3, r4
 8007734:	bfbf      	itttt	lt
 8007736:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007738:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800773a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800773c:	1ae3      	sublt	r3, r4, r3
 800773e:	bfb4      	ite	lt
 8007740:	18d2      	addlt	r2, r2, r3
 8007742:	1b1c      	subge	r4, r3, r4
 8007744:	9b07      	ldr	r3, [sp, #28]
 8007746:	bfbc      	itt	lt
 8007748:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800774a:	2400      	movlt	r4, #0
 800774c:	2b00      	cmp	r3, #0
 800774e:	bfb5      	itete	lt
 8007750:	eba8 0603 	sublt.w	r6, r8, r3
 8007754:	9b07      	ldrge	r3, [sp, #28]
 8007756:	2300      	movlt	r3, #0
 8007758:	4646      	movge	r6, r8
 800775a:	e730      	b.n	80075be <_dtoa_r+0x71e>
 800775c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800775e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007760:	4646      	mov	r6, r8
 8007762:	e735      	b.n	80075d0 <_dtoa_r+0x730>
 8007764:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007766:	e75c      	b.n	8007622 <_dtoa_r+0x782>
 8007768:	2300      	movs	r3, #0
 800776a:	e788      	b.n	800767e <_dtoa_r+0x7de>
 800776c:	3fe00000 	.word	0x3fe00000
 8007770:	40240000 	.word	0x40240000
 8007774:	40140000 	.word	0x40140000
 8007778:	9b02      	ldr	r3, [sp, #8]
 800777a:	e780      	b.n	800767e <_dtoa_r+0x7de>
 800777c:	2300      	movs	r3, #0
 800777e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007780:	e782      	b.n	8007688 <_dtoa_r+0x7e8>
 8007782:	d099      	beq.n	80076b8 <_dtoa_r+0x818>
 8007784:	9a08      	ldr	r2, [sp, #32]
 8007786:	331c      	adds	r3, #28
 8007788:	441a      	add	r2, r3
 800778a:	4498      	add	r8, r3
 800778c:	441e      	add	r6, r3
 800778e:	9208      	str	r2, [sp, #32]
 8007790:	e792      	b.n	80076b8 <_dtoa_r+0x818>
 8007792:	4603      	mov	r3, r0
 8007794:	e7f6      	b.n	8007784 <_dtoa_r+0x8e4>
 8007796:	9b07      	ldr	r3, [sp, #28]
 8007798:	9704      	str	r7, [sp, #16]
 800779a:	2b00      	cmp	r3, #0
 800779c:	dc20      	bgt.n	80077e0 <_dtoa_r+0x940>
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	dd1e      	ble.n	80077e4 <_dtoa_r+0x944>
 80077a6:	9b00      	ldr	r3, [sp, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f47f aec0 	bne.w	800752e <_dtoa_r+0x68e>
 80077ae:	4621      	mov	r1, r4
 80077b0:	2205      	movs	r2, #5
 80077b2:	4658      	mov	r0, fp
 80077b4:	f000 f9e4 	bl	8007b80 <__multadd>
 80077b8:	4601      	mov	r1, r0
 80077ba:	4604      	mov	r4, r0
 80077bc:	4648      	mov	r0, r9
 80077be:	f000 fbf7 	bl	8007fb0 <__mcmp>
 80077c2:	2800      	cmp	r0, #0
 80077c4:	f77f aeb3 	ble.w	800752e <_dtoa_r+0x68e>
 80077c8:	4656      	mov	r6, sl
 80077ca:	2331      	movs	r3, #49	@ 0x31
 80077cc:	f806 3b01 	strb.w	r3, [r6], #1
 80077d0:	9b04      	ldr	r3, [sp, #16]
 80077d2:	3301      	adds	r3, #1
 80077d4:	9304      	str	r3, [sp, #16]
 80077d6:	e6ae      	b.n	8007536 <_dtoa_r+0x696>
 80077d8:	9c07      	ldr	r4, [sp, #28]
 80077da:	9704      	str	r7, [sp, #16]
 80077dc:	4625      	mov	r5, r4
 80077de:	e7f3      	b.n	80077c8 <_dtoa_r+0x928>
 80077e0:	9b07      	ldr	r3, [sp, #28]
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 8104 	beq.w	80079f4 <_dtoa_r+0xb54>
 80077ec:	2e00      	cmp	r6, #0
 80077ee:	dd05      	ble.n	80077fc <_dtoa_r+0x95c>
 80077f0:	4629      	mov	r1, r5
 80077f2:	4632      	mov	r2, r6
 80077f4:	4658      	mov	r0, fp
 80077f6:	f000 fb6f 	bl	8007ed8 <__lshift>
 80077fa:	4605      	mov	r5, r0
 80077fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d05a      	beq.n	80078b8 <_dtoa_r+0xa18>
 8007802:	6869      	ldr	r1, [r5, #4]
 8007804:	4658      	mov	r0, fp
 8007806:	f000 f959 	bl	8007abc <_Balloc>
 800780a:	4606      	mov	r6, r0
 800780c:	b928      	cbnz	r0, 800781a <_dtoa_r+0x97a>
 800780e:	4b84      	ldr	r3, [pc, #528]	@ (8007a20 <_dtoa_r+0xb80>)
 8007810:	4602      	mov	r2, r0
 8007812:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007816:	f7ff bb5a 	b.w	8006ece <_dtoa_r+0x2e>
 800781a:	692a      	ldr	r2, [r5, #16]
 800781c:	3202      	adds	r2, #2
 800781e:	0092      	lsls	r2, r2, #2
 8007820:	f105 010c 	add.w	r1, r5, #12
 8007824:	300c      	adds	r0, #12
 8007826:	f000 ff71 	bl	800870c <memcpy>
 800782a:	2201      	movs	r2, #1
 800782c:	4631      	mov	r1, r6
 800782e:	4658      	mov	r0, fp
 8007830:	f000 fb52 	bl	8007ed8 <__lshift>
 8007834:	f10a 0301 	add.w	r3, sl, #1
 8007838:	9307      	str	r3, [sp, #28]
 800783a:	9b00      	ldr	r3, [sp, #0]
 800783c:	4453      	add	r3, sl
 800783e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007840:	9b02      	ldr	r3, [sp, #8]
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	462f      	mov	r7, r5
 8007848:	930a      	str	r3, [sp, #40]	@ 0x28
 800784a:	4605      	mov	r5, r0
 800784c:	9b07      	ldr	r3, [sp, #28]
 800784e:	4621      	mov	r1, r4
 8007850:	3b01      	subs	r3, #1
 8007852:	4648      	mov	r0, r9
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	f7ff fa9a 	bl	8006d8e <quorem>
 800785a:	4639      	mov	r1, r7
 800785c:	9002      	str	r0, [sp, #8]
 800785e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007862:	4648      	mov	r0, r9
 8007864:	f000 fba4 	bl	8007fb0 <__mcmp>
 8007868:	462a      	mov	r2, r5
 800786a:	9008      	str	r0, [sp, #32]
 800786c:	4621      	mov	r1, r4
 800786e:	4658      	mov	r0, fp
 8007870:	f000 fbba 	bl	8007fe8 <__mdiff>
 8007874:	68c2      	ldr	r2, [r0, #12]
 8007876:	4606      	mov	r6, r0
 8007878:	bb02      	cbnz	r2, 80078bc <_dtoa_r+0xa1c>
 800787a:	4601      	mov	r1, r0
 800787c:	4648      	mov	r0, r9
 800787e:	f000 fb97 	bl	8007fb0 <__mcmp>
 8007882:	4602      	mov	r2, r0
 8007884:	4631      	mov	r1, r6
 8007886:	4658      	mov	r0, fp
 8007888:	920e      	str	r2, [sp, #56]	@ 0x38
 800788a:	f000 f957 	bl	8007b3c <_Bfree>
 800788e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007890:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007892:	9e07      	ldr	r6, [sp, #28]
 8007894:	ea43 0102 	orr.w	r1, r3, r2
 8007898:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800789a:	4319      	orrs	r1, r3
 800789c:	d110      	bne.n	80078c0 <_dtoa_r+0xa20>
 800789e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80078a2:	d029      	beq.n	80078f8 <_dtoa_r+0xa58>
 80078a4:	9b08      	ldr	r3, [sp, #32]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	dd02      	ble.n	80078b0 <_dtoa_r+0xa10>
 80078aa:	9b02      	ldr	r3, [sp, #8]
 80078ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80078b0:	9b00      	ldr	r3, [sp, #0]
 80078b2:	f883 8000 	strb.w	r8, [r3]
 80078b6:	e63f      	b.n	8007538 <_dtoa_r+0x698>
 80078b8:	4628      	mov	r0, r5
 80078ba:	e7bb      	b.n	8007834 <_dtoa_r+0x994>
 80078bc:	2201      	movs	r2, #1
 80078be:	e7e1      	b.n	8007884 <_dtoa_r+0x9e4>
 80078c0:	9b08      	ldr	r3, [sp, #32]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	db04      	blt.n	80078d0 <_dtoa_r+0xa30>
 80078c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078c8:	430b      	orrs	r3, r1
 80078ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078cc:	430b      	orrs	r3, r1
 80078ce:	d120      	bne.n	8007912 <_dtoa_r+0xa72>
 80078d0:	2a00      	cmp	r2, #0
 80078d2:	dded      	ble.n	80078b0 <_dtoa_r+0xa10>
 80078d4:	4649      	mov	r1, r9
 80078d6:	2201      	movs	r2, #1
 80078d8:	4658      	mov	r0, fp
 80078da:	f000 fafd 	bl	8007ed8 <__lshift>
 80078de:	4621      	mov	r1, r4
 80078e0:	4681      	mov	r9, r0
 80078e2:	f000 fb65 	bl	8007fb0 <__mcmp>
 80078e6:	2800      	cmp	r0, #0
 80078e8:	dc03      	bgt.n	80078f2 <_dtoa_r+0xa52>
 80078ea:	d1e1      	bne.n	80078b0 <_dtoa_r+0xa10>
 80078ec:	f018 0f01 	tst.w	r8, #1
 80078f0:	d0de      	beq.n	80078b0 <_dtoa_r+0xa10>
 80078f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80078f6:	d1d8      	bne.n	80078aa <_dtoa_r+0xa0a>
 80078f8:	9a00      	ldr	r2, [sp, #0]
 80078fa:	2339      	movs	r3, #57	@ 0x39
 80078fc:	7013      	strb	r3, [r2, #0]
 80078fe:	4633      	mov	r3, r6
 8007900:	461e      	mov	r6, r3
 8007902:	3b01      	subs	r3, #1
 8007904:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007908:	2a39      	cmp	r2, #57	@ 0x39
 800790a:	d052      	beq.n	80079b2 <_dtoa_r+0xb12>
 800790c:	3201      	adds	r2, #1
 800790e:	701a      	strb	r2, [r3, #0]
 8007910:	e612      	b.n	8007538 <_dtoa_r+0x698>
 8007912:	2a00      	cmp	r2, #0
 8007914:	dd07      	ble.n	8007926 <_dtoa_r+0xa86>
 8007916:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800791a:	d0ed      	beq.n	80078f8 <_dtoa_r+0xa58>
 800791c:	9a00      	ldr	r2, [sp, #0]
 800791e:	f108 0301 	add.w	r3, r8, #1
 8007922:	7013      	strb	r3, [r2, #0]
 8007924:	e608      	b.n	8007538 <_dtoa_r+0x698>
 8007926:	9b07      	ldr	r3, [sp, #28]
 8007928:	9a07      	ldr	r2, [sp, #28]
 800792a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800792e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007930:	4293      	cmp	r3, r2
 8007932:	d028      	beq.n	8007986 <_dtoa_r+0xae6>
 8007934:	4649      	mov	r1, r9
 8007936:	2300      	movs	r3, #0
 8007938:	220a      	movs	r2, #10
 800793a:	4658      	mov	r0, fp
 800793c:	f000 f920 	bl	8007b80 <__multadd>
 8007940:	42af      	cmp	r7, r5
 8007942:	4681      	mov	r9, r0
 8007944:	f04f 0300 	mov.w	r3, #0
 8007948:	f04f 020a 	mov.w	r2, #10
 800794c:	4639      	mov	r1, r7
 800794e:	4658      	mov	r0, fp
 8007950:	d107      	bne.n	8007962 <_dtoa_r+0xac2>
 8007952:	f000 f915 	bl	8007b80 <__multadd>
 8007956:	4607      	mov	r7, r0
 8007958:	4605      	mov	r5, r0
 800795a:	9b07      	ldr	r3, [sp, #28]
 800795c:	3301      	adds	r3, #1
 800795e:	9307      	str	r3, [sp, #28]
 8007960:	e774      	b.n	800784c <_dtoa_r+0x9ac>
 8007962:	f000 f90d 	bl	8007b80 <__multadd>
 8007966:	4629      	mov	r1, r5
 8007968:	4607      	mov	r7, r0
 800796a:	2300      	movs	r3, #0
 800796c:	220a      	movs	r2, #10
 800796e:	4658      	mov	r0, fp
 8007970:	f000 f906 	bl	8007b80 <__multadd>
 8007974:	4605      	mov	r5, r0
 8007976:	e7f0      	b.n	800795a <_dtoa_r+0xaba>
 8007978:	9b00      	ldr	r3, [sp, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	bfcc      	ite	gt
 800797e:	461e      	movgt	r6, r3
 8007980:	2601      	movle	r6, #1
 8007982:	4456      	add	r6, sl
 8007984:	2700      	movs	r7, #0
 8007986:	4649      	mov	r1, r9
 8007988:	2201      	movs	r2, #1
 800798a:	4658      	mov	r0, fp
 800798c:	f000 faa4 	bl	8007ed8 <__lshift>
 8007990:	4621      	mov	r1, r4
 8007992:	4681      	mov	r9, r0
 8007994:	f000 fb0c 	bl	8007fb0 <__mcmp>
 8007998:	2800      	cmp	r0, #0
 800799a:	dcb0      	bgt.n	80078fe <_dtoa_r+0xa5e>
 800799c:	d102      	bne.n	80079a4 <_dtoa_r+0xb04>
 800799e:	f018 0f01 	tst.w	r8, #1
 80079a2:	d1ac      	bne.n	80078fe <_dtoa_r+0xa5e>
 80079a4:	4633      	mov	r3, r6
 80079a6:	461e      	mov	r6, r3
 80079a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079ac:	2a30      	cmp	r2, #48	@ 0x30
 80079ae:	d0fa      	beq.n	80079a6 <_dtoa_r+0xb06>
 80079b0:	e5c2      	b.n	8007538 <_dtoa_r+0x698>
 80079b2:	459a      	cmp	sl, r3
 80079b4:	d1a4      	bne.n	8007900 <_dtoa_r+0xa60>
 80079b6:	9b04      	ldr	r3, [sp, #16]
 80079b8:	3301      	adds	r3, #1
 80079ba:	9304      	str	r3, [sp, #16]
 80079bc:	2331      	movs	r3, #49	@ 0x31
 80079be:	f88a 3000 	strb.w	r3, [sl]
 80079c2:	e5b9      	b.n	8007538 <_dtoa_r+0x698>
 80079c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007a24 <_dtoa_r+0xb84>
 80079ca:	b11b      	cbz	r3, 80079d4 <_dtoa_r+0xb34>
 80079cc:	f10a 0308 	add.w	r3, sl, #8
 80079d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	4650      	mov	r0, sl
 80079d6:	b019      	add	sp, #100	@ 0x64
 80079d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079de:	2b01      	cmp	r3, #1
 80079e0:	f77f ae37 	ble.w	8007652 <_dtoa_r+0x7b2>
 80079e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80079e8:	2001      	movs	r0, #1
 80079ea:	e655      	b.n	8007698 <_dtoa_r+0x7f8>
 80079ec:	9b00      	ldr	r3, [sp, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f77f aed6 	ble.w	80077a0 <_dtoa_r+0x900>
 80079f4:	4656      	mov	r6, sl
 80079f6:	4621      	mov	r1, r4
 80079f8:	4648      	mov	r0, r9
 80079fa:	f7ff f9c8 	bl	8006d8e <quorem>
 80079fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007a02:	f806 8b01 	strb.w	r8, [r6], #1
 8007a06:	9b00      	ldr	r3, [sp, #0]
 8007a08:	eba6 020a 	sub.w	r2, r6, sl
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	ddb3      	ble.n	8007978 <_dtoa_r+0xad8>
 8007a10:	4649      	mov	r1, r9
 8007a12:	2300      	movs	r3, #0
 8007a14:	220a      	movs	r2, #10
 8007a16:	4658      	mov	r0, fp
 8007a18:	f000 f8b2 	bl	8007b80 <__multadd>
 8007a1c:	4681      	mov	r9, r0
 8007a1e:	e7ea      	b.n	80079f6 <_dtoa_r+0xb56>
 8007a20:	0800a214 	.word	0x0800a214
 8007a24:	0800a198 	.word	0x0800a198

08007a28 <_free_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	2900      	cmp	r1, #0
 8007a2e:	d041      	beq.n	8007ab4 <_free_r+0x8c>
 8007a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a34:	1f0c      	subs	r4, r1, #4
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	bfb8      	it	lt
 8007a3a:	18e4      	addlt	r4, r4, r3
 8007a3c:	f7fe fa92 	bl	8005f64 <__malloc_lock>
 8007a40:	4a1d      	ldr	r2, [pc, #116]	@ (8007ab8 <_free_r+0x90>)
 8007a42:	6813      	ldr	r3, [r2, #0]
 8007a44:	b933      	cbnz	r3, 8007a54 <_free_r+0x2c>
 8007a46:	6063      	str	r3, [r4, #4]
 8007a48:	6014      	str	r4, [r2, #0]
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a50:	f7fe ba8e 	b.w	8005f70 <__malloc_unlock>
 8007a54:	42a3      	cmp	r3, r4
 8007a56:	d908      	bls.n	8007a6a <_free_r+0x42>
 8007a58:	6820      	ldr	r0, [r4, #0]
 8007a5a:	1821      	adds	r1, r4, r0
 8007a5c:	428b      	cmp	r3, r1
 8007a5e:	bf01      	itttt	eq
 8007a60:	6819      	ldreq	r1, [r3, #0]
 8007a62:	685b      	ldreq	r3, [r3, #4]
 8007a64:	1809      	addeq	r1, r1, r0
 8007a66:	6021      	streq	r1, [r4, #0]
 8007a68:	e7ed      	b.n	8007a46 <_free_r+0x1e>
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	b10b      	cbz	r3, 8007a74 <_free_r+0x4c>
 8007a70:	42a3      	cmp	r3, r4
 8007a72:	d9fa      	bls.n	8007a6a <_free_r+0x42>
 8007a74:	6811      	ldr	r1, [r2, #0]
 8007a76:	1850      	adds	r0, r2, r1
 8007a78:	42a0      	cmp	r0, r4
 8007a7a:	d10b      	bne.n	8007a94 <_free_r+0x6c>
 8007a7c:	6820      	ldr	r0, [r4, #0]
 8007a7e:	4401      	add	r1, r0
 8007a80:	1850      	adds	r0, r2, r1
 8007a82:	4283      	cmp	r3, r0
 8007a84:	6011      	str	r1, [r2, #0]
 8007a86:	d1e0      	bne.n	8007a4a <_free_r+0x22>
 8007a88:	6818      	ldr	r0, [r3, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	6053      	str	r3, [r2, #4]
 8007a8e:	4408      	add	r0, r1
 8007a90:	6010      	str	r0, [r2, #0]
 8007a92:	e7da      	b.n	8007a4a <_free_r+0x22>
 8007a94:	d902      	bls.n	8007a9c <_free_r+0x74>
 8007a96:	230c      	movs	r3, #12
 8007a98:	602b      	str	r3, [r5, #0]
 8007a9a:	e7d6      	b.n	8007a4a <_free_r+0x22>
 8007a9c:	6820      	ldr	r0, [r4, #0]
 8007a9e:	1821      	adds	r1, r4, r0
 8007aa0:	428b      	cmp	r3, r1
 8007aa2:	bf04      	itt	eq
 8007aa4:	6819      	ldreq	r1, [r3, #0]
 8007aa6:	685b      	ldreq	r3, [r3, #4]
 8007aa8:	6063      	str	r3, [r4, #4]
 8007aaa:	bf04      	itt	eq
 8007aac:	1809      	addeq	r1, r1, r0
 8007aae:	6021      	streq	r1, [r4, #0]
 8007ab0:	6054      	str	r4, [r2, #4]
 8007ab2:	e7ca      	b.n	8007a4a <_free_r+0x22>
 8007ab4:	bd38      	pop	{r3, r4, r5, pc}
 8007ab6:	bf00      	nop
 8007ab8:	20000340 	.word	0x20000340

08007abc <_Balloc>:
 8007abc:	b570      	push	{r4, r5, r6, lr}
 8007abe:	69c6      	ldr	r6, [r0, #28]
 8007ac0:	4604      	mov	r4, r0
 8007ac2:	460d      	mov	r5, r1
 8007ac4:	b976      	cbnz	r6, 8007ae4 <_Balloc+0x28>
 8007ac6:	2010      	movs	r0, #16
 8007ac8:	f7fe f99a 	bl	8005e00 <malloc>
 8007acc:	4602      	mov	r2, r0
 8007ace:	61e0      	str	r0, [r4, #28]
 8007ad0:	b920      	cbnz	r0, 8007adc <_Balloc+0x20>
 8007ad2:	4b18      	ldr	r3, [pc, #96]	@ (8007b34 <_Balloc+0x78>)
 8007ad4:	4818      	ldr	r0, [pc, #96]	@ (8007b38 <_Balloc+0x7c>)
 8007ad6:	216b      	movs	r1, #107	@ 0x6b
 8007ad8:	f000 fe26 	bl	8008728 <__assert_func>
 8007adc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ae0:	6006      	str	r6, [r0, #0]
 8007ae2:	60c6      	str	r6, [r0, #12]
 8007ae4:	69e6      	ldr	r6, [r4, #28]
 8007ae6:	68f3      	ldr	r3, [r6, #12]
 8007ae8:	b183      	cbz	r3, 8007b0c <_Balloc+0x50>
 8007aea:	69e3      	ldr	r3, [r4, #28]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007af2:	b9b8      	cbnz	r0, 8007b24 <_Balloc+0x68>
 8007af4:	2101      	movs	r1, #1
 8007af6:	fa01 f605 	lsl.w	r6, r1, r5
 8007afa:	1d72      	adds	r2, r6, #5
 8007afc:	0092      	lsls	r2, r2, #2
 8007afe:	4620      	mov	r0, r4
 8007b00:	f000 fe30 	bl	8008764 <_calloc_r>
 8007b04:	b160      	cbz	r0, 8007b20 <_Balloc+0x64>
 8007b06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b0a:	e00e      	b.n	8007b2a <_Balloc+0x6e>
 8007b0c:	2221      	movs	r2, #33	@ 0x21
 8007b0e:	2104      	movs	r1, #4
 8007b10:	4620      	mov	r0, r4
 8007b12:	f000 fe27 	bl	8008764 <_calloc_r>
 8007b16:	69e3      	ldr	r3, [r4, #28]
 8007b18:	60f0      	str	r0, [r6, #12]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e4      	bne.n	8007aea <_Balloc+0x2e>
 8007b20:	2000      	movs	r0, #0
 8007b22:	bd70      	pop	{r4, r5, r6, pc}
 8007b24:	6802      	ldr	r2, [r0, #0]
 8007b26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b30:	e7f7      	b.n	8007b22 <_Balloc+0x66>
 8007b32:	bf00      	nop
 8007b34:	0800a1a5 	.word	0x0800a1a5
 8007b38:	0800a225 	.word	0x0800a225

08007b3c <_Bfree>:
 8007b3c:	b570      	push	{r4, r5, r6, lr}
 8007b3e:	69c6      	ldr	r6, [r0, #28]
 8007b40:	4605      	mov	r5, r0
 8007b42:	460c      	mov	r4, r1
 8007b44:	b976      	cbnz	r6, 8007b64 <_Bfree+0x28>
 8007b46:	2010      	movs	r0, #16
 8007b48:	f7fe f95a 	bl	8005e00 <malloc>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	61e8      	str	r0, [r5, #28]
 8007b50:	b920      	cbnz	r0, 8007b5c <_Bfree+0x20>
 8007b52:	4b09      	ldr	r3, [pc, #36]	@ (8007b78 <_Bfree+0x3c>)
 8007b54:	4809      	ldr	r0, [pc, #36]	@ (8007b7c <_Bfree+0x40>)
 8007b56:	218f      	movs	r1, #143	@ 0x8f
 8007b58:	f000 fde6 	bl	8008728 <__assert_func>
 8007b5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b60:	6006      	str	r6, [r0, #0]
 8007b62:	60c6      	str	r6, [r0, #12]
 8007b64:	b13c      	cbz	r4, 8007b76 <_Bfree+0x3a>
 8007b66:	69eb      	ldr	r3, [r5, #28]
 8007b68:	6862      	ldr	r2, [r4, #4]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b70:	6021      	str	r1, [r4, #0]
 8007b72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b76:	bd70      	pop	{r4, r5, r6, pc}
 8007b78:	0800a1a5 	.word	0x0800a1a5
 8007b7c:	0800a225 	.word	0x0800a225

08007b80 <__multadd>:
 8007b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b84:	690d      	ldr	r5, [r1, #16]
 8007b86:	4607      	mov	r7, r0
 8007b88:	460c      	mov	r4, r1
 8007b8a:	461e      	mov	r6, r3
 8007b8c:	f101 0c14 	add.w	ip, r1, #20
 8007b90:	2000      	movs	r0, #0
 8007b92:	f8dc 3000 	ldr.w	r3, [ip]
 8007b96:	b299      	uxth	r1, r3
 8007b98:	fb02 6101 	mla	r1, r2, r1, r6
 8007b9c:	0c1e      	lsrs	r6, r3, #16
 8007b9e:	0c0b      	lsrs	r3, r1, #16
 8007ba0:	fb02 3306 	mla	r3, r2, r6, r3
 8007ba4:	b289      	uxth	r1, r1
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007bac:	4285      	cmp	r5, r0
 8007bae:	f84c 1b04 	str.w	r1, [ip], #4
 8007bb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007bb6:	dcec      	bgt.n	8007b92 <__multadd+0x12>
 8007bb8:	b30e      	cbz	r6, 8007bfe <__multadd+0x7e>
 8007bba:	68a3      	ldr	r3, [r4, #8]
 8007bbc:	42ab      	cmp	r3, r5
 8007bbe:	dc19      	bgt.n	8007bf4 <__multadd+0x74>
 8007bc0:	6861      	ldr	r1, [r4, #4]
 8007bc2:	4638      	mov	r0, r7
 8007bc4:	3101      	adds	r1, #1
 8007bc6:	f7ff ff79 	bl	8007abc <_Balloc>
 8007bca:	4680      	mov	r8, r0
 8007bcc:	b928      	cbnz	r0, 8007bda <__multadd+0x5a>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8007c04 <__multadd+0x84>)
 8007bd2:	480d      	ldr	r0, [pc, #52]	@ (8007c08 <__multadd+0x88>)
 8007bd4:	21ba      	movs	r1, #186	@ 0xba
 8007bd6:	f000 fda7 	bl	8008728 <__assert_func>
 8007bda:	6922      	ldr	r2, [r4, #16]
 8007bdc:	3202      	adds	r2, #2
 8007bde:	f104 010c 	add.w	r1, r4, #12
 8007be2:	0092      	lsls	r2, r2, #2
 8007be4:	300c      	adds	r0, #12
 8007be6:	f000 fd91 	bl	800870c <memcpy>
 8007bea:	4621      	mov	r1, r4
 8007bec:	4638      	mov	r0, r7
 8007bee:	f7ff ffa5 	bl	8007b3c <_Bfree>
 8007bf2:	4644      	mov	r4, r8
 8007bf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007bf8:	3501      	adds	r5, #1
 8007bfa:	615e      	str	r6, [r3, #20]
 8007bfc:	6125      	str	r5, [r4, #16]
 8007bfe:	4620      	mov	r0, r4
 8007c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c04:	0800a214 	.word	0x0800a214
 8007c08:	0800a225 	.word	0x0800a225

08007c0c <__hi0bits>:
 8007c0c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007c10:	4603      	mov	r3, r0
 8007c12:	bf36      	itet	cc
 8007c14:	0403      	lslcc	r3, r0, #16
 8007c16:	2000      	movcs	r0, #0
 8007c18:	2010      	movcc	r0, #16
 8007c1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c1e:	bf3c      	itt	cc
 8007c20:	021b      	lslcc	r3, r3, #8
 8007c22:	3008      	addcc	r0, #8
 8007c24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c28:	bf3c      	itt	cc
 8007c2a:	011b      	lslcc	r3, r3, #4
 8007c2c:	3004      	addcc	r0, #4
 8007c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c32:	bf3c      	itt	cc
 8007c34:	009b      	lslcc	r3, r3, #2
 8007c36:	3002      	addcc	r0, #2
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	db05      	blt.n	8007c48 <__hi0bits+0x3c>
 8007c3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007c40:	f100 0001 	add.w	r0, r0, #1
 8007c44:	bf08      	it	eq
 8007c46:	2020      	moveq	r0, #32
 8007c48:	4770      	bx	lr

08007c4a <__lo0bits>:
 8007c4a:	6803      	ldr	r3, [r0, #0]
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	f013 0007 	ands.w	r0, r3, #7
 8007c52:	d00b      	beq.n	8007c6c <__lo0bits+0x22>
 8007c54:	07d9      	lsls	r1, r3, #31
 8007c56:	d421      	bmi.n	8007c9c <__lo0bits+0x52>
 8007c58:	0798      	lsls	r0, r3, #30
 8007c5a:	bf49      	itett	mi
 8007c5c:	085b      	lsrmi	r3, r3, #1
 8007c5e:	089b      	lsrpl	r3, r3, #2
 8007c60:	2001      	movmi	r0, #1
 8007c62:	6013      	strmi	r3, [r2, #0]
 8007c64:	bf5c      	itt	pl
 8007c66:	6013      	strpl	r3, [r2, #0]
 8007c68:	2002      	movpl	r0, #2
 8007c6a:	4770      	bx	lr
 8007c6c:	b299      	uxth	r1, r3
 8007c6e:	b909      	cbnz	r1, 8007c74 <__lo0bits+0x2a>
 8007c70:	0c1b      	lsrs	r3, r3, #16
 8007c72:	2010      	movs	r0, #16
 8007c74:	b2d9      	uxtb	r1, r3
 8007c76:	b909      	cbnz	r1, 8007c7c <__lo0bits+0x32>
 8007c78:	3008      	adds	r0, #8
 8007c7a:	0a1b      	lsrs	r3, r3, #8
 8007c7c:	0719      	lsls	r1, r3, #28
 8007c7e:	bf04      	itt	eq
 8007c80:	091b      	lsreq	r3, r3, #4
 8007c82:	3004      	addeq	r0, #4
 8007c84:	0799      	lsls	r1, r3, #30
 8007c86:	bf04      	itt	eq
 8007c88:	089b      	lsreq	r3, r3, #2
 8007c8a:	3002      	addeq	r0, #2
 8007c8c:	07d9      	lsls	r1, r3, #31
 8007c8e:	d403      	bmi.n	8007c98 <__lo0bits+0x4e>
 8007c90:	085b      	lsrs	r3, r3, #1
 8007c92:	f100 0001 	add.w	r0, r0, #1
 8007c96:	d003      	beq.n	8007ca0 <__lo0bits+0x56>
 8007c98:	6013      	str	r3, [r2, #0]
 8007c9a:	4770      	bx	lr
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	4770      	bx	lr
 8007ca0:	2020      	movs	r0, #32
 8007ca2:	4770      	bx	lr

08007ca4 <__i2b>:
 8007ca4:	b510      	push	{r4, lr}
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	2101      	movs	r1, #1
 8007caa:	f7ff ff07 	bl	8007abc <_Balloc>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	b928      	cbnz	r0, 8007cbe <__i2b+0x1a>
 8007cb2:	4b05      	ldr	r3, [pc, #20]	@ (8007cc8 <__i2b+0x24>)
 8007cb4:	4805      	ldr	r0, [pc, #20]	@ (8007ccc <__i2b+0x28>)
 8007cb6:	f240 1145 	movw	r1, #325	@ 0x145
 8007cba:	f000 fd35 	bl	8008728 <__assert_func>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	6144      	str	r4, [r0, #20]
 8007cc2:	6103      	str	r3, [r0, #16]
 8007cc4:	bd10      	pop	{r4, pc}
 8007cc6:	bf00      	nop
 8007cc8:	0800a214 	.word	0x0800a214
 8007ccc:	0800a225 	.word	0x0800a225

08007cd0 <__multiply>:
 8007cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd4:	4614      	mov	r4, r2
 8007cd6:	690a      	ldr	r2, [r1, #16]
 8007cd8:	6923      	ldr	r3, [r4, #16]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	bfa8      	it	ge
 8007cde:	4623      	movge	r3, r4
 8007ce0:	460f      	mov	r7, r1
 8007ce2:	bfa4      	itt	ge
 8007ce4:	460c      	movge	r4, r1
 8007ce6:	461f      	movge	r7, r3
 8007ce8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007cec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007cf0:	68a3      	ldr	r3, [r4, #8]
 8007cf2:	6861      	ldr	r1, [r4, #4]
 8007cf4:	eb0a 0609 	add.w	r6, sl, r9
 8007cf8:	42b3      	cmp	r3, r6
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	bfb8      	it	lt
 8007cfe:	3101      	addlt	r1, #1
 8007d00:	f7ff fedc 	bl	8007abc <_Balloc>
 8007d04:	b930      	cbnz	r0, 8007d14 <__multiply+0x44>
 8007d06:	4602      	mov	r2, r0
 8007d08:	4b44      	ldr	r3, [pc, #272]	@ (8007e1c <__multiply+0x14c>)
 8007d0a:	4845      	ldr	r0, [pc, #276]	@ (8007e20 <__multiply+0x150>)
 8007d0c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007d10:	f000 fd0a 	bl	8008728 <__assert_func>
 8007d14:	f100 0514 	add.w	r5, r0, #20
 8007d18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d1c:	462b      	mov	r3, r5
 8007d1e:	2200      	movs	r2, #0
 8007d20:	4543      	cmp	r3, r8
 8007d22:	d321      	bcc.n	8007d68 <__multiply+0x98>
 8007d24:	f107 0114 	add.w	r1, r7, #20
 8007d28:	f104 0214 	add.w	r2, r4, #20
 8007d2c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007d30:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007d34:	9302      	str	r3, [sp, #8]
 8007d36:	1b13      	subs	r3, r2, r4
 8007d38:	3b15      	subs	r3, #21
 8007d3a:	f023 0303 	bic.w	r3, r3, #3
 8007d3e:	3304      	adds	r3, #4
 8007d40:	f104 0715 	add.w	r7, r4, #21
 8007d44:	42ba      	cmp	r2, r7
 8007d46:	bf38      	it	cc
 8007d48:	2304      	movcc	r3, #4
 8007d4a:	9301      	str	r3, [sp, #4]
 8007d4c:	9b02      	ldr	r3, [sp, #8]
 8007d4e:	9103      	str	r1, [sp, #12]
 8007d50:	428b      	cmp	r3, r1
 8007d52:	d80c      	bhi.n	8007d6e <__multiply+0x9e>
 8007d54:	2e00      	cmp	r6, #0
 8007d56:	dd03      	ble.n	8007d60 <__multiply+0x90>
 8007d58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d05b      	beq.n	8007e18 <__multiply+0x148>
 8007d60:	6106      	str	r6, [r0, #16]
 8007d62:	b005      	add	sp, #20
 8007d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d68:	f843 2b04 	str.w	r2, [r3], #4
 8007d6c:	e7d8      	b.n	8007d20 <__multiply+0x50>
 8007d6e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007d72:	f1ba 0f00 	cmp.w	sl, #0
 8007d76:	d024      	beq.n	8007dc2 <__multiply+0xf2>
 8007d78:	f104 0e14 	add.w	lr, r4, #20
 8007d7c:	46a9      	mov	r9, r5
 8007d7e:	f04f 0c00 	mov.w	ip, #0
 8007d82:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d86:	f8d9 3000 	ldr.w	r3, [r9]
 8007d8a:	fa1f fb87 	uxth.w	fp, r7
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	fb0a 330b 	mla	r3, sl, fp, r3
 8007d94:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007d98:	f8d9 7000 	ldr.w	r7, [r9]
 8007d9c:	4463      	add	r3, ip
 8007d9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007da2:	fb0a c70b 	mla	r7, sl, fp, ip
 8007da6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007db0:	4572      	cmp	r2, lr
 8007db2:	f849 3b04 	str.w	r3, [r9], #4
 8007db6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007dba:	d8e2      	bhi.n	8007d82 <__multiply+0xb2>
 8007dbc:	9b01      	ldr	r3, [sp, #4]
 8007dbe:	f845 c003 	str.w	ip, [r5, r3]
 8007dc2:	9b03      	ldr	r3, [sp, #12]
 8007dc4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007dc8:	3104      	adds	r1, #4
 8007dca:	f1b9 0f00 	cmp.w	r9, #0
 8007dce:	d021      	beq.n	8007e14 <__multiply+0x144>
 8007dd0:	682b      	ldr	r3, [r5, #0]
 8007dd2:	f104 0c14 	add.w	ip, r4, #20
 8007dd6:	46ae      	mov	lr, r5
 8007dd8:	f04f 0a00 	mov.w	sl, #0
 8007ddc:	f8bc b000 	ldrh.w	fp, [ip]
 8007de0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007de4:	fb09 770b 	mla	r7, r9, fp, r7
 8007de8:	4457      	add	r7, sl
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007df0:	f84e 3b04 	str.w	r3, [lr], #4
 8007df4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007df8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007dfc:	f8be 3000 	ldrh.w	r3, [lr]
 8007e00:	fb09 330a 	mla	r3, r9, sl, r3
 8007e04:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007e08:	4562      	cmp	r2, ip
 8007e0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e0e:	d8e5      	bhi.n	8007ddc <__multiply+0x10c>
 8007e10:	9f01      	ldr	r7, [sp, #4]
 8007e12:	51eb      	str	r3, [r5, r7]
 8007e14:	3504      	adds	r5, #4
 8007e16:	e799      	b.n	8007d4c <__multiply+0x7c>
 8007e18:	3e01      	subs	r6, #1
 8007e1a:	e79b      	b.n	8007d54 <__multiply+0x84>
 8007e1c:	0800a214 	.word	0x0800a214
 8007e20:	0800a225 	.word	0x0800a225

08007e24 <__pow5mult>:
 8007e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e28:	4615      	mov	r5, r2
 8007e2a:	f012 0203 	ands.w	r2, r2, #3
 8007e2e:	4607      	mov	r7, r0
 8007e30:	460e      	mov	r6, r1
 8007e32:	d007      	beq.n	8007e44 <__pow5mult+0x20>
 8007e34:	4c25      	ldr	r4, [pc, #148]	@ (8007ecc <__pow5mult+0xa8>)
 8007e36:	3a01      	subs	r2, #1
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e3e:	f7ff fe9f 	bl	8007b80 <__multadd>
 8007e42:	4606      	mov	r6, r0
 8007e44:	10ad      	asrs	r5, r5, #2
 8007e46:	d03d      	beq.n	8007ec4 <__pow5mult+0xa0>
 8007e48:	69fc      	ldr	r4, [r7, #28]
 8007e4a:	b97c      	cbnz	r4, 8007e6c <__pow5mult+0x48>
 8007e4c:	2010      	movs	r0, #16
 8007e4e:	f7fd ffd7 	bl	8005e00 <malloc>
 8007e52:	4602      	mov	r2, r0
 8007e54:	61f8      	str	r0, [r7, #28]
 8007e56:	b928      	cbnz	r0, 8007e64 <__pow5mult+0x40>
 8007e58:	4b1d      	ldr	r3, [pc, #116]	@ (8007ed0 <__pow5mult+0xac>)
 8007e5a:	481e      	ldr	r0, [pc, #120]	@ (8007ed4 <__pow5mult+0xb0>)
 8007e5c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007e60:	f000 fc62 	bl	8008728 <__assert_func>
 8007e64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e68:	6004      	str	r4, [r0, #0]
 8007e6a:	60c4      	str	r4, [r0, #12]
 8007e6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007e70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e74:	b94c      	cbnz	r4, 8007e8a <__pow5mult+0x66>
 8007e76:	f240 2171 	movw	r1, #625	@ 0x271
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	f7ff ff12 	bl	8007ca4 <__i2b>
 8007e80:	2300      	movs	r3, #0
 8007e82:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e86:	4604      	mov	r4, r0
 8007e88:	6003      	str	r3, [r0, #0]
 8007e8a:	f04f 0900 	mov.w	r9, #0
 8007e8e:	07eb      	lsls	r3, r5, #31
 8007e90:	d50a      	bpl.n	8007ea8 <__pow5mult+0x84>
 8007e92:	4631      	mov	r1, r6
 8007e94:	4622      	mov	r2, r4
 8007e96:	4638      	mov	r0, r7
 8007e98:	f7ff ff1a 	bl	8007cd0 <__multiply>
 8007e9c:	4631      	mov	r1, r6
 8007e9e:	4680      	mov	r8, r0
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	f7ff fe4b 	bl	8007b3c <_Bfree>
 8007ea6:	4646      	mov	r6, r8
 8007ea8:	106d      	asrs	r5, r5, #1
 8007eaa:	d00b      	beq.n	8007ec4 <__pow5mult+0xa0>
 8007eac:	6820      	ldr	r0, [r4, #0]
 8007eae:	b938      	cbnz	r0, 8007ec0 <__pow5mult+0x9c>
 8007eb0:	4622      	mov	r2, r4
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	f7ff ff0b 	bl	8007cd0 <__multiply>
 8007eba:	6020      	str	r0, [r4, #0]
 8007ebc:	f8c0 9000 	str.w	r9, [r0]
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	e7e4      	b.n	8007e8e <__pow5mult+0x6a>
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eca:	bf00      	nop
 8007ecc:	0800a280 	.word	0x0800a280
 8007ed0:	0800a1a5 	.word	0x0800a1a5
 8007ed4:	0800a225 	.word	0x0800a225

08007ed8 <__lshift>:
 8007ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007edc:	460c      	mov	r4, r1
 8007ede:	6849      	ldr	r1, [r1, #4]
 8007ee0:	6923      	ldr	r3, [r4, #16]
 8007ee2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ee6:	68a3      	ldr	r3, [r4, #8]
 8007ee8:	4607      	mov	r7, r0
 8007eea:	4691      	mov	r9, r2
 8007eec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ef0:	f108 0601 	add.w	r6, r8, #1
 8007ef4:	42b3      	cmp	r3, r6
 8007ef6:	db0b      	blt.n	8007f10 <__lshift+0x38>
 8007ef8:	4638      	mov	r0, r7
 8007efa:	f7ff fddf 	bl	8007abc <_Balloc>
 8007efe:	4605      	mov	r5, r0
 8007f00:	b948      	cbnz	r0, 8007f16 <__lshift+0x3e>
 8007f02:	4602      	mov	r2, r0
 8007f04:	4b28      	ldr	r3, [pc, #160]	@ (8007fa8 <__lshift+0xd0>)
 8007f06:	4829      	ldr	r0, [pc, #164]	@ (8007fac <__lshift+0xd4>)
 8007f08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007f0c:	f000 fc0c 	bl	8008728 <__assert_func>
 8007f10:	3101      	adds	r1, #1
 8007f12:	005b      	lsls	r3, r3, #1
 8007f14:	e7ee      	b.n	8007ef4 <__lshift+0x1c>
 8007f16:	2300      	movs	r3, #0
 8007f18:	f100 0114 	add.w	r1, r0, #20
 8007f1c:	f100 0210 	add.w	r2, r0, #16
 8007f20:	4618      	mov	r0, r3
 8007f22:	4553      	cmp	r3, sl
 8007f24:	db33      	blt.n	8007f8e <__lshift+0xb6>
 8007f26:	6920      	ldr	r0, [r4, #16]
 8007f28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f2c:	f104 0314 	add.w	r3, r4, #20
 8007f30:	f019 091f 	ands.w	r9, r9, #31
 8007f34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f3c:	d02b      	beq.n	8007f96 <__lshift+0xbe>
 8007f3e:	f1c9 0e20 	rsb	lr, r9, #32
 8007f42:	468a      	mov	sl, r1
 8007f44:	2200      	movs	r2, #0
 8007f46:	6818      	ldr	r0, [r3, #0]
 8007f48:	fa00 f009 	lsl.w	r0, r0, r9
 8007f4c:	4310      	orrs	r0, r2
 8007f4e:	f84a 0b04 	str.w	r0, [sl], #4
 8007f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f56:	459c      	cmp	ip, r3
 8007f58:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f5c:	d8f3      	bhi.n	8007f46 <__lshift+0x6e>
 8007f5e:	ebac 0304 	sub.w	r3, ip, r4
 8007f62:	3b15      	subs	r3, #21
 8007f64:	f023 0303 	bic.w	r3, r3, #3
 8007f68:	3304      	adds	r3, #4
 8007f6a:	f104 0015 	add.w	r0, r4, #21
 8007f6e:	4584      	cmp	ip, r0
 8007f70:	bf38      	it	cc
 8007f72:	2304      	movcc	r3, #4
 8007f74:	50ca      	str	r2, [r1, r3]
 8007f76:	b10a      	cbz	r2, 8007f7c <__lshift+0xa4>
 8007f78:	f108 0602 	add.w	r6, r8, #2
 8007f7c:	3e01      	subs	r6, #1
 8007f7e:	4638      	mov	r0, r7
 8007f80:	612e      	str	r6, [r5, #16]
 8007f82:	4621      	mov	r1, r4
 8007f84:	f7ff fdda 	bl	8007b3c <_Bfree>
 8007f88:	4628      	mov	r0, r5
 8007f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f92:	3301      	adds	r3, #1
 8007f94:	e7c5      	b.n	8007f22 <__lshift+0x4a>
 8007f96:	3904      	subs	r1, #4
 8007f98:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007fa0:	459c      	cmp	ip, r3
 8007fa2:	d8f9      	bhi.n	8007f98 <__lshift+0xc0>
 8007fa4:	e7ea      	b.n	8007f7c <__lshift+0xa4>
 8007fa6:	bf00      	nop
 8007fa8:	0800a214 	.word	0x0800a214
 8007fac:	0800a225 	.word	0x0800a225

08007fb0 <__mcmp>:
 8007fb0:	690a      	ldr	r2, [r1, #16]
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	6900      	ldr	r0, [r0, #16]
 8007fb6:	1a80      	subs	r0, r0, r2
 8007fb8:	b530      	push	{r4, r5, lr}
 8007fba:	d10e      	bne.n	8007fda <__mcmp+0x2a>
 8007fbc:	3314      	adds	r3, #20
 8007fbe:	3114      	adds	r1, #20
 8007fc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007fc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007fc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007fcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007fd0:	4295      	cmp	r5, r2
 8007fd2:	d003      	beq.n	8007fdc <__mcmp+0x2c>
 8007fd4:	d205      	bcs.n	8007fe2 <__mcmp+0x32>
 8007fd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fda:	bd30      	pop	{r4, r5, pc}
 8007fdc:	42a3      	cmp	r3, r4
 8007fde:	d3f3      	bcc.n	8007fc8 <__mcmp+0x18>
 8007fe0:	e7fb      	b.n	8007fda <__mcmp+0x2a>
 8007fe2:	2001      	movs	r0, #1
 8007fe4:	e7f9      	b.n	8007fda <__mcmp+0x2a>
	...

08007fe8 <__mdiff>:
 8007fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fec:	4689      	mov	r9, r1
 8007fee:	4606      	mov	r6, r0
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	4648      	mov	r0, r9
 8007ff4:	4614      	mov	r4, r2
 8007ff6:	f7ff ffdb 	bl	8007fb0 <__mcmp>
 8007ffa:	1e05      	subs	r5, r0, #0
 8007ffc:	d112      	bne.n	8008024 <__mdiff+0x3c>
 8007ffe:	4629      	mov	r1, r5
 8008000:	4630      	mov	r0, r6
 8008002:	f7ff fd5b 	bl	8007abc <_Balloc>
 8008006:	4602      	mov	r2, r0
 8008008:	b928      	cbnz	r0, 8008016 <__mdiff+0x2e>
 800800a:	4b3f      	ldr	r3, [pc, #252]	@ (8008108 <__mdiff+0x120>)
 800800c:	f240 2137 	movw	r1, #567	@ 0x237
 8008010:	483e      	ldr	r0, [pc, #248]	@ (800810c <__mdiff+0x124>)
 8008012:	f000 fb89 	bl	8008728 <__assert_func>
 8008016:	2301      	movs	r3, #1
 8008018:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800801c:	4610      	mov	r0, r2
 800801e:	b003      	add	sp, #12
 8008020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008024:	bfbc      	itt	lt
 8008026:	464b      	movlt	r3, r9
 8008028:	46a1      	movlt	r9, r4
 800802a:	4630      	mov	r0, r6
 800802c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008030:	bfba      	itte	lt
 8008032:	461c      	movlt	r4, r3
 8008034:	2501      	movlt	r5, #1
 8008036:	2500      	movge	r5, #0
 8008038:	f7ff fd40 	bl	8007abc <_Balloc>
 800803c:	4602      	mov	r2, r0
 800803e:	b918      	cbnz	r0, 8008048 <__mdiff+0x60>
 8008040:	4b31      	ldr	r3, [pc, #196]	@ (8008108 <__mdiff+0x120>)
 8008042:	f240 2145 	movw	r1, #581	@ 0x245
 8008046:	e7e3      	b.n	8008010 <__mdiff+0x28>
 8008048:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800804c:	6926      	ldr	r6, [r4, #16]
 800804e:	60c5      	str	r5, [r0, #12]
 8008050:	f109 0310 	add.w	r3, r9, #16
 8008054:	f109 0514 	add.w	r5, r9, #20
 8008058:	f104 0e14 	add.w	lr, r4, #20
 800805c:	f100 0b14 	add.w	fp, r0, #20
 8008060:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008064:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	46d9      	mov	r9, fp
 800806c:	f04f 0c00 	mov.w	ip, #0
 8008070:	9b01      	ldr	r3, [sp, #4]
 8008072:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008076:	f853 af04 	ldr.w	sl, [r3, #4]!
 800807a:	9301      	str	r3, [sp, #4]
 800807c:	fa1f f38a 	uxth.w	r3, sl
 8008080:	4619      	mov	r1, r3
 8008082:	b283      	uxth	r3, r0
 8008084:	1acb      	subs	r3, r1, r3
 8008086:	0c00      	lsrs	r0, r0, #16
 8008088:	4463      	add	r3, ip
 800808a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800808e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008092:	b29b      	uxth	r3, r3
 8008094:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008098:	4576      	cmp	r6, lr
 800809a:	f849 3b04 	str.w	r3, [r9], #4
 800809e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80080a2:	d8e5      	bhi.n	8008070 <__mdiff+0x88>
 80080a4:	1b33      	subs	r3, r6, r4
 80080a6:	3b15      	subs	r3, #21
 80080a8:	f023 0303 	bic.w	r3, r3, #3
 80080ac:	3415      	adds	r4, #21
 80080ae:	3304      	adds	r3, #4
 80080b0:	42a6      	cmp	r6, r4
 80080b2:	bf38      	it	cc
 80080b4:	2304      	movcc	r3, #4
 80080b6:	441d      	add	r5, r3
 80080b8:	445b      	add	r3, fp
 80080ba:	461e      	mov	r6, r3
 80080bc:	462c      	mov	r4, r5
 80080be:	4544      	cmp	r4, r8
 80080c0:	d30e      	bcc.n	80080e0 <__mdiff+0xf8>
 80080c2:	f108 0103 	add.w	r1, r8, #3
 80080c6:	1b49      	subs	r1, r1, r5
 80080c8:	f021 0103 	bic.w	r1, r1, #3
 80080cc:	3d03      	subs	r5, #3
 80080ce:	45a8      	cmp	r8, r5
 80080d0:	bf38      	it	cc
 80080d2:	2100      	movcc	r1, #0
 80080d4:	440b      	add	r3, r1
 80080d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080da:	b191      	cbz	r1, 8008102 <__mdiff+0x11a>
 80080dc:	6117      	str	r7, [r2, #16]
 80080de:	e79d      	b.n	800801c <__mdiff+0x34>
 80080e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80080e4:	46e6      	mov	lr, ip
 80080e6:	0c08      	lsrs	r0, r1, #16
 80080e8:	fa1c fc81 	uxtah	ip, ip, r1
 80080ec:	4471      	add	r1, lr
 80080ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80080f2:	b289      	uxth	r1, r1
 80080f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80080f8:	f846 1b04 	str.w	r1, [r6], #4
 80080fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008100:	e7dd      	b.n	80080be <__mdiff+0xd6>
 8008102:	3f01      	subs	r7, #1
 8008104:	e7e7      	b.n	80080d6 <__mdiff+0xee>
 8008106:	bf00      	nop
 8008108:	0800a214 	.word	0x0800a214
 800810c:	0800a225 	.word	0x0800a225

08008110 <__d2b>:
 8008110:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008114:	460f      	mov	r7, r1
 8008116:	2101      	movs	r1, #1
 8008118:	ec59 8b10 	vmov	r8, r9, d0
 800811c:	4616      	mov	r6, r2
 800811e:	f7ff fccd 	bl	8007abc <_Balloc>
 8008122:	4604      	mov	r4, r0
 8008124:	b930      	cbnz	r0, 8008134 <__d2b+0x24>
 8008126:	4602      	mov	r2, r0
 8008128:	4b23      	ldr	r3, [pc, #140]	@ (80081b8 <__d2b+0xa8>)
 800812a:	4824      	ldr	r0, [pc, #144]	@ (80081bc <__d2b+0xac>)
 800812c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008130:	f000 fafa 	bl	8008728 <__assert_func>
 8008134:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008138:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800813c:	b10d      	cbz	r5, 8008142 <__d2b+0x32>
 800813e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	f1b8 0300 	subs.w	r3, r8, #0
 8008148:	d023      	beq.n	8008192 <__d2b+0x82>
 800814a:	4668      	mov	r0, sp
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	f7ff fd7c 	bl	8007c4a <__lo0bits>
 8008152:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008156:	b1d0      	cbz	r0, 800818e <__d2b+0x7e>
 8008158:	f1c0 0320 	rsb	r3, r0, #32
 800815c:	fa02 f303 	lsl.w	r3, r2, r3
 8008160:	430b      	orrs	r3, r1
 8008162:	40c2      	lsrs	r2, r0
 8008164:	6163      	str	r3, [r4, #20]
 8008166:	9201      	str	r2, [sp, #4]
 8008168:	9b01      	ldr	r3, [sp, #4]
 800816a:	61a3      	str	r3, [r4, #24]
 800816c:	2b00      	cmp	r3, #0
 800816e:	bf0c      	ite	eq
 8008170:	2201      	moveq	r2, #1
 8008172:	2202      	movne	r2, #2
 8008174:	6122      	str	r2, [r4, #16]
 8008176:	b1a5      	cbz	r5, 80081a2 <__d2b+0x92>
 8008178:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800817c:	4405      	add	r5, r0
 800817e:	603d      	str	r5, [r7, #0]
 8008180:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008184:	6030      	str	r0, [r6, #0]
 8008186:	4620      	mov	r0, r4
 8008188:	b003      	add	sp, #12
 800818a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800818e:	6161      	str	r1, [r4, #20]
 8008190:	e7ea      	b.n	8008168 <__d2b+0x58>
 8008192:	a801      	add	r0, sp, #4
 8008194:	f7ff fd59 	bl	8007c4a <__lo0bits>
 8008198:	9b01      	ldr	r3, [sp, #4]
 800819a:	6163      	str	r3, [r4, #20]
 800819c:	3020      	adds	r0, #32
 800819e:	2201      	movs	r2, #1
 80081a0:	e7e8      	b.n	8008174 <__d2b+0x64>
 80081a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80081a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80081aa:	6038      	str	r0, [r7, #0]
 80081ac:	6918      	ldr	r0, [r3, #16]
 80081ae:	f7ff fd2d 	bl	8007c0c <__hi0bits>
 80081b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80081b6:	e7e5      	b.n	8008184 <__d2b+0x74>
 80081b8:	0800a214 	.word	0x0800a214
 80081bc:	0800a225 	.word	0x0800a225

080081c0 <__sfputc_r>:
 80081c0:	6893      	ldr	r3, [r2, #8]
 80081c2:	3b01      	subs	r3, #1
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	b410      	push	{r4}
 80081c8:	6093      	str	r3, [r2, #8]
 80081ca:	da08      	bge.n	80081de <__sfputc_r+0x1e>
 80081cc:	6994      	ldr	r4, [r2, #24]
 80081ce:	42a3      	cmp	r3, r4
 80081d0:	db01      	blt.n	80081d6 <__sfputc_r+0x16>
 80081d2:	290a      	cmp	r1, #10
 80081d4:	d103      	bne.n	80081de <__sfputc_r+0x1e>
 80081d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081da:	f7fe bca4 	b.w	8006b26 <__swbuf_r>
 80081de:	6813      	ldr	r3, [r2, #0]
 80081e0:	1c58      	adds	r0, r3, #1
 80081e2:	6010      	str	r0, [r2, #0]
 80081e4:	7019      	strb	r1, [r3, #0]
 80081e6:	4608      	mov	r0, r1
 80081e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <__sfputs_r>:
 80081ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f0:	4606      	mov	r6, r0
 80081f2:	460f      	mov	r7, r1
 80081f4:	4614      	mov	r4, r2
 80081f6:	18d5      	adds	r5, r2, r3
 80081f8:	42ac      	cmp	r4, r5
 80081fa:	d101      	bne.n	8008200 <__sfputs_r+0x12>
 80081fc:	2000      	movs	r0, #0
 80081fe:	e007      	b.n	8008210 <__sfputs_r+0x22>
 8008200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008204:	463a      	mov	r2, r7
 8008206:	4630      	mov	r0, r6
 8008208:	f7ff ffda 	bl	80081c0 <__sfputc_r>
 800820c:	1c43      	adds	r3, r0, #1
 800820e:	d1f3      	bne.n	80081f8 <__sfputs_r+0xa>
 8008210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008214 <_vfiprintf_r>:
 8008214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008218:	460d      	mov	r5, r1
 800821a:	b09d      	sub	sp, #116	@ 0x74
 800821c:	4614      	mov	r4, r2
 800821e:	4698      	mov	r8, r3
 8008220:	4606      	mov	r6, r0
 8008222:	b118      	cbz	r0, 800822c <_vfiprintf_r+0x18>
 8008224:	6a03      	ldr	r3, [r0, #32]
 8008226:	b90b      	cbnz	r3, 800822c <_vfiprintf_r+0x18>
 8008228:	f7fe fb8c 	bl	8006944 <__sinit>
 800822c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800822e:	07d9      	lsls	r1, r3, #31
 8008230:	d405      	bmi.n	800823e <_vfiprintf_r+0x2a>
 8008232:	89ab      	ldrh	r3, [r5, #12]
 8008234:	059a      	lsls	r2, r3, #22
 8008236:	d402      	bmi.n	800823e <_vfiprintf_r+0x2a>
 8008238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800823a:	f7fe fda6 	bl	8006d8a <__retarget_lock_acquire_recursive>
 800823e:	89ab      	ldrh	r3, [r5, #12]
 8008240:	071b      	lsls	r3, r3, #28
 8008242:	d501      	bpl.n	8008248 <_vfiprintf_r+0x34>
 8008244:	692b      	ldr	r3, [r5, #16]
 8008246:	b99b      	cbnz	r3, 8008270 <_vfiprintf_r+0x5c>
 8008248:	4629      	mov	r1, r5
 800824a:	4630      	mov	r0, r6
 800824c:	f7fe fcaa 	bl	8006ba4 <__swsetup_r>
 8008250:	b170      	cbz	r0, 8008270 <_vfiprintf_r+0x5c>
 8008252:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008254:	07dc      	lsls	r4, r3, #31
 8008256:	d504      	bpl.n	8008262 <_vfiprintf_r+0x4e>
 8008258:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800825c:	b01d      	add	sp, #116	@ 0x74
 800825e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008262:	89ab      	ldrh	r3, [r5, #12]
 8008264:	0598      	lsls	r0, r3, #22
 8008266:	d4f7      	bmi.n	8008258 <_vfiprintf_r+0x44>
 8008268:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800826a:	f7fe fd8f 	bl	8006d8c <__retarget_lock_release_recursive>
 800826e:	e7f3      	b.n	8008258 <_vfiprintf_r+0x44>
 8008270:	2300      	movs	r3, #0
 8008272:	9309      	str	r3, [sp, #36]	@ 0x24
 8008274:	2320      	movs	r3, #32
 8008276:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800827a:	f8cd 800c 	str.w	r8, [sp, #12]
 800827e:	2330      	movs	r3, #48	@ 0x30
 8008280:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008430 <_vfiprintf_r+0x21c>
 8008284:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008288:	f04f 0901 	mov.w	r9, #1
 800828c:	4623      	mov	r3, r4
 800828e:	469a      	mov	sl, r3
 8008290:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008294:	b10a      	cbz	r2, 800829a <_vfiprintf_r+0x86>
 8008296:	2a25      	cmp	r2, #37	@ 0x25
 8008298:	d1f9      	bne.n	800828e <_vfiprintf_r+0x7a>
 800829a:	ebba 0b04 	subs.w	fp, sl, r4
 800829e:	d00b      	beq.n	80082b8 <_vfiprintf_r+0xa4>
 80082a0:	465b      	mov	r3, fp
 80082a2:	4622      	mov	r2, r4
 80082a4:	4629      	mov	r1, r5
 80082a6:	4630      	mov	r0, r6
 80082a8:	f7ff ffa1 	bl	80081ee <__sfputs_r>
 80082ac:	3001      	adds	r0, #1
 80082ae:	f000 80a7 	beq.w	8008400 <_vfiprintf_r+0x1ec>
 80082b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082b4:	445a      	add	r2, fp
 80082b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80082b8:	f89a 3000 	ldrb.w	r3, [sl]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 809f 	beq.w	8008400 <_vfiprintf_r+0x1ec>
 80082c2:	2300      	movs	r3, #0
 80082c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80082c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082cc:	f10a 0a01 	add.w	sl, sl, #1
 80082d0:	9304      	str	r3, [sp, #16]
 80082d2:	9307      	str	r3, [sp, #28]
 80082d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80082da:	4654      	mov	r4, sl
 80082dc:	2205      	movs	r2, #5
 80082de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082e2:	4853      	ldr	r0, [pc, #332]	@ (8008430 <_vfiprintf_r+0x21c>)
 80082e4:	f7f7 ff94 	bl	8000210 <memchr>
 80082e8:	9a04      	ldr	r2, [sp, #16]
 80082ea:	b9d8      	cbnz	r0, 8008324 <_vfiprintf_r+0x110>
 80082ec:	06d1      	lsls	r1, r2, #27
 80082ee:	bf44      	itt	mi
 80082f0:	2320      	movmi	r3, #32
 80082f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082f6:	0713      	lsls	r3, r2, #28
 80082f8:	bf44      	itt	mi
 80082fa:	232b      	movmi	r3, #43	@ 0x2b
 80082fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008300:	f89a 3000 	ldrb.w	r3, [sl]
 8008304:	2b2a      	cmp	r3, #42	@ 0x2a
 8008306:	d015      	beq.n	8008334 <_vfiprintf_r+0x120>
 8008308:	9a07      	ldr	r2, [sp, #28]
 800830a:	4654      	mov	r4, sl
 800830c:	2000      	movs	r0, #0
 800830e:	f04f 0c0a 	mov.w	ip, #10
 8008312:	4621      	mov	r1, r4
 8008314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008318:	3b30      	subs	r3, #48	@ 0x30
 800831a:	2b09      	cmp	r3, #9
 800831c:	d94b      	bls.n	80083b6 <_vfiprintf_r+0x1a2>
 800831e:	b1b0      	cbz	r0, 800834e <_vfiprintf_r+0x13a>
 8008320:	9207      	str	r2, [sp, #28]
 8008322:	e014      	b.n	800834e <_vfiprintf_r+0x13a>
 8008324:	eba0 0308 	sub.w	r3, r0, r8
 8008328:	fa09 f303 	lsl.w	r3, r9, r3
 800832c:	4313      	orrs	r3, r2
 800832e:	9304      	str	r3, [sp, #16]
 8008330:	46a2      	mov	sl, r4
 8008332:	e7d2      	b.n	80082da <_vfiprintf_r+0xc6>
 8008334:	9b03      	ldr	r3, [sp, #12]
 8008336:	1d19      	adds	r1, r3, #4
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	9103      	str	r1, [sp, #12]
 800833c:	2b00      	cmp	r3, #0
 800833e:	bfbb      	ittet	lt
 8008340:	425b      	neglt	r3, r3
 8008342:	f042 0202 	orrlt.w	r2, r2, #2
 8008346:	9307      	strge	r3, [sp, #28]
 8008348:	9307      	strlt	r3, [sp, #28]
 800834a:	bfb8      	it	lt
 800834c:	9204      	strlt	r2, [sp, #16]
 800834e:	7823      	ldrb	r3, [r4, #0]
 8008350:	2b2e      	cmp	r3, #46	@ 0x2e
 8008352:	d10a      	bne.n	800836a <_vfiprintf_r+0x156>
 8008354:	7863      	ldrb	r3, [r4, #1]
 8008356:	2b2a      	cmp	r3, #42	@ 0x2a
 8008358:	d132      	bne.n	80083c0 <_vfiprintf_r+0x1ac>
 800835a:	9b03      	ldr	r3, [sp, #12]
 800835c:	1d1a      	adds	r2, r3, #4
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	9203      	str	r2, [sp, #12]
 8008362:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008366:	3402      	adds	r4, #2
 8008368:	9305      	str	r3, [sp, #20]
 800836a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008440 <_vfiprintf_r+0x22c>
 800836e:	7821      	ldrb	r1, [r4, #0]
 8008370:	2203      	movs	r2, #3
 8008372:	4650      	mov	r0, sl
 8008374:	f7f7 ff4c 	bl	8000210 <memchr>
 8008378:	b138      	cbz	r0, 800838a <_vfiprintf_r+0x176>
 800837a:	9b04      	ldr	r3, [sp, #16]
 800837c:	eba0 000a 	sub.w	r0, r0, sl
 8008380:	2240      	movs	r2, #64	@ 0x40
 8008382:	4082      	lsls	r2, r0
 8008384:	4313      	orrs	r3, r2
 8008386:	3401      	adds	r4, #1
 8008388:	9304      	str	r3, [sp, #16]
 800838a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800838e:	4829      	ldr	r0, [pc, #164]	@ (8008434 <_vfiprintf_r+0x220>)
 8008390:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008394:	2206      	movs	r2, #6
 8008396:	f7f7 ff3b 	bl	8000210 <memchr>
 800839a:	2800      	cmp	r0, #0
 800839c:	d03f      	beq.n	800841e <_vfiprintf_r+0x20a>
 800839e:	4b26      	ldr	r3, [pc, #152]	@ (8008438 <_vfiprintf_r+0x224>)
 80083a0:	bb1b      	cbnz	r3, 80083ea <_vfiprintf_r+0x1d6>
 80083a2:	9b03      	ldr	r3, [sp, #12]
 80083a4:	3307      	adds	r3, #7
 80083a6:	f023 0307 	bic.w	r3, r3, #7
 80083aa:	3308      	adds	r3, #8
 80083ac:	9303      	str	r3, [sp, #12]
 80083ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b0:	443b      	add	r3, r7
 80083b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80083b4:	e76a      	b.n	800828c <_vfiprintf_r+0x78>
 80083b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80083ba:	460c      	mov	r4, r1
 80083bc:	2001      	movs	r0, #1
 80083be:	e7a8      	b.n	8008312 <_vfiprintf_r+0xfe>
 80083c0:	2300      	movs	r3, #0
 80083c2:	3401      	adds	r4, #1
 80083c4:	9305      	str	r3, [sp, #20]
 80083c6:	4619      	mov	r1, r3
 80083c8:	f04f 0c0a 	mov.w	ip, #10
 80083cc:	4620      	mov	r0, r4
 80083ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083d2:	3a30      	subs	r2, #48	@ 0x30
 80083d4:	2a09      	cmp	r2, #9
 80083d6:	d903      	bls.n	80083e0 <_vfiprintf_r+0x1cc>
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d0c6      	beq.n	800836a <_vfiprintf_r+0x156>
 80083dc:	9105      	str	r1, [sp, #20]
 80083de:	e7c4      	b.n	800836a <_vfiprintf_r+0x156>
 80083e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80083e4:	4604      	mov	r4, r0
 80083e6:	2301      	movs	r3, #1
 80083e8:	e7f0      	b.n	80083cc <_vfiprintf_r+0x1b8>
 80083ea:	ab03      	add	r3, sp, #12
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	462a      	mov	r2, r5
 80083f0:	4b12      	ldr	r3, [pc, #72]	@ (800843c <_vfiprintf_r+0x228>)
 80083f2:	a904      	add	r1, sp, #16
 80083f4:	4630      	mov	r0, r6
 80083f6:	f7fd fe61 	bl	80060bc <_printf_float>
 80083fa:	4607      	mov	r7, r0
 80083fc:	1c78      	adds	r0, r7, #1
 80083fe:	d1d6      	bne.n	80083ae <_vfiprintf_r+0x19a>
 8008400:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008402:	07d9      	lsls	r1, r3, #31
 8008404:	d405      	bmi.n	8008412 <_vfiprintf_r+0x1fe>
 8008406:	89ab      	ldrh	r3, [r5, #12]
 8008408:	059a      	lsls	r2, r3, #22
 800840a:	d402      	bmi.n	8008412 <_vfiprintf_r+0x1fe>
 800840c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800840e:	f7fe fcbd 	bl	8006d8c <__retarget_lock_release_recursive>
 8008412:	89ab      	ldrh	r3, [r5, #12]
 8008414:	065b      	lsls	r3, r3, #25
 8008416:	f53f af1f 	bmi.w	8008258 <_vfiprintf_r+0x44>
 800841a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800841c:	e71e      	b.n	800825c <_vfiprintf_r+0x48>
 800841e:	ab03      	add	r3, sp, #12
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	462a      	mov	r2, r5
 8008424:	4b05      	ldr	r3, [pc, #20]	@ (800843c <_vfiprintf_r+0x228>)
 8008426:	a904      	add	r1, sp, #16
 8008428:	4630      	mov	r0, r6
 800842a:	f7fe f8df 	bl	80065ec <_printf_i>
 800842e:	e7e4      	b.n	80083fa <_vfiprintf_r+0x1e6>
 8008430:	0800a380 	.word	0x0800a380
 8008434:	0800a38a 	.word	0x0800a38a
 8008438:	080060bd 	.word	0x080060bd
 800843c:	080081ef 	.word	0x080081ef
 8008440:	0800a386 	.word	0x0800a386

08008444 <__sflush_r>:
 8008444:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800844c:	0716      	lsls	r6, r2, #28
 800844e:	4605      	mov	r5, r0
 8008450:	460c      	mov	r4, r1
 8008452:	d454      	bmi.n	80084fe <__sflush_r+0xba>
 8008454:	684b      	ldr	r3, [r1, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	dc02      	bgt.n	8008460 <__sflush_r+0x1c>
 800845a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800845c:	2b00      	cmp	r3, #0
 800845e:	dd48      	ble.n	80084f2 <__sflush_r+0xae>
 8008460:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008462:	2e00      	cmp	r6, #0
 8008464:	d045      	beq.n	80084f2 <__sflush_r+0xae>
 8008466:	2300      	movs	r3, #0
 8008468:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800846c:	682f      	ldr	r7, [r5, #0]
 800846e:	6a21      	ldr	r1, [r4, #32]
 8008470:	602b      	str	r3, [r5, #0]
 8008472:	d030      	beq.n	80084d6 <__sflush_r+0x92>
 8008474:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008476:	89a3      	ldrh	r3, [r4, #12]
 8008478:	0759      	lsls	r1, r3, #29
 800847a:	d505      	bpl.n	8008488 <__sflush_r+0x44>
 800847c:	6863      	ldr	r3, [r4, #4]
 800847e:	1ad2      	subs	r2, r2, r3
 8008480:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008482:	b10b      	cbz	r3, 8008488 <__sflush_r+0x44>
 8008484:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008486:	1ad2      	subs	r2, r2, r3
 8008488:	2300      	movs	r3, #0
 800848a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800848c:	6a21      	ldr	r1, [r4, #32]
 800848e:	4628      	mov	r0, r5
 8008490:	47b0      	blx	r6
 8008492:	1c43      	adds	r3, r0, #1
 8008494:	89a3      	ldrh	r3, [r4, #12]
 8008496:	d106      	bne.n	80084a6 <__sflush_r+0x62>
 8008498:	6829      	ldr	r1, [r5, #0]
 800849a:	291d      	cmp	r1, #29
 800849c:	d82b      	bhi.n	80084f6 <__sflush_r+0xb2>
 800849e:	4a2a      	ldr	r2, [pc, #168]	@ (8008548 <__sflush_r+0x104>)
 80084a0:	410a      	asrs	r2, r1
 80084a2:	07d6      	lsls	r6, r2, #31
 80084a4:	d427      	bmi.n	80084f6 <__sflush_r+0xb2>
 80084a6:	2200      	movs	r2, #0
 80084a8:	6062      	str	r2, [r4, #4]
 80084aa:	04d9      	lsls	r1, r3, #19
 80084ac:	6922      	ldr	r2, [r4, #16]
 80084ae:	6022      	str	r2, [r4, #0]
 80084b0:	d504      	bpl.n	80084bc <__sflush_r+0x78>
 80084b2:	1c42      	adds	r2, r0, #1
 80084b4:	d101      	bne.n	80084ba <__sflush_r+0x76>
 80084b6:	682b      	ldr	r3, [r5, #0]
 80084b8:	b903      	cbnz	r3, 80084bc <__sflush_r+0x78>
 80084ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80084bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084be:	602f      	str	r7, [r5, #0]
 80084c0:	b1b9      	cbz	r1, 80084f2 <__sflush_r+0xae>
 80084c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084c6:	4299      	cmp	r1, r3
 80084c8:	d002      	beq.n	80084d0 <__sflush_r+0x8c>
 80084ca:	4628      	mov	r0, r5
 80084cc:	f7ff faac 	bl	8007a28 <_free_r>
 80084d0:	2300      	movs	r3, #0
 80084d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80084d4:	e00d      	b.n	80084f2 <__sflush_r+0xae>
 80084d6:	2301      	movs	r3, #1
 80084d8:	4628      	mov	r0, r5
 80084da:	47b0      	blx	r6
 80084dc:	4602      	mov	r2, r0
 80084de:	1c50      	adds	r0, r2, #1
 80084e0:	d1c9      	bne.n	8008476 <__sflush_r+0x32>
 80084e2:	682b      	ldr	r3, [r5, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d0c6      	beq.n	8008476 <__sflush_r+0x32>
 80084e8:	2b1d      	cmp	r3, #29
 80084ea:	d001      	beq.n	80084f0 <__sflush_r+0xac>
 80084ec:	2b16      	cmp	r3, #22
 80084ee:	d11e      	bne.n	800852e <__sflush_r+0xea>
 80084f0:	602f      	str	r7, [r5, #0]
 80084f2:	2000      	movs	r0, #0
 80084f4:	e022      	b.n	800853c <__sflush_r+0xf8>
 80084f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084fa:	b21b      	sxth	r3, r3
 80084fc:	e01b      	b.n	8008536 <__sflush_r+0xf2>
 80084fe:	690f      	ldr	r7, [r1, #16]
 8008500:	2f00      	cmp	r7, #0
 8008502:	d0f6      	beq.n	80084f2 <__sflush_r+0xae>
 8008504:	0793      	lsls	r3, r2, #30
 8008506:	680e      	ldr	r6, [r1, #0]
 8008508:	bf08      	it	eq
 800850a:	694b      	ldreq	r3, [r1, #20]
 800850c:	600f      	str	r7, [r1, #0]
 800850e:	bf18      	it	ne
 8008510:	2300      	movne	r3, #0
 8008512:	eba6 0807 	sub.w	r8, r6, r7
 8008516:	608b      	str	r3, [r1, #8]
 8008518:	f1b8 0f00 	cmp.w	r8, #0
 800851c:	dde9      	ble.n	80084f2 <__sflush_r+0xae>
 800851e:	6a21      	ldr	r1, [r4, #32]
 8008520:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008522:	4643      	mov	r3, r8
 8008524:	463a      	mov	r2, r7
 8008526:	4628      	mov	r0, r5
 8008528:	47b0      	blx	r6
 800852a:	2800      	cmp	r0, #0
 800852c:	dc08      	bgt.n	8008540 <__sflush_r+0xfc>
 800852e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008536:	81a3      	strh	r3, [r4, #12]
 8008538:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800853c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008540:	4407      	add	r7, r0
 8008542:	eba8 0800 	sub.w	r8, r8, r0
 8008546:	e7e7      	b.n	8008518 <__sflush_r+0xd4>
 8008548:	dfbffffe 	.word	0xdfbffffe

0800854c <_fflush_r>:
 800854c:	b538      	push	{r3, r4, r5, lr}
 800854e:	690b      	ldr	r3, [r1, #16]
 8008550:	4605      	mov	r5, r0
 8008552:	460c      	mov	r4, r1
 8008554:	b913      	cbnz	r3, 800855c <_fflush_r+0x10>
 8008556:	2500      	movs	r5, #0
 8008558:	4628      	mov	r0, r5
 800855a:	bd38      	pop	{r3, r4, r5, pc}
 800855c:	b118      	cbz	r0, 8008566 <_fflush_r+0x1a>
 800855e:	6a03      	ldr	r3, [r0, #32]
 8008560:	b90b      	cbnz	r3, 8008566 <_fflush_r+0x1a>
 8008562:	f7fe f9ef 	bl	8006944 <__sinit>
 8008566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d0f3      	beq.n	8008556 <_fflush_r+0xa>
 800856e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008570:	07d0      	lsls	r0, r2, #31
 8008572:	d404      	bmi.n	800857e <_fflush_r+0x32>
 8008574:	0599      	lsls	r1, r3, #22
 8008576:	d402      	bmi.n	800857e <_fflush_r+0x32>
 8008578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800857a:	f7fe fc06 	bl	8006d8a <__retarget_lock_acquire_recursive>
 800857e:	4628      	mov	r0, r5
 8008580:	4621      	mov	r1, r4
 8008582:	f7ff ff5f 	bl	8008444 <__sflush_r>
 8008586:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008588:	07da      	lsls	r2, r3, #31
 800858a:	4605      	mov	r5, r0
 800858c:	d4e4      	bmi.n	8008558 <_fflush_r+0xc>
 800858e:	89a3      	ldrh	r3, [r4, #12]
 8008590:	059b      	lsls	r3, r3, #22
 8008592:	d4e1      	bmi.n	8008558 <_fflush_r+0xc>
 8008594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008596:	f7fe fbf9 	bl	8006d8c <__retarget_lock_release_recursive>
 800859a:	e7dd      	b.n	8008558 <_fflush_r+0xc>

0800859c <__swhatbuf_r>:
 800859c:	b570      	push	{r4, r5, r6, lr}
 800859e:	460c      	mov	r4, r1
 80085a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a4:	2900      	cmp	r1, #0
 80085a6:	b096      	sub	sp, #88	@ 0x58
 80085a8:	4615      	mov	r5, r2
 80085aa:	461e      	mov	r6, r3
 80085ac:	da0d      	bge.n	80085ca <__swhatbuf_r+0x2e>
 80085ae:	89a3      	ldrh	r3, [r4, #12]
 80085b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80085b4:	f04f 0100 	mov.w	r1, #0
 80085b8:	bf14      	ite	ne
 80085ba:	2340      	movne	r3, #64	@ 0x40
 80085bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80085c0:	2000      	movs	r0, #0
 80085c2:	6031      	str	r1, [r6, #0]
 80085c4:	602b      	str	r3, [r5, #0]
 80085c6:	b016      	add	sp, #88	@ 0x58
 80085c8:	bd70      	pop	{r4, r5, r6, pc}
 80085ca:	466a      	mov	r2, sp
 80085cc:	f000 f87c 	bl	80086c8 <_fstat_r>
 80085d0:	2800      	cmp	r0, #0
 80085d2:	dbec      	blt.n	80085ae <__swhatbuf_r+0x12>
 80085d4:	9901      	ldr	r1, [sp, #4]
 80085d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80085da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80085de:	4259      	negs	r1, r3
 80085e0:	4159      	adcs	r1, r3
 80085e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085e6:	e7eb      	b.n	80085c0 <__swhatbuf_r+0x24>

080085e8 <__smakebuf_r>:
 80085e8:	898b      	ldrh	r3, [r1, #12]
 80085ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085ec:	079d      	lsls	r5, r3, #30
 80085ee:	4606      	mov	r6, r0
 80085f0:	460c      	mov	r4, r1
 80085f2:	d507      	bpl.n	8008604 <__smakebuf_r+0x1c>
 80085f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80085f8:	6023      	str	r3, [r4, #0]
 80085fa:	6123      	str	r3, [r4, #16]
 80085fc:	2301      	movs	r3, #1
 80085fe:	6163      	str	r3, [r4, #20]
 8008600:	b003      	add	sp, #12
 8008602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008604:	ab01      	add	r3, sp, #4
 8008606:	466a      	mov	r2, sp
 8008608:	f7ff ffc8 	bl	800859c <__swhatbuf_r>
 800860c:	9f00      	ldr	r7, [sp, #0]
 800860e:	4605      	mov	r5, r0
 8008610:	4639      	mov	r1, r7
 8008612:	4630      	mov	r0, r6
 8008614:	f7fd fc26 	bl	8005e64 <_malloc_r>
 8008618:	b948      	cbnz	r0, 800862e <__smakebuf_r+0x46>
 800861a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800861e:	059a      	lsls	r2, r3, #22
 8008620:	d4ee      	bmi.n	8008600 <__smakebuf_r+0x18>
 8008622:	f023 0303 	bic.w	r3, r3, #3
 8008626:	f043 0302 	orr.w	r3, r3, #2
 800862a:	81a3      	strh	r3, [r4, #12]
 800862c:	e7e2      	b.n	80085f4 <__smakebuf_r+0xc>
 800862e:	89a3      	ldrh	r3, [r4, #12]
 8008630:	6020      	str	r0, [r4, #0]
 8008632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008636:	81a3      	strh	r3, [r4, #12]
 8008638:	9b01      	ldr	r3, [sp, #4]
 800863a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800863e:	b15b      	cbz	r3, 8008658 <__smakebuf_r+0x70>
 8008640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008644:	4630      	mov	r0, r6
 8008646:	f000 f851 	bl	80086ec <_isatty_r>
 800864a:	b128      	cbz	r0, 8008658 <__smakebuf_r+0x70>
 800864c:	89a3      	ldrh	r3, [r4, #12]
 800864e:	f023 0303 	bic.w	r3, r3, #3
 8008652:	f043 0301 	orr.w	r3, r3, #1
 8008656:	81a3      	strh	r3, [r4, #12]
 8008658:	89a3      	ldrh	r3, [r4, #12]
 800865a:	431d      	orrs	r5, r3
 800865c:	81a5      	strh	r5, [r4, #12]
 800865e:	e7cf      	b.n	8008600 <__smakebuf_r+0x18>

08008660 <_putc_r>:
 8008660:	b570      	push	{r4, r5, r6, lr}
 8008662:	460d      	mov	r5, r1
 8008664:	4614      	mov	r4, r2
 8008666:	4606      	mov	r6, r0
 8008668:	b118      	cbz	r0, 8008672 <_putc_r+0x12>
 800866a:	6a03      	ldr	r3, [r0, #32]
 800866c:	b90b      	cbnz	r3, 8008672 <_putc_r+0x12>
 800866e:	f7fe f969 	bl	8006944 <__sinit>
 8008672:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008674:	07d8      	lsls	r0, r3, #31
 8008676:	d405      	bmi.n	8008684 <_putc_r+0x24>
 8008678:	89a3      	ldrh	r3, [r4, #12]
 800867a:	0599      	lsls	r1, r3, #22
 800867c:	d402      	bmi.n	8008684 <_putc_r+0x24>
 800867e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008680:	f7fe fb83 	bl	8006d8a <__retarget_lock_acquire_recursive>
 8008684:	68a3      	ldr	r3, [r4, #8]
 8008686:	3b01      	subs	r3, #1
 8008688:	2b00      	cmp	r3, #0
 800868a:	60a3      	str	r3, [r4, #8]
 800868c:	da05      	bge.n	800869a <_putc_r+0x3a>
 800868e:	69a2      	ldr	r2, [r4, #24]
 8008690:	4293      	cmp	r3, r2
 8008692:	db12      	blt.n	80086ba <_putc_r+0x5a>
 8008694:	b2eb      	uxtb	r3, r5
 8008696:	2b0a      	cmp	r3, #10
 8008698:	d00f      	beq.n	80086ba <_putc_r+0x5a>
 800869a:	6823      	ldr	r3, [r4, #0]
 800869c:	1c5a      	adds	r2, r3, #1
 800869e:	6022      	str	r2, [r4, #0]
 80086a0:	701d      	strb	r5, [r3, #0]
 80086a2:	b2ed      	uxtb	r5, r5
 80086a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086a6:	07da      	lsls	r2, r3, #31
 80086a8:	d405      	bmi.n	80086b6 <_putc_r+0x56>
 80086aa:	89a3      	ldrh	r3, [r4, #12]
 80086ac:	059b      	lsls	r3, r3, #22
 80086ae:	d402      	bmi.n	80086b6 <_putc_r+0x56>
 80086b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086b2:	f7fe fb6b 	bl	8006d8c <__retarget_lock_release_recursive>
 80086b6:	4628      	mov	r0, r5
 80086b8:	bd70      	pop	{r4, r5, r6, pc}
 80086ba:	4629      	mov	r1, r5
 80086bc:	4622      	mov	r2, r4
 80086be:	4630      	mov	r0, r6
 80086c0:	f7fe fa31 	bl	8006b26 <__swbuf_r>
 80086c4:	4605      	mov	r5, r0
 80086c6:	e7ed      	b.n	80086a4 <_putc_r+0x44>

080086c8 <_fstat_r>:
 80086c8:	b538      	push	{r3, r4, r5, lr}
 80086ca:	4d07      	ldr	r5, [pc, #28]	@ (80086e8 <_fstat_r+0x20>)
 80086cc:	2300      	movs	r3, #0
 80086ce:	4604      	mov	r4, r0
 80086d0:	4608      	mov	r0, r1
 80086d2:	4611      	mov	r1, r2
 80086d4:	602b      	str	r3, [r5, #0]
 80086d6:	f7fa fd98 	bl	800320a <_fstat>
 80086da:	1c43      	adds	r3, r0, #1
 80086dc:	d102      	bne.n	80086e4 <_fstat_r+0x1c>
 80086de:	682b      	ldr	r3, [r5, #0]
 80086e0:	b103      	cbz	r3, 80086e4 <_fstat_r+0x1c>
 80086e2:	6023      	str	r3, [r4, #0]
 80086e4:	bd38      	pop	{r3, r4, r5, pc}
 80086e6:	bf00      	nop
 80086e8:	20000480 	.word	0x20000480

080086ec <_isatty_r>:
 80086ec:	b538      	push	{r3, r4, r5, lr}
 80086ee:	4d06      	ldr	r5, [pc, #24]	@ (8008708 <_isatty_r+0x1c>)
 80086f0:	2300      	movs	r3, #0
 80086f2:	4604      	mov	r4, r0
 80086f4:	4608      	mov	r0, r1
 80086f6:	602b      	str	r3, [r5, #0]
 80086f8:	f7fa fd97 	bl	800322a <_isatty>
 80086fc:	1c43      	adds	r3, r0, #1
 80086fe:	d102      	bne.n	8008706 <_isatty_r+0x1a>
 8008700:	682b      	ldr	r3, [r5, #0]
 8008702:	b103      	cbz	r3, 8008706 <_isatty_r+0x1a>
 8008704:	6023      	str	r3, [r4, #0]
 8008706:	bd38      	pop	{r3, r4, r5, pc}
 8008708:	20000480 	.word	0x20000480

0800870c <memcpy>:
 800870c:	440a      	add	r2, r1
 800870e:	4291      	cmp	r1, r2
 8008710:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008714:	d100      	bne.n	8008718 <memcpy+0xc>
 8008716:	4770      	bx	lr
 8008718:	b510      	push	{r4, lr}
 800871a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800871e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008722:	4291      	cmp	r1, r2
 8008724:	d1f9      	bne.n	800871a <memcpy+0xe>
 8008726:	bd10      	pop	{r4, pc}

08008728 <__assert_func>:
 8008728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800872a:	4614      	mov	r4, r2
 800872c:	461a      	mov	r2, r3
 800872e:	4b09      	ldr	r3, [pc, #36]	@ (8008754 <__assert_func+0x2c>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4605      	mov	r5, r0
 8008734:	68d8      	ldr	r0, [r3, #12]
 8008736:	b954      	cbnz	r4, 800874e <__assert_func+0x26>
 8008738:	4b07      	ldr	r3, [pc, #28]	@ (8008758 <__assert_func+0x30>)
 800873a:	461c      	mov	r4, r3
 800873c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008740:	9100      	str	r1, [sp, #0]
 8008742:	462b      	mov	r3, r5
 8008744:	4905      	ldr	r1, [pc, #20]	@ (800875c <__assert_func+0x34>)
 8008746:	f000 f841 	bl	80087cc <fiprintf>
 800874a:	f000 f851 	bl	80087f0 <abort>
 800874e:	4b04      	ldr	r3, [pc, #16]	@ (8008760 <__assert_func+0x38>)
 8008750:	e7f4      	b.n	800873c <__assert_func+0x14>
 8008752:	bf00      	nop
 8008754:	20000018 	.word	0x20000018
 8008758:	0800a3d6 	.word	0x0800a3d6
 800875c:	0800a3a8 	.word	0x0800a3a8
 8008760:	0800a39b 	.word	0x0800a39b

08008764 <_calloc_r>:
 8008764:	b570      	push	{r4, r5, r6, lr}
 8008766:	fba1 5402 	umull	r5, r4, r1, r2
 800876a:	b93c      	cbnz	r4, 800877c <_calloc_r+0x18>
 800876c:	4629      	mov	r1, r5
 800876e:	f7fd fb79 	bl	8005e64 <_malloc_r>
 8008772:	4606      	mov	r6, r0
 8008774:	b928      	cbnz	r0, 8008782 <_calloc_r+0x1e>
 8008776:	2600      	movs	r6, #0
 8008778:	4630      	mov	r0, r6
 800877a:	bd70      	pop	{r4, r5, r6, pc}
 800877c:	220c      	movs	r2, #12
 800877e:	6002      	str	r2, [r0, #0]
 8008780:	e7f9      	b.n	8008776 <_calloc_r+0x12>
 8008782:	462a      	mov	r2, r5
 8008784:	4621      	mov	r1, r4
 8008786:	f7fe fa73 	bl	8006c70 <memset>
 800878a:	e7f5      	b.n	8008778 <_calloc_r+0x14>

0800878c <__ascii_mbtowc>:
 800878c:	b082      	sub	sp, #8
 800878e:	b901      	cbnz	r1, 8008792 <__ascii_mbtowc+0x6>
 8008790:	a901      	add	r1, sp, #4
 8008792:	b142      	cbz	r2, 80087a6 <__ascii_mbtowc+0x1a>
 8008794:	b14b      	cbz	r3, 80087aa <__ascii_mbtowc+0x1e>
 8008796:	7813      	ldrb	r3, [r2, #0]
 8008798:	600b      	str	r3, [r1, #0]
 800879a:	7812      	ldrb	r2, [r2, #0]
 800879c:	1e10      	subs	r0, r2, #0
 800879e:	bf18      	it	ne
 80087a0:	2001      	movne	r0, #1
 80087a2:	b002      	add	sp, #8
 80087a4:	4770      	bx	lr
 80087a6:	4610      	mov	r0, r2
 80087a8:	e7fb      	b.n	80087a2 <__ascii_mbtowc+0x16>
 80087aa:	f06f 0001 	mvn.w	r0, #1
 80087ae:	e7f8      	b.n	80087a2 <__ascii_mbtowc+0x16>

080087b0 <__ascii_wctomb>:
 80087b0:	4603      	mov	r3, r0
 80087b2:	4608      	mov	r0, r1
 80087b4:	b141      	cbz	r1, 80087c8 <__ascii_wctomb+0x18>
 80087b6:	2aff      	cmp	r2, #255	@ 0xff
 80087b8:	d904      	bls.n	80087c4 <__ascii_wctomb+0x14>
 80087ba:	228a      	movs	r2, #138	@ 0x8a
 80087bc:	601a      	str	r2, [r3, #0]
 80087be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087c2:	4770      	bx	lr
 80087c4:	700a      	strb	r2, [r1, #0]
 80087c6:	2001      	movs	r0, #1
 80087c8:	4770      	bx	lr
	...

080087cc <fiprintf>:
 80087cc:	b40e      	push	{r1, r2, r3}
 80087ce:	b503      	push	{r0, r1, lr}
 80087d0:	4601      	mov	r1, r0
 80087d2:	ab03      	add	r3, sp, #12
 80087d4:	4805      	ldr	r0, [pc, #20]	@ (80087ec <fiprintf+0x20>)
 80087d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80087da:	6800      	ldr	r0, [r0, #0]
 80087dc:	9301      	str	r3, [sp, #4]
 80087de:	f7ff fd19 	bl	8008214 <_vfiprintf_r>
 80087e2:	b002      	add	sp, #8
 80087e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80087e8:	b003      	add	sp, #12
 80087ea:	4770      	bx	lr
 80087ec:	20000018 	.word	0x20000018

080087f0 <abort>:
 80087f0:	b508      	push	{r3, lr}
 80087f2:	2006      	movs	r0, #6
 80087f4:	f000 f82c 	bl	8008850 <raise>
 80087f8:	2001      	movs	r0, #1
 80087fa:	f7fa fcd2 	bl	80031a2 <_exit>

080087fe <_raise_r>:
 80087fe:	291f      	cmp	r1, #31
 8008800:	b538      	push	{r3, r4, r5, lr}
 8008802:	4605      	mov	r5, r0
 8008804:	460c      	mov	r4, r1
 8008806:	d904      	bls.n	8008812 <_raise_r+0x14>
 8008808:	2316      	movs	r3, #22
 800880a:	6003      	str	r3, [r0, #0]
 800880c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008810:	bd38      	pop	{r3, r4, r5, pc}
 8008812:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008814:	b112      	cbz	r2, 800881c <_raise_r+0x1e>
 8008816:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800881a:	b94b      	cbnz	r3, 8008830 <_raise_r+0x32>
 800881c:	4628      	mov	r0, r5
 800881e:	f000 f831 	bl	8008884 <_getpid_r>
 8008822:	4622      	mov	r2, r4
 8008824:	4601      	mov	r1, r0
 8008826:	4628      	mov	r0, r5
 8008828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800882c:	f000 b818 	b.w	8008860 <_kill_r>
 8008830:	2b01      	cmp	r3, #1
 8008832:	d00a      	beq.n	800884a <_raise_r+0x4c>
 8008834:	1c59      	adds	r1, r3, #1
 8008836:	d103      	bne.n	8008840 <_raise_r+0x42>
 8008838:	2316      	movs	r3, #22
 800883a:	6003      	str	r3, [r0, #0]
 800883c:	2001      	movs	r0, #1
 800883e:	e7e7      	b.n	8008810 <_raise_r+0x12>
 8008840:	2100      	movs	r1, #0
 8008842:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008846:	4620      	mov	r0, r4
 8008848:	4798      	blx	r3
 800884a:	2000      	movs	r0, #0
 800884c:	e7e0      	b.n	8008810 <_raise_r+0x12>
	...

08008850 <raise>:
 8008850:	4b02      	ldr	r3, [pc, #8]	@ (800885c <raise+0xc>)
 8008852:	4601      	mov	r1, r0
 8008854:	6818      	ldr	r0, [r3, #0]
 8008856:	f7ff bfd2 	b.w	80087fe <_raise_r>
 800885a:	bf00      	nop
 800885c:	20000018 	.word	0x20000018

08008860 <_kill_r>:
 8008860:	b538      	push	{r3, r4, r5, lr}
 8008862:	4d07      	ldr	r5, [pc, #28]	@ (8008880 <_kill_r+0x20>)
 8008864:	2300      	movs	r3, #0
 8008866:	4604      	mov	r4, r0
 8008868:	4608      	mov	r0, r1
 800886a:	4611      	mov	r1, r2
 800886c:	602b      	str	r3, [r5, #0]
 800886e:	f7fa fc88 	bl	8003182 <_kill>
 8008872:	1c43      	adds	r3, r0, #1
 8008874:	d102      	bne.n	800887c <_kill_r+0x1c>
 8008876:	682b      	ldr	r3, [r5, #0]
 8008878:	b103      	cbz	r3, 800887c <_kill_r+0x1c>
 800887a:	6023      	str	r3, [r4, #0]
 800887c:	bd38      	pop	{r3, r4, r5, pc}
 800887e:	bf00      	nop
 8008880:	20000480 	.word	0x20000480

08008884 <_getpid_r>:
 8008884:	f7fa bc75 	b.w	8003172 <_getpid>

08008888 <asin>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	ed2d 8b02 	vpush	{d8}
 800888e:	ec55 4b10 	vmov	r4, r5, d0
 8008892:	f000 f91d 	bl	8008ad0 <__ieee754_asin>
 8008896:	4622      	mov	r2, r4
 8008898:	462b      	mov	r3, r5
 800889a:	4620      	mov	r0, r4
 800889c:	4629      	mov	r1, r5
 800889e:	eeb0 8a40 	vmov.f32	s16, s0
 80088a2:	eef0 8a60 	vmov.f32	s17, s1
 80088a6:	f7f8 f961 	bl	8000b6c <__aeabi_dcmpun>
 80088aa:	b9a8      	cbnz	r0, 80088d8 <asin+0x50>
 80088ac:	ec45 4b10 	vmov	d0, r4, r5
 80088b0:	f000 f820 	bl	80088f4 <fabs>
 80088b4:	4b0c      	ldr	r3, [pc, #48]	@ (80088e8 <asin+0x60>)
 80088b6:	ec51 0b10 	vmov	r0, r1, d0
 80088ba:	2200      	movs	r2, #0
 80088bc:	f7f8 f94c 	bl	8000b58 <__aeabi_dcmpgt>
 80088c0:	b150      	cbz	r0, 80088d8 <asin+0x50>
 80088c2:	f7fe fa37 	bl	8006d34 <__errno>
 80088c6:	ecbd 8b02 	vpop	{d8}
 80088ca:	2321      	movs	r3, #33	@ 0x21
 80088cc:	6003      	str	r3, [r0, #0]
 80088ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088d2:	4806      	ldr	r0, [pc, #24]	@ (80088ec <asin+0x64>)
 80088d4:	f000 b818 	b.w	8008908 <nan>
 80088d8:	eeb0 0a48 	vmov.f32	s0, s16
 80088dc:	eef0 0a68 	vmov.f32	s1, s17
 80088e0:	ecbd 8b02 	vpop	{d8}
 80088e4:	bd38      	pop	{r3, r4, r5, pc}
 80088e6:	bf00      	nop
 80088e8:	3ff00000 	.word	0x3ff00000
 80088ec:	0800a3d6 	.word	0x0800a3d6

080088f0 <atan2>:
 80088f0:	f000 baf2 	b.w	8008ed8 <__ieee754_atan2>

080088f4 <fabs>:
 80088f4:	ec51 0b10 	vmov	r0, r1, d0
 80088f8:	4602      	mov	r2, r0
 80088fa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80088fe:	ec43 2b10 	vmov	d0, r2, r3
 8008902:	4770      	bx	lr
 8008904:	0000      	movs	r0, r0
	...

08008908 <nan>:
 8008908:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008910 <nan+0x8>
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	00000000 	.word	0x00000000
 8008914:	7ff80000 	.word	0x7ff80000

08008918 <__ieee754_sqrt>:
 8008918:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800891c:	4a68      	ldr	r2, [pc, #416]	@ (8008ac0 <__ieee754_sqrt+0x1a8>)
 800891e:	ec55 4b10 	vmov	r4, r5, d0
 8008922:	43aa      	bics	r2, r5
 8008924:	462b      	mov	r3, r5
 8008926:	4621      	mov	r1, r4
 8008928:	d110      	bne.n	800894c <__ieee754_sqrt+0x34>
 800892a:	4622      	mov	r2, r4
 800892c:	4620      	mov	r0, r4
 800892e:	4629      	mov	r1, r5
 8008930:	f7f7 fe82 	bl	8000638 <__aeabi_dmul>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	4620      	mov	r0, r4
 800893a:	4629      	mov	r1, r5
 800893c:	f7f7 fcc6 	bl	80002cc <__adddf3>
 8008940:	4604      	mov	r4, r0
 8008942:	460d      	mov	r5, r1
 8008944:	ec45 4b10 	vmov	d0, r4, r5
 8008948:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800894c:	2d00      	cmp	r5, #0
 800894e:	dc0e      	bgt.n	800896e <__ieee754_sqrt+0x56>
 8008950:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008954:	4322      	orrs	r2, r4
 8008956:	d0f5      	beq.n	8008944 <__ieee754_sqrt+0x2c>
 8008958:	b19d      	cbz	r5, 8008982 <__ieee754_sqrt+0x6a>
 800895a:	4622      	mov	r2, r4
 800895c:	4620      	mov	r0, r4
 800895e:	4629      	mov	r1, r5
 8008960:	f7f7 fcb2 	bl	80002c8 <__aeabi_dsub>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	f7f7 ff90 	bl	800088c <__aeabi_ddiv>
 800896c:	e7e8      	b.n	8008940 <__ieee754_sqrt+0x28>
 800896e:	152a      	asrs	r2, r5, #20
 8008970:	d115      	bne.n	800899e <__ieee754_sqrt+0x86>
 8008972:	2000      	movs	r0, #0
 8008974:	e009      	b.n	800898a <__ieee754_sqrt+0x72>
 8008976:	0acb      	lsrs	r3, r1, #11
 8008978:	3a15      	subs	r2, #21
 800897a:	0549      	lsls	r1, r1, #21
 800897c:	2b00      	cmp	r3, #0
 800897e:	d0fa      	beq.n	8008976 <__ieee754_sqrt+0x5e>
 8008980:	e7f7      	b.n	8008972 <__ieee754_sqrt+0x5a>
 8008982:	462a      	mov	r2, r5
 8008984:	e7fa      	b.n	800897c <__ieee754_sqrt+0x64>
 8008986:	005b      	lsls	r3, r3, #1
 8008988:	3001      	adds	r0, #1
 800898a:	02dc      	lsls	r4, r3, #11
 800898c:	d5fb      	bpl.n	8008986 <__ieee754_sqrt+0x6e>
 800898e:	1e44      	subs	r4, r0, #1
 8008990:	1b12      	subs	r2, r2, r4
 8008992:	f1c0 0420 	rsb	r4, r0, #32
 8008996:	fa21 f404 	lsr.w	r4, r1, r4
 800899a:	4323      	orrs	r3, r4
 800899c:	4081      	lsls	r1, r0
 800899e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089a2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80089a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089aa:	07d2      	lsls	r2, r2, #31
 80089ac:	bf5c      	itt	pl
 80089ae:	005b      	lslpl	r3, r3, #1
 80089b0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80089b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80089b8:	bf58      	it	pl
 80089ba:	0049      	lslpl	r1, r1, #1
 80089bc:	2600      	movs	r6, #0
 80089be:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80089c2:	106d      	asrs	r5, r5, #1
 80089c4:	0049      	lsls	r1, r1, #1
 80089c6:	2016      	movs	r0, #22
 80089c8:	4632      	mov	r2, r6
 80089ca:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80089ce:	1917      	adds	r7, r2, r4
 80089d0:	429f      	cmp	r7, r3
 80089d2:	bfde      	ittt	le
 80089d4:	193a      	addle	r2, r7, r4
 80089d6:	1bdb      	suble	r3, r3, r7
 80089d8:	1936      	addle	r6, r6, r4
 80089da:	0fcf      	lsrs	r7, r1, #31
 80089dc:	3801      	subs	r0, #1
 80089de:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80089e2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80089e6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80089ea:	d1f0      	bne.n	80089ce <__ieee754_sqrt+0xb6>
 80089ec:	4604      	mov	r4, r0
 80089ee:	2720      	movs	r7, #32
 80089f0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80089f4:	429a      	cmp	r2, r3
 80089f6:	eb00 0e0c 	add.w	lr, r0, ip
 80089fa:	db02      	blt.n	8008a02 <__ieee754_sqrt+0xea>
 80089fc:	d113      	bne.n	8008a26 <__ieee754_sqrt+0x10e>
 80089fe:	458e      	cmp	lr, r1
 8008a00:	d811      	bhi.n	8008a26 <__ieee754_sqrt+0x10e>
 8008a02:	f1be 0f00 	cmp.w	lr, #0
 8008a06:	eb0e 000c 	add.w	r0, lr, ip
 8008a0a:	da42      	bge.n	8008a92 <__ieee754_sqrt+0x17a>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	db40      	blt.n	8008a92 <__ieee754_sqrt+0x17a>
 8008a10:	f102 0801 	add.w	r8, r2, #1
 8008a14:	1a9b      	subs	r3, r3, r2
 8008a16:	458e      	cmp	lr, r1
 8008a18:	bf88      	it	hi
 8008a1a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8008a1e:	eba1 010e 	sub.w	r1, r1, lr
 8008a22:	4464      	add	r4, ip
 8008a24:	4642      	mov	r2, r8
 8008a26:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008a2a:	3f01      	subs	r7, #1
 8008a2c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008a30:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008a34:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008a38:	d1dc      	bne.n	80089f4 <__ieee754_sqrt+0xdc>
 8008a3a:	4319      	orrs	r1, r3
 8008a3c:	d01b      	beq.n	8008a76 <__ieee754_sqrt+0x15e>
 8008a3e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8008ac4 <__ieee754_sqrt+0x1ac>
 8008a42:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8008ac8 <__ieee754_sqrt+0x1b0>
 8008a46:	e9da 0100 	ldrd	r0, r1, [sl]
 8008a4a:	e9db 2300 	ldrd	r2, r3, [fp]
 8008a4e:	f7f7 fc3b 	bl	80002c8 <__aeabi_dsub>
 8008a52:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a56:	4602      	mov	r2, r0
 8008a58:	460b      	mov	r3, r1
 8008a5a:	4640      	mov	r0, r8
 8008a5c:	4649      	mov	r1, r9
 8008a5e:	f7f8 f867 	bl	8000b30 <__aeabi_dcmple>
 8008a62:	b140      	cbz	r0, 8008a76 <__ieee754_sqrt+0x15e>
 8008a64:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8008a68:	e9da 0100 	ldrd	r0, r1, [sl]
 8008a6c:	e9db 2300 	ldrd	r2, r3, [fp]
 8008a70:	d111      	bne.n	8008a96 <__ieee754_sqrt+0x17e>
 8008a72:	3601      	adds	r6, #1
 8008a74:	463c      	mov	r4, r7
 8008a76:	1072      	asrs	r2, r6, #1
 8008a78:	0863      	lsrs	r3, r4, #1
 8008a7a:	07f1      	lsls	r1, r6, #31
 8008a7c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008a80:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008a84:	bf48      	it	mi
 8008a86:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008a8a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8008a8e:	4618      	mov	r0, r3
 8008a90:	e756      	b.n	8008940 <__ieee754_sqrt+0x28>
 8008a92:	4690      	mov	r8, r2
 8008a94:	e7be      	b.n	8008a14 <__ieee754_sqrt+0xfc>
 8008a96:	f7f7 fc19 	bl	80002cc <__adddf3>
 8008a9a:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	4640      	mov	r0, r8
 8008aa4:	4649      	mov	r1, r9
 8008aa6:	f7f8 f839 	bl	8000b1c <__aeabi_dcmplt>
 8008aaa:	b120      	cbz	r0, 8008ab6 <__ieee754_sqrt+0x19e>
 8008aac:	1ca0      	adds	r0, r4, #2
 8008aae:	bf08      	it	eq
 8008ab0:	3601      	addeq	r6, #1
 8008ab2:	3402      	adds	r4, #2
 8008ab4:	e7df      	b.n	8008a76 <__ieee754_sqrt+0x15e>
 8008ab6:	1c63      	adds	r3, r4, #1
 8008ab8:	f023 0401 	bic.w	r4, r3, #1
 8008abc:	e7db      	b.n	8008a76 <__ieee754_sqrt+0x15e>
 8008abe:	bf00      	nop
 8008ac0:	7ff00000 	.word	0x7ff00000
 8008ac4:	200001e0 	.word	0x200001e0
 8008ac8:	200001d8 	.word	0x200001d8
 8008acc:	00000000 	.word	0x00000000

08008ad0 <__ieee754_asin>:
 8008ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad4:	ec55 4b10 	vmov	r4, r5, d0
 8008ad8:	4bc7      	ldr	r3, [pc, #796]	@ (8008df8 <__ieee754_asin+0x328>)
 8008ada:	b087      	sub	sp, #28
 8008adc:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8008ae0:	429e      	cmp	r6, r3
 8008ae2:	9501      	str	r5, [sp, #4]
 8008ae4:	d92d      	bls.n	8008b42 <__ieee754_asin+0x72>
 8008ae6:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8008aea:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8008aee:	4326      	orrs	r6, r4
 8008af0:	d116      	bne.n	8008b20 <__ieee754_asin+0x50>
 8008af2:	a3a7      	add	r3, pc, #668	@ (adr r3, 8008d90 <__ieee754_asin+0x2c0>)
 8008af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af8:	4620      	mov	r0, r4
 8008afa:	4629      	mov	r1, r5
 8008afc:	f7f7 fd9c 	bl	8000638 <__aeabi_dmul>
 8008b00:	a3a5      	add	r3, pc, #660	@ (adr r3, 8008d98 <__ieee754_asin+0x2c8>)
 8008b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b06:	4606      	mov	r6, r0
 8008b08:	460f      	mov	r7, r1
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	4629      	mov	r1, r5
 8008b0e:	f7f7 fd93 	bl	8000638 <__aeabi_dmul>
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	4630      	mov	r0, r6
 8008b18:	4639      	mov	r1, r7
 8008b1a:	f7f7 fbd7 	bl	80002cc <__adddf3>
 8008b1e:	e009      	b.n	8008b34 <__ieee754_asin+0x64>
 8008b20:	4622      	mov	r2, r4
 8008b22:	462b      	mov	r3, r5
 8008b24:	4620      	mov	r0, r4
 8008b26:	4629      	mov	r1, r5
 8008b28:	f7f7 fbce 	bl	80002c8 <__aeabi_dsub>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	f7f7 feac 	bl	800088c <__aeabi_ddiv>
 8008b34:	4604      	mov	r4, r0
 8008b36:	460d      	mov	r5, r1
 8008b38:	ec45 4b10 	vmov	d0, r4, r5
 8008b3c:	b007      	add	sp, #28
 8008b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b42:	4bae      	ldr	r3, [pc, #696]	@ (8008dfc <__ieee754_asin+0x32c>)
 8008b44:	429e      	cmp	r6, r3
 8008b46:	d810      	bhi.n	8008b6a <__ieee754_asin+0x9a>
 8008b48:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8008b4c:	f080 80ad 	bcs.w	8008caa <__ieee754_asin+0x1da>
 8008b50:	a393      	add	r3, pc, #588	@ (adr r3, 8008da0 <__ieee754_asin+0x2d0>)
 8008b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b56:	4620      	mov	r0, r4
 8008b58:	4629      	mov	r1, r5
 8008b5a:	f7f7 fbb7 	bl	80002cc <__adddf3>
 8008b5e:	4ba8      	ldr	r3, [pc, #672]	@ (8008e00 <__ieee754_asin+0x330>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	f7f7 fff9 	bl	8000b58 <__aeabi_dcmpgt>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d1e6      	bne.n	8008b38 <__ieee754_asin+0x68>
 8008b6a:	ec45 4b10 	vmov	d0, r4, r5
 8008b6e:	f7ff fec1 	bl	80088f4 <fabs>
 8008b72:	49a3      	ldr	r1, [pc, #652]	@ (8008e00 <__ieee754_asin+0x330>)
 8008b74:	ec53 2b10 	vmov	r2, r3, d0
 8008b78:	2000      	movs	r0, #0
 8008b7a:	f7f7 fba5 	bl	80002c8 <__aeabi_dsub>
 8008b7e:	4ba1      	ldr	r3, [pc, #644]	@ (8008e04 <__ieee754_asin+0x334>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	f7f7 fd59 	bl	8000638 <__aeabi_dmul>
 8008b86:	a388      	add	r3, pc, #544	@ (adr r3, 8008da8 <__ieee754_asin+0x2d8>)
 8008b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	460d      	mov	r5, r1
 8008b90:	f7f7 fd52 	bl	8000638 <__aeabi_dmul>
 8008b94:	a386      	add	r3, pc, #536	@ (adr r3, 8008db0 <__ieee754_asin+0x2e0>)
 8008b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9a:	f7f7 fb97 	bl	80002cc <__adddf3>
 8008b9e:	4622      	mov	r2, r4
 8008ba0:	462b      	mov	r3, r5
 8008ba2:	f7f7 fd49 	bl	8000638 <__aeabi_dmul>
 8008ba6:	a384      	add	r3, pc, #528	@ (adr r3, 8008db8 <__ieee754_asin+0x2e8>)
 8008ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bac:	f7f7 fb8c 	bl	80002c8 <__aeabi_dsub>
 8008bb0:	4622      	mov	r2, r4
 8008bb2:	462b      	mov	r3, r5
 8008bb4:	f7f7 fd40 	bl	8000638 <__aeabi_dmul>
 8008bb8:	a381      	add	r3, pc, #516	@ (adr r3, 8008dc0 <__ieee754_asin+0x2f0>)
 8008bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbe:	f7f7 fb85 	bl	80002cc <__adddf3>
 8008bc2:	4622      	mov	r2, r4
 8008bc4:	462b      	mov	r3, r5
 8008bc6:	f7f7 fd37 	bl	8000638 <__aeabi_dmul>
 8008bca:	a37f      	add	r3, pc, #508	@ (adr r3, 8008dc8 <__ieee754_asin+0x2f8>)
 8008bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd0:	f7f7 fb7a 	bl	80002c8 <__aeabi_dsub>
 8008bd4:	4622      	mov	r2, r4
 8008bd6:	462b      	mov	r3, r5
 8008bd8:	f7f7 fd2e 	bl	8000638 <__aeabi_dmul>
 8008bdc:	a37c      	add	r3, pc, #496	@ (adr r3, 8008dd0 <__ieee754_asin+0x300>)
 8008bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be2:	f7f7 fb73 	bl	80002cc <__adddf3>
 8008be6:	4622      	mov	r2, r4
 8008be8:	462b      	mov	r3, r5
 8008bea:	f7f7 fd25 	bl	8000638 <__aeabi_dmul>
 8008bee:	a37a      	add	r3, pc, #488	@ (adr r3, 8008dd8 <__ieee754_asin+0x308>)
 8008bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	f7f7 fd1c 	bl	8000638 <__aeabi_dmul>
 8008c00:	a377      	add	r3, pc, #476	@ (adr r3, 8008de0 <__ieee754_asin+0x310>)
 8008c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c06:	f7f7 fb5f 	bl	80002c8 <__aeabi_dsub>
 8008c0a:	4622      	mov	r2, r4
 8008c0c:	462b      	mov	r3, r5
 8008c0e:	f7f7 fd13 	bl	8000638 <__aeabi_dmul>
 8008c12:	a375      	add	r3, pc, #468	@ (adr r3, 8008de8 <__ieee754_asin+0x318>)
 8008c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c18:	f7f7 fb58 	bl	80002cc <__adddf3>
 8008c1c:	4622      	mov	r2, r4
 8008c1e:	462b      	mov	r3, r5
 8008c20:	f7f7 fd0a 	bl	8000638 <__aeabi_dmul>
 8008c24:	a372      	add	r3, pc, #456	@ (adr r3, 8008df0 <__ieee754_asin+0x320>)
 8008c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2a:	f7f7 fb4d 	bl	80002c8 <__aeabi_dsub>
 8008c2e:	4622      	mov	r2, r4
 8008c30:	462b      	mov	r3, r5
 8008c32:	f7f7 fd01 	bl	8000638 <__aeabi_dmul>
 8008c36:	4b72      	ldr	r3, [pc, #456]	@ (8008e00 <__ieee754_asin+0x330>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f7f7 fb47 	bl	80002cc <__adddf3>
 8008c3e:	ec45 4b10 	vmov	d0, r4, r5
 8008c42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c46:	f7ff fe67 	bl	8008918 <__ieee754_sqrt>
 8008c4a:	4b6f      	ldr	r3, [pc, #444]	@ (8008e08 <__ieee754_asin+0x338>)
 8008c4c:	429e      	cmp	r6, r3
 8008c4e:	ec5b ab10 	vmov	sl, fp, d0
 8008c52:	f240 80db 	bls.w	8008e0c <__ieee754_asin+0x33c>
 8008c56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c5e:	f7f7 fe15 	bl	800088c <__aeabi_ddiv>
 8008c62:	4652      	mov	r2, sl
 8008c64:	465b      	mov	r3, fp
 8008c66:	f7f7 fce7 	bl	8000638 <__aeabi_dmul>
 8008c6a:	4652      	mov	r2, sl
 8008c6c:	465b      	mov	r3, fp
 8008c6e:	f7f7 fb2d 	bl	80002cc <__adddf3>
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	f7f7 fb29 	bl	80002cc <__adddf3>
 8008c7a:	a347      	add	r3, pc, #284	@ (adr r3, 8008d98 <__ieee754_asin+0x2c8>)
 8008c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c80:	f7f7 fb22 	bl	80002c8 <__aeabi_dsub>
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	a141      	add	r1, pc, #260	@ (adr r1, 8008d90 <__ieee754_asin+0x2c0>)
 8008c8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c8e:	f7f7 fb1b 	bl	80002c8 <__aeabi_dsub>
 8008c92:	9b01      	ldr	r3, [sp, #4]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	bfdc      	itt	le
 8008c98:	4602      	movle	r2, r0
 8008c9a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	460d      	mov	r5, r1
 8008ca2:	bfdc      	itt	le
 8008ca4:	4614      	movle	r4, r2
 8008ca6:	461d      	movle	r5, r3
 8008ca8:	e746      	b.n	8008b38 <__ieee754_asin+0x68>
 8008caa:	4622      	mov	r2, r4
 8008cac:	462b      	mov	r3, r5
 8008cae:	4620      	mov	r0, r4
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	f7f7 fcc1 	bl	8000638 <__aeabi_dmul>
 8008cb6:	a33c      	add	r3, pc, #240	@ (adr r3, 8008da8 <__ieee754_asin+0x2d8>)
 8008cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbc:	4606      	mov	r6, r0
 8008cbe:	460f      	mov	r7, r1
 8008cc0:	f7f7 fcba 	bl	8000638 <__aeabi_dmul>
 8008cc4:	a33a      	add	r3, pc, #232	@ (adr r3, 8008db0 <__ieee754_asin+0x2e0>)
 8008cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cca:	f7f7 faff 	bl	80002cc <__adddf3>
 8008cce:	4632      	mov	r2, r6
 8008cd0:	463b      	mov	r3, r7
 8008cd2:	f7f7 fcb1 	bl	8000638 <__aeabi_dmul>
 8008cd6:	a338      	add	r3, pc, #224	@ (adr r3, 8008db8 <__ieee754_asin+0x2e8>)
 8008cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cdc:	f7f7 faf4 	bl	80002c8 <__aeabi_dsub>
 8008ce0:	4632      	mov	r2, r6
 8008ce2:	463b      	mov	r3, r7
 8008ce4:	f7f7 fca8 	bl	8000638 <__aeabi_dmul>
 8008ce8:	a335      	add	r3, pc, #212	@ (adr r3, 8008dc0 <__ieee754_asin+0x2f0>)
 8008cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cee:	f7f7 faed 	bl	80002cc <__adddf3>
 8008cf2:	4632      	mov	r2, r6
 8008cf4:	463b      	mov	r3, r7
 8008cf6:	f7f7 fc9f 	bl	8000638 <__aeabi_dmul>
 8008cfa:	a333      	add	r3, pc, #204	@ (adr r3, 8008dc8 <__ieee754_asin+0x2f8>)
 8008cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d00:	f7f7 fae2 	bl	80002c8 <__aeabi_dsub>
 8008d04:	4632      	mov	r2, r6
 8008d06:	463b      	mov	r3, r7
 8008d08:	f7f7 fc96 	bl	8000638 <__aeabi_dmul>
 8008d0c:	a330      	add	r3, pc, #192	@ (adr r3, 8008dd0 <__ieee754_asin+0x300>)
 8008d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d12:	f7f7 fadb 	bl	80002cc <__adddf3>
 8008d16:	4632      	mov	r2, r6
 8008d18:	463b      	mov	r3, r7
 8008d1a:	f7f7 fc8d 	bl	8000638 <__aeabi_dmul>
 8008d1e:	a32e      	add	r3, pc, #184	@ (adr r3, 8008dd8 <__ieee754_asin+0x308>)
 8008d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d24:	4680      	mov	r8, r0
 8008d26:	4689      	mov	r9, r1
 8008d28:	4630      	mov	r0, r6
 8008d2a:	4639      	mov	r1, r7
 8008d2c:	f7f7 fc84 	bl	8000638 <__aeabi_dmul>
 8008d30:	a32b      	add	r3, pc, #172	@ (adr r3, 8008de0 <__ieee754_asin+0x310>)
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	f7f7 fac7 	bl	80002c8 <__aeabi_dsub>
 8008d3a:	4632      	mov	r2, r6
 8008d3c:	463b      	mov	r3, r7
 8008d3e:	f7f7 fc7b 	bl	8000638 <__aeabi_dmul>
 8008d42:	a329      	add	r3, pc, #164	@ (adr r3, 8008de8 <__ieee754_asin+0x318>)
 8008d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d48:	f7f7 fac0 	bl	80002cc <__adddf3>
 8008d4c:	4632      	mov	r2, r6
 8008d4e:	463b      	mov	r3, r7
 8008d50:	f7f7 fc72 	bl	8000638 <__aeabi_dmul>
 8008d54:	a326      	add	r3, pc, #152	@ (adr r3, 8008df0 <__ieee754_asin+0x320>)
 8008d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5a:	f7f7 fab5 	bl	80002c8 <__aeabi_dsub>
 8008d5e:	4632      	mov	r2, r6
 8008d60:	463b      	mov	r3, r7
 8008d62:	f7f7 fc69 	bl	8000638 <__aeabi_dmul>
 8008d66:	4b26      	ldr	r3, [pc, #152]	@ (8008e00 <__ieee754_asin+0x330>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f7f7 faaf 	bl	80002cc <__adddf3>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	460b      	mov	r3, r1
 8008d72:	4640      	mov	r0, r8
 8008d74:	4649      	mov	r1, r9
 8008d76:	f7f7 fd89 	bl	800088c <__aeabi_ddiv>
 8008d7a:	4622      	mov	r2, r4
 8008d7c:	462b      	mov	r3, r5
 8008d7e:	f7f7 fc5b 	bl	8000638 <__aeabi_dmul>
 8008d82:	4602      	mov	r2, r0
 8008d84:	460b      	mov	r3, r1
 8008d86:	4620      	mov	r0, r4
 8008d88:	4629      	mov	r1, r5
 8008d8a:	e6c6      	b.n	8008b1a <__ieee754_asin+0x4a>
 8008d8c:	f3af 8000 	nop.w
 8008d90:	54442d18 	.word	0x54442d18
 8008d94:	3ff921fb 	.word	0x3ff921fb
 8008d98:	33145c07 	.word	0x33145c07
 8008d9c:	3c91a626 	.word	0x3c91a626
 8008da0:	8800759c 	.word	0x8800759c
 8008da4:	7e37e43c 	.word	0x7e37e43c
 8008da8:	0dfdf709 	.word	0x0dfdf709
 8008dac:	3f023de1 	.word	0x3f023de1
 8008db0:	7501b288 	.word	0x7501b288
 8008db4:	3f49efe0 	.word	0x3f49efe0
 8008db8:	b5688f3b 	.word	0xb5688f3b
 8008dbc:	3fa48228 	.word	0x3fa48228
 8008dc0:	0e884455 	.word	0x0e884455
 8008dc4:	3fc9c155 	.word	0x3fc9c155
 8008dc8:	03eb6f7d 	.word	0x03eb6f7d
 8008dcc:	3fd4d612 	.word	0x3fd4d612
 8008dd0:	55555555 	.word	0x55555555
 8008dd4:	3fc55555 	.word	0x3fc55555
 8008dd8:	b12e9282 	.word	0xb12e9282
 8008ddc:	3fb3b8c5 	.word	0x3fb3b8c5
 8008de0:	1b8d0159 	.word	0x1b8d0159
 8008de4:	3fe6066c 	.word	0x3fe6066c
 8008de8:	9c598ac8 	.word	0x9c598ac8
 8008dec:	40002ae5 	.word	0x40002ae5
 8008df0:	1c8a2d4b 	.word	0x1c8a2d4b
 8008df4:	40033a27 	.word	0x40033a27
 8008df8:	3fefffff 	.word	0x3fefffff
 8008dfc:	3fdfffff 	.word	0x3fdfffff
 8008e00:	3ff00000 	.word	0x3ff00000
 8008e04:	3fe00000 	.word	0x3fe00000
 8008e08:	3fef3332 	.word	0x3fef3332
 8008e0c:	4652      	mov	r2, sl
 8008e0e:	465b      	mov	r3, fp
 8008e10:	4650      	mov	r0, sl
 8008e12:	4659      	mov	r1, fp
 8008e14:	f7f7 fa5a 	bl	80002cc <__adddf3>
 8008e18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e1c:	4606      	mov	r6, r0
 8008e1e:	460f      	mov	r7, r1
 8008e20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e24:	f7f7 fd32 	bl	800088c <__aeabi_ddiv>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	4639      	mov	r1, r7
 8008e30:	f7f7 fc02 	bl	8000638 <__aeabi_dmul>
 8008e34:	f04f 0800 	mov.w	r8, #0
 8008e38:	4606      	mov	r6, r0
 8008e3a:	460f      	mov	r7, r1
 8008e3c:	4642      	mov	r2, r8
 8008e3e:	465b      	mov	r3, fp
 8008e40:	4640      	mov	r0, r8
 8008e42:	4659      	mov	r1, fp
 8008e44:	f7f7 fbf8 	bl	8000638 <__aeabi_dmul>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	4629      	mov	r1, r5
 8008e50:	f7f7 fa3a 	bl	80002c8 <__aeabi_dsub>
 8008e54:	4642      	mov	r2, r8
 8008e56:	4604      	mov	r4, r0
 8008e58:	460d      	mov	r5, r1
 8008e5a:	465b      	mov	r3, fp
 8008e5c:	4650      	mov	r0, sl
 8008e5e:	4659      	mov	r1, fp
 8008e60:	f7f7 fa34 	bl	80002cc <__adddf3>
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	4620      	mov	r0, r4
 8008e6a:	4629      	mov	r1, r5
 8008e6c:	f7f7 fd0e 	bl	800088c <__aeabi_ddiv>
 8008e70:	4602      	mov	r2, r0
 8008e72:	460b      	mov	r3, r1
 8008e74:	f7f7 fa2a 	bl	80002cc <__adddf3>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	a112      	add	r1, pc, #72	@ (adr r1, 8008ec8 <__ieee754_asin+0x3f8>)
 8008e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e82:	f7f7 fa21 	bl	80002c8 <__aeabi_dsub>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	4639      	mov	r1, r7
 8008e8e:	f7f7 fa1b 	bl	80002c8 <__aeabi_dsub>
 8008e92:	4642      	mov	r2, r8
 8008e94:	4604      	mov	r4, r0
 8008e96:	460d      	mov	r5, r1
 8008e98:	465b      	mov	r3, fp
 8008e9a:	4640      	mov	r0, r8
 8008e9c:	4659      	mov	r1, fp
 8008e9e:	f7f7 fa15 	bl	80002cc <__adddf3>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	a10a      	add	r1, pc, #40	@ (adr r1, 8008ed0 <__ieee754_asin+0x400>)
 8008ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eac:	f7f7 fa0c 	bl	80002c8 <__aeabi_dsub>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	f7f7 fa06 	bl	80002c8 <__aeabi_dsub>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	a103      	add	r1, pc, #12	@ (adr r1, 8008ed0 <__ieee754_asin+0x400>)
 8008ec2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ec6:	e6e2      	b.n	8008c8e <__ieee754_asin+0x1be>
 8008ec8:	33145c07 	.word	0x33145c07
 8008ecc:	3c91a626 	.word	0x3c91a626
 8008ed0:	54442d18 	.word	0x54442d18
 8008ed4:	3fe921fb 	.word	0x3fe921fb

08008ed8 <__ieee754_atan2>:
 8008ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008edc:	ec57 6b11 	vmov	r6, r7, d1
 8008ee0:	4273      	negs	r3, r6
 8008ee2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8009060 <__ieee754_atan2+0x188>
 8008ee6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8008eea:	4333      	orrs	r3, r6
 8008eec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008ef0:	4543      	cmp	r3, r8
 8008ef2:	ec51 0b10 	vmov	r0, r1, d0
 8008ef6:	4635      	mov	r5, r6
 8008ef8:	d809      	bhi.n	8008f0e <__ieee754_atan2+0x36>
 8008efa:	4244      	negs	r4, r0
 8008efc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008f00:	4304      	orrs	r4, r0
 8008f02:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008f06:	4544      	cmp	r4, r8
 8008f08:	468e      	mov	lr, r1
 8008f0a:	4681      	mov	r9, r0
 8008f0c:	d907      	bls.n	8008f1e <__ieee754_atan2+0x46>
 8008f0e:	4632      	mov	r2, r6
 8008f10:	463b      	mov	r3, r7
 8008f12:	f7f7 f9db 	bl	80002cc <__adddf3>
 8008f16:	ec41 0b10 	vmov	d0, r0, r1
 8008f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f1e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8008f22:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8008f26:	4334      	orrs	r4, r6
 8008f28:	d103      	bne.n	8008f32 <__ieee754_atan2+0x5a>
 8008f2a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f2e:	f000 b89b 	b.w	8009068 <atan>
 8008f32:	17bc      	asrs	r4, r7, #30
 8008f34:	f004 0402 	and.w	r4, r4, #2
 8008f38:	ea53 0909 	orrs.w	r9, r3, r9
 8008f3c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008f40:	d107      	bne.n	8008f52 <__ieee754_atan2+0x7a>
 8008f42:	2c02      	cmp	r4, #2
 8008f44:	d05f      	beq.n	8009006 <__ieee754_atan2+0x12e>
 8008f46:	2c03      	cmp	r4, #3
 8008f48:	d1e5      	bne.n	8008f16 <__ieee754_atan2+0x3e>
 8008f4a:	a141      	add	r1, pc, #260	@ (adr r1, 8009050 <__ieee754_atan2+0x178>)
 8008f4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f50:	e7e1      	b.n	8008f16 <__ieee754_atan2+0x3e>
 8008f52:	4315      	orrs	r5, r2
 8008f54:	d106      	bne.n	8008f64 <__ieee754_atan2+0x8c>
 8008f56:	f1be 0f00 	cmp.w	lr, #0
 8008f5a:	da5f      	bge.n	800901c <__ieee754_atan2+0x144>
 8008f5c:	a13e      	add	r1, pc, #248	@ (adr r1, 8009058 <__ieee754_atan2+0x180>)
 8008f5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f62:	e7d8      	b.n	8008f16 <__ieee754_atan2+0x3e>
 8008f64:	4542      	cmp	r2, r8
 8008f66:	d10f      	bne.n	8008f88 <__ieee754_atan2+0xb0>
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8008f6e:	d107      	bne.n	8008f80 <__ieee754_atan2+0xa8>
 8008f70:	2c02      	cmp	r4, #2
 8008f72:	d84c      	bhi.n	800900e <__ieee754_atan2+0x136>
 8008f74:	4b34      	ldr	r3, [pc, #208]	@ (8009048 <__ieee754_atan2+0x170>)
 8008f76:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f7e:	e7ca      	b.n	8008f16 <__ieee754_atan2+0x3e>
 8008f80:	2c02      	cmp	r4, #2
 8008f82:	d848      	bhi.n	8009016 <__ieee754_atan2+0x13e>
 8008f84:	4b31      	ldr	r3, [pc, #196]	@ (800904c <__ieee754_atan2+0x174>)
 8008f86:	e7f6      	b.n	8008f76 <__ieee754_atan2+0x9e>
 8008f88:	4543      	cmp	r3, r8
 8008f8a:	d0e4      	beq.n	8008f56 <__ieee754_atan2+0x7e>
 8008f8c:	1a9b      	subs	r3, r3, r2
 8008f8e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8008f92:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008f96:	da1e      	bge.n	8008fd6 <__ieee754_atan2+0xfe>
 8008f98:	2f00      	cmp	r7, #0
 8008f9a:	da01      	bge.n	8008fa0 <__ieee754_atan2+0xc8>
 8008f9c:	323c      	adds	r2, #60	@ 0x3c
 8008f9e:	db1e      	blt.n	8008fde <__ieee754_atan2+0x106>
 8008fa0:	4632      	mov	r2, r6
 8008fa2:	463b      	mov	r3, r7
 8008fa4:	f7f7 fc72 	bl	800088c <__aeabi_ddiv>
 8008fa8:	ec41 0b10 	vmov	d0, r0, r1
 8008fac:	f7ff fca2 	bl	80088f4 <fabs>
 8008fb0:	f000 f85a 	bl	8009068 <atan>
 8008fb4:	ec51 0b10 	vmov	r0, r1, d0
 8008fb8:	2c01      	cmp	r4, #1
 8008fba:	d013      	beq.n	8008fe4 <__ieee754_atan2+0x10c>
 8008fbc:	2c02      	cmp	r4, #2
 8008fbe:	d015      	beq.n	8008fec <__ieee754_atan2+0x114>
 8008fc0:	2c00      	cmp	r4, #0
 8008fc2:	d0a8      	beq.n	8008f16 <__ieee754_atan2+0x3e>
 8008fc4:	a318      	add	r3, pc, #96	@ (adr r3, 8009028 <__ieee754_atan2+0x150>)
 8008fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fca:	f7f7 f97d 	bl	80002c8 <__aeabi_dsub>
 8008fce:	a318      	add	r3, pc, #96	@ (adr r3, 8009030 <__ieee754_atan2+0x158>)
 8008fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd4:	e014      	b.n	8009000 <__ieee754_atan2+0x128>
 8008fd6:	a118      	add	r1, pc, #96	@ (adr r1, 8009038 <__ieee754_atan2+0x160>)
 8008fd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fdc:	e7ec      	b.n	8008fb8 <__ieee754_atan2+0xe0>
 8008fde:	2000      	movs	r0, #0
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	e7e9      	b.n	8008fb8 <__ieee754_atan2+0xe0>
 8008fe4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008fe8:	4619      	mov	r1, r3
 8008fea:	e794      	b.n	8008f16 <__ieee754_atan2+0x3e>
 8008fec:	a30e      	add	r3, pc, #56	@ (adr r3, 8009028 <__ieee754_atan2+0x150>)
 8008fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff2:	f7f7 f969 	bl	80002c8 <__aeabi_dsub>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	a10d      	add	r1, pc, #52	@ (adr r1, 8009030 <__ieee754_atan2+0x158>)
 8008ffc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009000:	f7f7 f962 	bl	80002c8 <__aeabi_dsub>
 8009004:	e787      	b.n	8008f16 <__ieee754_atan2+0x3e>
 8009006:	a10a      	add	r1, pc, #40	@ (adr r1, 8009030 <__ieee754_atan2+0x158>)
 8009008:	e9d1 0100 	ldrd	r0, r1, [r1]
 800900c:	e783      	b.n	8008f16 <__ieee754_atan2+0x3e>
 800900e:	a10c      	add	r1, pc, #48	@ (adr r1, 8009040 <__ieee754_atan2+0x168>)
 8009010:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009014:	e77f      	b.n	8008f16 <__ieee754_atan2+0x3e>
 8009016:	2000      	movs	r0, #0
 8009018:	2100      	movs	r1, #0
 800901a:	e77c      	b.n	8008f16 <__ieee754_atan2+0x3e>
 800901c:	a106      	add	r1, pc, #24	@ (adr r1, 8009038 <__ieee754_atan2+0x160>)
 800901e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009022:	e778      	b.n	8008f16 <__ieee754_atan2+0x3e>
 8009024:	f3af 8000 	nop.w
 8009028:	33145c07 	.word	0x33145c07
 800902c:	3ca1a626 	.word	0x3ca1a626
 8009030:	54442d18 	.word	0x54442d18
 8009034:	400921fb 	.word	0x400921fb
 8009038:	54442d18 	.word	0x54442d18
 800903c:	3ff921fb 	.word	0x3ff921fb
 8009040:	54442d18 	.word	0x54442d18
 8009044:	3fe921fb 	.word	0x3fe921fb
 8009048:	0800a4f0 	.word	0x0800a4f0
 800904c:	0800a4d8 	.word	0x0800a4d8
 8009050:	54442d18 	.word	0x54442d18
 8009054:	c00921fb 	.word	0xc00921fb
 8009058:	54442d18 	.word	0x54442d18
 800905c:	bff921fb 	.word	0xbff921fb
 8009060:	7ff00000 	.word	0x7ff00000
 8009064:	00000000 	.word	0x00000000

08009068 <atan>:
 8009068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906c:	ec55 4b10 	vmov	r4, r5, d0
 8009070:	4bbf      	ldr	r3, [pc, #764]	@ (8009370 <atan+0x308>)
 8009072:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8009076:	429e      	cmp	r6, r3
 8009078:	46ab      	mov	fp, r5
 800907a:	d918      	bls.n	80090ae <atan+0x46>
 800907c:	4bbd      	ldr	r3, [pc, #756]	@ (8009374 <atan+0x30c>)
 800907e:	429e      	cmp	r6, r3
 8009080:	d801      	bhi.n	8009086 <atan+0x1e>
 8009082:	d109      	bne.n	8009098 <atan+0x30>
 8009084:	b144      	cbz	r4, 8009098 <atan+0x30>
 8009086:	4622      	mov	r2, r4
 8009088:	462b      	mov	r3, r5
 800908a:	4620      	mov	r0, r4
 800908c:	4629      	mov	r1, r5
 800908e:	f7f7 f91d 	bl	80002cc <__adddf3>
 8009092:	4604      	mov	r4, r0
 8009094:	460d      	mov	r5, r1
 8009096:	e006      	b.n	80090a6 <atan+0x3e>
 8009098:	f1bb 0f00 	cmp.w	fp, #0
 800909c:	f340 812b 	ble.w	80092f6 <atan+0x28e>
 80090a0:	a597      	add	r5, pc, #604	@ (adr r5, 8009300 <atan+0x298>)
 80090a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80090a6:	ec45 4b10 	vmov	d0, r4, r5
 80090aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ae:	4bb2      	ldr	r3, [pc, #712]	@ (8009378 <atan+0x310>)
 80090b0:	429e      	cmp	r6, r3
 80090b2:	d813      	bhi.n	80090dc <atan+0x74>
 80090b4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80090b8:	429e      	cmp	r6, r3
 80090ba:	d80c      	bhi.n	80090d6 <atan+0x6e>
 80090bc:	a392      	add	r3, pc, #584	@ (adr r3, 8009308 <atan+0x2a0>)
 80090be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c2:	4620      	mov	r0, r4
 80090c4:	4629      	mov	r1, r5
 80090c6:	f7f7 f901 	bl	80002cc <__adddf3>
 80090ca:	4bac      	ldr	r3, [pc, #688]	@ (800937c <atan+0x314>)
 80090cc:	2200      	movs	r2, #0
 80090ce:	f7f7 fd43 	bl	8000b58 <__aeabi_dcmpgt>
 80090d2:	2800      	cmp	r0, #0
 80090d4:	d1e7      	bne.n	80090a6 <atan+0x3e>
 80090d6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80090da:	e029      	b.n	8009130 <atan+0xc8>
 80090dc:	f7ff fc0a 	bl	80088f4 <fabs>
 80090e0:	4ba7      	ldr	r3, [pc, #668]	@ (8009380 <atan+0x318>)
 80090e2:	429e      	cmp	r6, r3
 80090e4:	ec55 4b10 	vmov	r4, r5, d0
 80090e8:	f200 80bc 	bhi.w	8009264 <atan+0x1fc>
 80090ec:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80090f0:	429e      	cmp	r6, r3
 80090f2:	f200 809e 	bhi.w	8009232 <atan+0x1ca>
 80090f6:	4622      	mov	r2, r4
 80090f8:	462b      	mov	r3, r5
 80090fa:	4620      	mov	r0, r4
 80090fc:	4629      	mov	r1, r5
 80090fe:	f7f7 f8e5 	bl	80002cc <__adddf3>
 8009102:	4b9e      	ldr	r3, [pc, #632]	@ (800937c <atan+0x314>)
 8009104:	2200      	movs	r2, #0
 8009106:	f7f7 f8df 	bl	80002c8 <__aeabi_dsub>
 800910a:	2200      	movs	r2, #0
 800910c:	4606      	mov	r6, r0
 800910e:	460f      	mov	r7, r1
 8009110:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009114:	4620      	mov	r0, r4
 8009116:	4629      	mov	r1, r5
 8009118:	f7f7 f8d8 	bl	80002cc <__adddf3>
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	4630      	mov	r0, r6
 8009122:	4639      	mov	r1, r7
 8009124:	f7f7 fbb2 	bl	800088c <__aeabi_ddiv>
 8009128:	f04f 0a00 	mov.w	sl, #0
 800912c:	4604      	mov	r4, r0
 800912e:	460d      	mov	r5, r1
 8009130:	4622      	mov	r2, r4
 8009132:	462b      	mov	r3, r5
 8009134:	4620      	mov	r0, r4
 8009136:	4629      	mov	r1, r5
 8009138:	f7f7 fa7e 	bl	8000638 <__aeabi_dmul>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	4680      	mov	r8, r0
 8009142:	4689      	mov	r9, r1
 8009144:	f7f7 fa78 	bl	8000638 <__aeabi_dmul>
 8009148:	a371      	add	r3, pc, #452	@ (adr r3, 8009310 <atan+0x2a8>)
 800914a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914e:	4606      	mov	r6, r0
 8009150:	460f      	mov	r7, r1
 8009152:	f7f7 fa71 	bl	8000638 <__aeabi_dmul>
 8009156:	a370      	add	r3, pc, #448	@ (adr r3, 8009318 <atan+0x2b0>)
 8009158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915c:	f7f7 f8b6 	bl	80002cc <__adddf3>
 8009160:	4632      	mov	r2, r6
 8009162:	463b      	mov	r3, r7
 8009164:	f7f7 fa68 	bl	8000638 <__aeabi_dmul>
 8009168:	a36d      	add	r3, pc, #436	@ (adr r3, 8009320 <atan+0x2b8>)
 800916a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916e:	f7f7 f8ad 	bl	80002cc <__adddf3>
 8009172:	4632      	mov	r2, r6
 8009174:	463b      	mov	r3, r7
 8009176:	f7f7 fa5f 	bl	8000638 <__aeabi_dmul>
 800917a:	a36b      	add	r3, pc, #428	@ (adr r3, 8009328 <atan+0x2c0>)
 800917c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009180:	f7f7 f8a4 	bl	80002cc <__adddf3>
 8009184:	4632      	mov	r2, r6
 8009186:	463b      	mov	r3, r7
 8009188:	f7f7 fa56 	bl	8000638 <__aeabi_dmul>
 800918c:	a368      	add	r3, pc, #416	@ (adr r3, 8009330 <atan+0x2c8>)
 800918e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009192:	f7f7 f89b 	bl	80002cc <__adddf3>
 8009196:	4632      	mov	r2, r6
 8009198:	463b      	mov	r3, r7
 800919a:	f7f7 fa4d 	bl	8000638 <__aeabi_dmul>
 800919e:	a366      	add	r3, pc, #408	@ (adr r3, 8009338 <atan+0x2d0>)
 80091a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a4:	f7f7 f892 	bl	80002cc <__adddf3>
 80091a8:	4642      	mov	r2, r8
 80091aa:	464b      	mov	r3, r9
 80091ac:	f7f7 fa44 	bl	8000638 <__aeabi_dmul>
 80091b0:	a363      	add	r3, pc, #396	@ (adr r3, 8009340 <atan+0x2d8>)
 80091b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b6:	4680      	mov	r8, r0
 80091b8:	4689      	mov	r9, r1
 80091ba:	4630      	mov	r0, r6
 80091bc:	4639      	mov	r1, r7
 80091be:	f7f7 fa3b 	bl	8000638 <__aeabi_dmul>
 80091c2:	a361      	add	r3, pc, #388	@ (adr r3, 8009348 <atan+0x2e0>)
 80091c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c8:	f7f7 f87e 	bl	80002c8 <__aeabi_dsub>
 80091cc:	4632      	mov	r2, r6
 80091ce:	463b      	mov	r3, r7
 80091d0:	f7f7 fa32 	bl	8000638 <__aeabi_dmul>
 80091d4:	a35e      	add	r3, pc, #376	@ (adr r3, 8009350 <atan+0x2e8>)
 80091d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091da:	f7f7 f875 	bl	80002c8 <__aeabi_dsub>
 80091de:	4632      	mov	r2, r6
 80091e0:	463b      	mov	r3, r7
 80091e2:	f7f7 fa29 	bl	8000638 <__aeabi_dmul>
 80091e6:	a35c      	add	r3, pc, #368	@ (adr r3, 8009358 <atan+0x2f0>)
 80091e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ec:	f7f7 f86c 	bl	80002c8 <__aeabi_dsub>
 80091f0:	4632      	mov	r2, r6
 80091f2:	463b      	mov	r3, r7
 80091f4:	f7f7 fa20 	bl	8000638 <__aeabi_dmul>
 80091f8:	a359      	add	r3, pc, #356	@ (adr r3, 8009360 <atan+0x2f8>)
 80091fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fe:	f7f7 f863 	bl	80002c8 <__aeabi_dsub>
 8009202:	4632      	mov	r2, r6
 8009204:	463b      	mov	r3, r7
 8009206:	f7f7 fa17 	bl	8000638 <__aeabi_dmul>
 800920a:	4602      	mov	r2, r0
 800920c:	460b      	mov	r3, r1
 800920e:	4640      	mov	r0, r8
 8009210:	4649      	mov	r1, r9
 8009212:	f7f7 f85b 	bl	80002cc <__adddf3>
 8009216:	4622      	mov	r2, r4
 8009218:	462b      	mov	r3, r5
 800921a:	f7f7 fa0d 	bl	8000638 <__aeabi_dmul>
 800921e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8009222:	4602      	mov	r2, r0
 8009224:	460b      	mov	r3, r1
 8009226:	d148      	bne.n	80092ba <atan+0x252>
 8009228:	4620      	mov	r0, r4
 800922a:	4629      	mov	r1, r5
 800922c:	f7f7 f84c 	bl	80002c8 <__aeabi_dsub>
 8009230:	e72f      	b.n	8009092 <atan+0x2a>
 8009232:	4b52      	ldr	r3, [pc, #328]	@ (800937c <atan+0x314>)
 8009234:	2200      	movs	r2, #0
 8009236:	4620      	mov	r0, r4
 8009238:	4629      	mov	r1, r5
 800923a:	f7f7 f845 	bl	80002c8 <__aeabi_dsub>
 800923e:	4b4f      	ldr	r3, [pc, #316]	@ (800937c <atan+0x314>)
 8009240:	4606      	mov	r6, r0
 8009242:	460f      	mov	r7, r1
 8009244:	2200      	movs	r2, #0
 8009246:	4620      	mov	r0, r4
 8009248:	4629      	mov	r1, r5
 800924a:	f7f7 f83f 	bl	80002cc <__adddf3>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	4630      	mov	r0, r6
 8009254:	4639      	mov	r1, r7
 8009256:	f7f7 fb19 	bl	800088c <__aeabi_ddiv>
 800925a:	f04f 0a01 	mov.w	sl, #1
 800925e:	4604      	mov	r4, r0
 8009260:	460d      	mov	r5, r1
 8009262:	e765      	b.n	8009130 <atan+0xc8>
 8009264:	4b47      	ldr	r3, [pc, #284]	@ (8009384 <atan+0x31c>)
 8009266:	429e      	cmp	r6, r3
 8009268:	d21c      	bcs.n	80092a4 <atan+0x23c>
 800926a:	4b47      	ldr	r3, [pc, #284]	@ (8009388 <atan+0x320>)
 800926c:	2200      	movs	r2, #0
 800926e:	4620      	mov	r0, r4
 8009270:	4629      	mov	r1, r5
 8009272:	f7f7 f829 	bl	80002c8 <__aeabi_dsub>
 8009276:	4b44      	ldr	r3, [pc, #272]	@ (8009388 <atan+0x320>)
 8009278:	4606      	mov	r6, r0
 800927a:	460f      	mov	r7, r1
 800927c:	2200      	movs	r2, #0
 800927e:	4620      	mov	r0, r4
 8009280:	4629      	mov	r1, r5
 8009282:	f7f7 f9d9 	bl	8000638 <__aeabi_dmul>
 8009286:	4b3d      	ldr	r3, [pc, #244]	@ (800937c <atan+0x314>)
 8009288:	2200      	movs	r2, #0
 800928a:	f7f7 f81f 	bl	80002cc <__adddf3>
 800928e:	4602      	mov	r2, r0
 8009290:	460b      	mov	r3, r1
 8009292:	4630      	mov	r0, r6
 8009294:	4639      	mov	r1, r7
 8009296:	f7f7 faf9 	bl	800088c <__aeabi_ddiv>
 800929a:	f04f 0a02 	mov.w	sl, #2
 800929e:	4604      	mov	r4, r0
 80092a0:	460d      	mov	r5, r1
 80092a2:	e745      	b.n	8009130 <atan+0xc8>
 80092a4:	4622      	mov	r2, r4
 80092a6:	462b      	mov	r3, r5
 80092a8:	4938      	ldr	r1, [pc, #224]	@ (800938c <atan+0x324>)
 80092aa:	2000      	movs	r0, #0
 80092ac:	f7f7 faee 	bl	800088c <__aeabi_ddiv>
 80092b0:	f04f 0a03 	mov.w	sl, #3
 80092b4:	4604      	mov	r4, r0
 80092b6:	460d      	mov	r5, r1
 80092b8:	e73a      	b.n	8009130 <atan+0xc8>
 80092ba:	4b35      	ldr	r3, [pc, #212]	@ (8009390 <atan+0x328>)
 80092bc:	4e35      	ldr	r6, [pc, #212]	@ (8009394 <atan+0x32c>)
 80092be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80092c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c6:	f7f6 ffff 	bl	80002c8 <__aeabi_dsub>
 80092ca:	4622      	mov	r2, r4
 80092cc:	462b      	mov	r3, r5
 80092ce:	f7f6 fffb 	bl	80002c8 <__aeabi_dsub>
 80092d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80092d6:	4602      	mov	r2, r0
 80092d8:	460b      	mov	r3, r1
 80092da:	e9d6 0100 	ldrd	r0, r1, [r6]
 80092de:	f7f6 fff3 	bl	80002c8 <__aeabi_dsub>
 80092e2:	f1bb 0f00 	cmp.w	fp, #0
 80092e6:	4604      	mov	r4, r0
 80092e8:	460d      	mov	r5, r1
 80092ea:	f6bf aedc 	bge.w	80090a6 <atan+0x3e>
 80092ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80092f2:	461d      	mov	r5, r3
 80092f4:	e6d7      	b.n	80090a6 <atan+0x3e>
 80092f6:	a51c      	add	r5, pc, #112	@ (adr r5, 8009368 <atan+0x300>)
 80092f8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80092fc:	e6d3      	b.n	80090a6 <atan+0x3e>
 80092fe:	bf00      	nop
 8009300:	54442d18 	.word	0x54442d18
 8009304:	3ff921fb 	.word	0x3ff921fb
 8009308:	8800759c 	.word	0x8800759c
 800930c:	7e37e43c 	.word	0x7e37e43c
 8009310:	e322da11 	.word	0xe322da11
 8009314:	3f90ad3a 	.word	0x3f90ad3a
 8009318:	24760deb 	.word	0x24760deb
 800931c:	3fa97b4b 	.word	0x3fa97b4b
 8009320:	a0d03d51 	.word	0xa0d03d51
 8009324:	3fb10d66 	.word	0x3fb10d66
 8009328:	c54c206e 	.word	0xc54c206e
 800932c:	3fb745cd 	.word	0x3fb745cd
 8009330:	920083ff 	.word	0x920083ff
 8009334:	3fc24924 	.word	0x3fc24924
 8009338:	5555550d 	.word	0x5555550d
 800933c:	3fd55555 	.word	0x3fd55555
 8009340:	2c6a6c2f 	.word	0x2c6a6c2f
 8009344:	bfa2b444 	.word	0xbfa2b444
 8009348:	52defd9a 	.word	0x52defd9a
 800934c:	3fadde2d 	.word	0x3fadde2d
 8009350:	af749a6d 	.word	0xaf749a6d
 8009354:	3fb3b0f2 	.word	0x3fb3b0f2
 8009358:	fe231671 	.word	0xfe231671
 800935c:	3fbc71c6 	.word	0x3fbc71c6
 8009360:	9998ebc4 	.word	0x9998ebc4
 8009364:	3fc99999 	.word	0x3fc99999
 8009368:	54442d18 	.word	0x54442d18
 800936c:	bff921fb 	.word	0xbff921fb
 8009370:	440fffff 	.word	0x440fffff
 8009374:	7ff00000 	.word	0x7ff00000
 8009378:	3fdbffff 	.word	0x3fdbffff
 800937c:	3ff00000 	.word	0x3ff00000
 8009380:	3ff2ffff 	.word	0x3ff2ffff
 8009384:	40038000 	.word	0x40038000
 8009388:	3ff80000 	.word	0x3ff80000
 800938c:	bff00000 	.word	0xbff00000
 8009390:	0800a508 	.word	0x0800a508
 8009394:	0800a528 	.word	0x0800a528

08009398 <_init>:
 8009398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939a:	bf00      	nop
 800939c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800939e:	bc08      	pop	{r3}
 80093a0:	469e      	mov	lr, r3
 80093a2:	4770      	bx	lr

080093a4 <_fini>:
 80093a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a6:	bf00      	nop
 80093a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093aa:	bc08      	pop	{r3}
 80093ac:	469e      	mov	lr, r3
 80093ae:	4770      	bx	lr
